// Generated by gencpp from file vehiclemap_msg/LOCAL_POS_DATA_ENTITY.msg
// DO NOT EDIT!


#ifndef VEHICLEMAP_MSG_MESSAGE_LOCAL_POS_DATA_ENTITY_H
#define VEHICLEMAP_MSG_MESSAGE_LOCAL_POS_DATA_ENTITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehiclemap_msg
{
template <class ContainerAllocator>
struct LOCAL_POS_DATA_ENTITY_
{
  typedef LOCAL_POS_DATA_ENTITY_<ContainerAllocator> Type;

  LOCAL_POS_DATA_ENTITY_()
    : header(0)
    , time(0)
    , dr_x(0)
    , dr_y(0)
    , dr_z(0)
    , dr_heading(0)
    , dr_roll(0)
    , dr_pitch(0)
    , lf_speed(0)
    , rf_speed(0)
    , lr_speed(0)
    , rr_speed(0)
    , rot_x(0)
    , rot_y(0)
    , rot_z(0)
    , acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , steer(0)
    , brake(0)
    , fuel(0)
    , trans(0)
    , VehicleState(0)
    , mode(0)
    , drStatus(0)
    , errorStatus(0)
    , emergency_flag(0)
    , hardswitch_on(0)  {
    }
  LOCAL_POS_DATA_ENTITY_(const ContainerAllocator& _alloc)
    : header(0)
    , time(0)
    , dr_x(0)
    , dr_y(0)
    , dr_z(0)
    , dr_heading(0)
    , dr_roll(0)
    , dr_pitch(0)
    , lf_speed(0)
    , rf_speed(0)
    , lr_speed(0)
    , rr_speed(0)
    , rot_x(0)
    , rot_y(0)
    , rot_z(0)
    , acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , steer(0)
    , brake(0)
    , fuel(0)
    , trans(0)
    , VehicleState(0)
    , mode(0)
    , drStatus(0)
    , errorStatus(0)
    , emergency_flag(0)
    , hardswitch_on(0)  {
  (void)_alloc;
    }



   typedef uint32_t _header_type;
  _header_type header;

   typedef int64_t _time_type;
  _time_type time;

   typedef int32_t _dr_x_type;
  _dr_x_type dr_x;

   typedef int32_t _dr_y_type;
  _dr_y_type dr_y;

   typedef int32_t _dr_z_type;
  _dr_z_type dr_z;

   typedef int32_t _dr_heading_type;
  _dr_heading_type dr_heading;

   typedef int32_t _dr_roll_type;
  _dr_roll_type dr_roll;

   typedef int32_t _dr_pitch_type;
  _dr_pitch_type dr_pitch;

   typedef int32_t _lf_speed_type;
  _lf_speed_type lf_speed;

   typedef int32_t _rf_speed_type;
  _rf_speed_type rf_speed;

   typedef int32_t _lr_speed_type;
  _lr_speed_type lr_speed;

   typedef int32_t _rr_speed_type;
  _rr_speed_type rr_speed;

   typedef int32_t _rot_x_type;
  _rot_x_type rot_x;

   typedef int32_t _rot_y_type;
  _rot_y_type rot_y;

   typedef int32_t _rot_z_type;
  _rot_z_type rot_z;

   typedef int32_t _acc_x_type;
  _acc_x_type acc_x;

   typedef int32_t _acc_y_type;
  _acc_y_type acc_y;

   typedef int32_t _acc_z_type;
  _acc_z_type acc_z;

   typedef int32_t _steer_type;
  _steer_type steer;

   typedef int32_t _brake_type;
  _brake_type brake;

   typedef int32_t _fuel_type;
  _fuel_type fuel;

   typedef int32_t _trans_type;
  _trans_type trans;

   typedef int8_t _VehicleState_type;
  _VehicleState_type VehicleState;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _drStatus_type;
  _drStatus_type drStatus;

   typedef int32_t _errorStatus_type;
  _errorStatus_type errorStatus;

   typedef int32_t _emergency_flag_type;
  _emergency_flag_type emergency_flag;

   typedef int32_t _hardswitch_on_type;
  _hardswitch_on_type hardswitch_on;




  typedef boost::shared_ptr< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> const> ConstPtr;

}; // struct LOCAL_POS_DATA_ENTITY_

typedef ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<std::allocator<void> > LOCAL_POS_DATA_ENTITY;

typedef boost::shared_ptr< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY > LOCAL_POS_DATA_ENTITYPtr;
typedef boost::shared_ptr< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY const> LOCAL_POS_DATA_ENTITYConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehiclemap_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'vehiclemap_msg': ['/home/jbh/catkin_ws/src/vehiclemap_msg/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "921653f470056a02d674a893148fe50b";
  }

  static const char* value(const ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x921653f470056a02ULL;
  static const uint64_t static_value2 = 0xd674a893148fe50bULL;
};

template<class ContainerAllocator>
struct DataType< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehiclemap_msg/LOCAL_POS_DATA_ENTITY";
  }

  static const char* value(const ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32  header  	#数据头\n\
int64   time		#millisecond\n\
int32 dr_x    		#cm\n\
int32 dr_y    		#cm\n\
int32 dr_z    		#centimeter\n\
int32 dr_heading 	#0.01degree\n\
int32 dr_roll   	#0.01degree\n\
int32 dr_pitch  	#0.01degree\n\
int32 lf_speed 	#left_front wheel speed,cm/s\n\
int32 rf_speed 	#right_front wheel speed,cm/s\n\
int32 lr_speed 	#left_rear wheel speed,cm/s\n\
int32 rr_speed 	#right_rear wheel speed,cm/s\n\
int32 rot_x 	#imu三轴陀螺速度 0.01degree/s\n\
int32 rot_y 	#imu三轴陀螺速度 0.01degree/s\n\
int32 rot_z  	#imu三轴陀螺速度 0.01degree/s\n\
int32 acc_x 	#imu三轴加速度  0.01m/s^2\n\
int32 acc_y 	#imu三轴加速度  0.01m/s^2\n\
int32 acc_z  	#imu三轴加速度  0.01m/s^2\n\
int32  steer  	#-3000(right)~3000(left) degree  0.01degree/s\n\
int32  brake    #0(zero)~100(full)\n\
int32  fuel     #0(zero)~100(full)\n\
int32 trans  	#PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3\n\
int8 VehicleState	#车辆状态\n\
int32 mode      	#行驶模式 #DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2\n\
int32 drStatus		#dr运行状态\n\
int32 errorStatus	#错误状态\n\
int32 emergency_flag   	#故障标志位\n\
int32 hardswitch_on\n\
";
  }

  static const char* value(const ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.dr_x);
      stream.next(m.dr_y);
      stream.next(m.dr_z);
      stream.next(m.dr_heading);
      stream.next(m.dr_roll);
      stream.next(m.dr_pitch);
      stream.next(m.lf_speed);
      stream.next(m.rf_speed);
      stream.next(m.lr_speed);
      stream.next(m.rr_speed);
      stream.next(m.rot_x);
      stream.next(m.rot_y);
      stream.next(m.rot_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.steer);
      stream.next(m.brake);
      stream.next(m.fuel);
      stream.next(m.trans);
      stream.next(m.VehicleState);
      stream.next(m.mode);
      stream.next(m.drStatus);
      stream.next(m.errorStatus);
      stream.next(m.emergency_flag);
      stream.next(m.hardswitch_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LOCAL_POS_DATA_ENTITY_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehiclemap_msg::LOCAL_POS_DATA_ENTITY_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time);
    s << indent << "dr_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dr_x);
    s << indent << "dr_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dr_y);
    s << indent << "dr_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dr_z);
    s << indent << "dr_heading: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dr_heading);
    s << indent << "dr_roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dr_roll);
    s << indent << "dr_pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dr_pitch);
    s << indent << "lf_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lf_speed);
    s << indent << "rf_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rf_speed);
    s << indent << "lr_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lr_speed);
    s << indent << "rr_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_speed);
    s << indent << "rot_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rot_x);
    s << indent << "rot_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rot_y);
    s << indent << "rot_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rot_z);
    s << indent << "acc_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.acc_z);
    s << indent << "steer: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer);
    s << indent << "brake: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake);
    s << indent << "fuel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fuel);
    s << indent << "trans: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trans);
    s << indent << "VehicleState: ";
    Printer<int8_t>::stream(s, indent + "  ", v.VehicleState);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "drStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drStatus);
    s << indent << "errorStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.errorStatus);
    s << indent << "emergency_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.emergency_flag);
    s << indent << "hardswitch_on: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hardswitch_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLEMAP_MSG_MESSAGE_LOCAL_POS_DATA_ENTITY_H
