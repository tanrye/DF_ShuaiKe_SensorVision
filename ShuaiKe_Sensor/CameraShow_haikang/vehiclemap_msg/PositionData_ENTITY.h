// Generated by gencpp from file vehiclemap_msg/PositionData_ENTITY.msg
// DO NOT EDIT!


#ifndef VEHICLEMAP_MSG_MESSAGE_POSITIONDATA_ENTITY_H
#define VEHICLEMAP_MSG_MESSAGE_POSITIONDATA_ENTITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehiclemap_msg
{
template <class ContainerAllocator>
struct PositionData_ENTITY_
{
  typedef PositionData_ENTITY_<ContainerAllocator> Type;

  PositionData_ENTITY_()
    : gps_flag(0)
    , gps_week(0)
    , gps_millisecond(0)
    , llhPos()
    , gaussPos()
    , height(0)
    , pitch(0)
    , roll(0)
    , azimuth(0)
    , northVelocity(0)
    , eastVelocity(0)
    , upVelocity(0)
    , positionStatus(0)
    , motion_flag(0)
    , motion_week(0)
    , motion_millisecond(0)
    , drPos()
    , drHeight(0)
    , drAzimuth(0)
    , drNorthVelocity(0)
    , drEastVelocity(0)
    , drUpVelocity(0)
    , reserved()  {
      llhPos.assign(0);

      gaussPos.assign(0);

      drPos.assign(0);

      reserved.assign(0);
  }
  PositionData_ENTITY_(const ContainerAllocator& _alloc)
    : gps_flag(0)
    , gps_week(0)
    , gps_millisecond(0)
    , llhPos()
    , gaussPos()
    , height(0)
    , pitch(0)
    , roll(0)
    , azimuth(0)
    , northVelocity(0)
    , eastVelocity(0)
    , upVelocity(0)
    , positionStatus(0)
    , motion_flag(0)
    , motion_week(0)
    , motion_millisecond(0)
    , drPos()
    , drHeight(0)
    , drAzimuth(0)
    , drNorthVelocity(0)
    , drEastVelocity(0)
    , drUpVelocity(0)
    , reserved()  {
  (void)_alloc;
      llhPos.assign(0);

      gaussPos.assign(0);

      drPos.assign(0);

      reserved.assign(0);
  }



   typedef int16_t _gps_flag_type;
  _gps_flag_type gps_flag;

   typedef int16_t _gps_week_type;
  _gps_week_type gps_week;

   typedef int64_t _gps_millisecond_type;
  _gps_millisecond_type gps_millisecond;

   typedef boost::array<int32_t, 2>  _llhPos_type;
  _llhPos_type llhPos;

   typedef boost::array<int32_t, 2>  _gaussPos_type;
  _gaussPos_type gaussPos;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _pitch_type;
  _pitch_type pitch;

   typedef int32_t _roll_type;
  _roll_type roll;

   typedef int32_t _azimuth_type;
  _azimuth_type azimuth;

   typedef int32_t _northVelocity_type;
  _northVelocity_type northVelocity;

   typedef int32_t _eastVelocity_type;
  _eastVelocity_type eastVelocity;

   typedef int32_t _upVelocity_type;
  _upVelocity_type upVelocity;

   typedef int32_t _positionStatus_type;
  _positionStatus_type positionStatus;

   typedef int16_t _motion_flag_type;
  _motion_flag_type motion_flag;

   typedef int16_t _motion_week_type;
  _motion_week_type motion_week;

   typedef int32_t _motion_millisecond_type;
  _motion_millisecond_type motion_millisecond;

   typedef boost::array<int32_t, 2>  _drPos_type;
  _drPos_type drPos;

   typedef int32_t _drHeight_type;
  _drHeight_type drHeight;

   typedef int32_t _drAzimuth_type;
  _drAzimuth_type drAzimuth;

   typedef int32_t _drNorthVelocity_type;
  _drNorthVelocity_type drNorthVelocity;

   typedef int32_t _drEastVelocity_type;
  _drEastVelocity_type drEastVelocity;

   typedef int32_t _drUpVelocity_type;
  _drUpVelocity_type drUpVelocity;

   typedef boost::array<int32_t, 2>  _reserved_type;
  _reserved_type reserved;




  typedef boost::shared_ptr< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> const> ConstPtr;

}; // struct PositionData_ENTITY_

typedef ::vehiclemap_msg::PositionData_ENTITY_<std::allocator<void> > PositionData_ENTITY;

typedef boost::shared_ptr< ::vehiclemap_msg::PositionData_ENTITY > PositionData_ENTITYPtr;
typedef boost::shared_ptr< ::vehiclemap_msg::PositionData_ENTITY const> PositionData_ENTITYConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehiclemap_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'vehiclemap_msg': ['/home/jbh/catkin_ws/src/vehiclemap_msg/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3436cb5492471ef8fb4c9bbc0f2b6c3b";
  }

  static const char* value(const ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3436cb5492471ef8ULL;
  static const uint64_t static_value2 = 0xfb4c9bbc0f2b6c3bULL;
};

template<class ContainerAllocator>
struct DataType< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehiclemap_msg/PositionData_ENTITY";
  }

  static const char* value(const ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 gps_flag       		#gps info is updated\n\
int16 gps_week\n\
int64 gps_millisecond         	#millisecond in a week\n\
int32[2] llhPos			#经纬度，llpos[i]/SC_POS 单位为度\n\
int32[2] gaussPos		#高斯投影位置,cm，\n\
int32 height 			#cm\n\
int32 pitch  			#欧拉角，单位为0.01度\n\
int32 roll   			#欧拉角，单位为0.01度\n\
int32 azimuth        		#欧拉角，单位为0.01度,向东为零度，逆时针0-360\n\
int32 northVelocity  		#north速度，单位为cm/s\n\
int32 eastVelocity\n\
int32 upVelocity\n\
int32 positionStatus	  	#系统运行状态\n\
int16 motion_flag    		# motion info is updated\n\
int16 motion_week\n\
int32 motion_millisecond\n\
int32[2] drPos\n\
int32 drHeight\n\
int32 drAzimuth\n\
int32 drNorthVelocity\n\
int32 drEastVelocity\n\
int32 drUpVelocity\n\
int32[2] reserved\n\
";
  }

  static const char* value(const ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_flag);
      stream.next(m.gps_week);
      stream.next(m.gps_millisecond);
      stream.next(m.llhPos);
      stream.next(m.gaussPos);
      stream.next(m.height);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.azimuth);
      stream.next(m.northVelocity);
      stream.next(m.eastVelocity);
      stream.next(m.upVelocity);
      stream.next(m.positionStatus);
      stream.next(m.motion_flag);
      stream.next(m.motion_week);
      stream.next(m.motion_millisecond);
      stream.next(m.drPos);
      stream.next(m.drHeight);
      stream.next(m.drAzimuth);
      stream.next(m.drNorthVelocity);
      stream.next(m.drEastVelocity);
      stream.next(m.drUpVelocity);
      stream.next(m.reserved);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionData_ENTITY_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehiclemap_msg::PositionData_ENTITY_<ContainerAllocator>& v)
  {
    s << indent << "gps_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gps_flag);
    s << indent << "gps_week: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecond: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gps_millisecond);
    s << indent << "llhPos[]" << std::endl;
    for (size_t i = 0; i < v.llhPos.size(); ++i)
    {
      s << indent << "  llhPos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.llhPos[i]);
    }
    s << indent << "gaussPos[]" << std::endl;
    for (size_t i = 0; i < v.gaussPos.size(); ++i)
    {
      s << indent << "  gaussPos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.gaussPos[i]);
    }
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roll);
    s << indent << "azimuth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.azimuth);
    s << indent << "northVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.northVelocity);
    s << indent << "eastVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.eastVelocity);
    s << indent << "upVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.upVelocity);
    s << indent << "positionStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.positionStatus);
    s << indent << "motion_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motion_flag);
    s << indent << "motion_week: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motion_week);
    s << indent << "motion_millisecond: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_millisecond);
    s << indent << "drPos[]" << std::endl;
    for (size_t i = 0; i < v.drPos.size(); ++i)
    {
      s << indent << "  drPos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.drPos[i]);
    }
    s << indent << "drHeight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drHeight);
    s << indent << "drAzimuth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drAzimuth);
    s << indent << "drNorthVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drNorthVelocity);
    s << indent << "drEastVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drEastVelocity);
    s << indent << "drUpVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drUpVelocity);
    s << indent << "reserved[]" << std::endl;
    for (size_t i = 0; i < v.reserved.size(); ++i)
    {
      s << indent << "  reserved[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.reserved[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLEMAP_MSG_MESSAGE_POSITIONDATA_ENTITY_H
