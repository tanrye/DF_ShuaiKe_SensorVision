// Generated by gencpp from file camera_data_msgs/Camera.msg
// DO NOT EDIT!


#ifndef CAMERA_DATA_MSGS_MESSAGE_CAMERA_H
#define CAMERA_DATA_MSGS_MESSAGE_CAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
// #include <camera_data_msgs/FrameStamp.h>
// #include <camera_data_msgs/FrameStamp.h>
#include "FrameStamp.h"

namespace camera_data_msgs
{
template <class ContainerAllocator>
struct Camera_
{
  typedef Camera_<ContainerAllocator> Type;

  Camera_()
    : header()
    , messageID(0)
    , localStamp()
    , globalStamp()
    , camera_numobstacles(0)
    , VehSpeed(0.0)  {
    }
  Camera_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , messageID(0)
    , localStamp(_alloc)
    , globalStamp(_alloc)
    , camera_numobstacles(0)
    , VehSpeed(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _messageID_type;
  _messageID_type messageID;

   typedef  ::camera_data_msgs::FrameStamp_<ContainerAllocator>  _localStamp_type;
  _localStamp_type localStamp;

   typedef  ::camera_data_msgs::FrameStamp_<ContainerAllocator>  _globalStamp_type;
  _globalStamp_type globalStamp;

   typedef int32_t _camera_numobstacles_type;
  _camera_numobstacles_type camera_numobstacles;

   typedef double _VehSpeed_type;
  _VehSpeed_type VehSpeed;




  typedef boost::shared_ptr< ::camera_data_msgs::Camera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_data_msgs::Camera_<ContainerAllocator> const> ConstPtr;

}; // struct Camera_

typedef ::camera_data_msgs::Camera_<std::allocator<void> > Camera;

typedef boost::shared_ptr< ::camera_data_msgs::Camera > CameraPtr;
typedef boost::shared_ptr< ::camera_data_msgs::Camera const> CameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_data_msgs::Camera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_data_msgs::Camera_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera_data_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'camera_data_msgs': ['/home/hyh/Desktop/ALL_Project/src/make_msg/catkin_ws/src/camera_data_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera_data_msgs::Camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_data_msgs::Camera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_data_msgs::Camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_data_msgs::Camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_data_msgs::Camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_data_msgs::Camera_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_data_msgs::Camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff46bad6ccfe4f1ffc0a723d1f2d3efd";
  }

  static const char* value(const ::camera_data_msgs::Camera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff46bad6ccfe4f1fULL;
  static const uint64_t static_value2 = 0xfc0a723d1f2d3efdULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_data_msgs::Camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_data_msgs/Camera";
  }

  static const char* value(const ::camera_data_msgs::Camera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_data_msgs::Camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
\n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
\n\
int32 camera_numobstacles\n\
float64  VehSpeed\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: camera_data_msgs/FrameStamp\n\
#MSG FrameStamp\n\
Header header\n\
float64 time\n\
float64  lat\n\
float64  lng\n\
float64  height\n\
float64[3] position\n\
float64[3] orientation\n\
float64[3] linearSpeed\n\
float64[3] angularSpeed\n\
";
  }

  static const char* value(const ::camera_data_msgs::Camera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_data_msgs::Camera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.messageID);
      stream.next(m.localStamp);
      stream.next(m.globalStamp);
      stream.next(m.camera_numobstacles);
      stream.next(m.VehSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Camera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_data_msgs::Camera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_data_msgs::Camera_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "messageID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.messageID);
    s << indent << "localStamp: ";
    s << std::endl;
    Printer< ::camera_data_msgs::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.localStamp);
    s << indent << "globalStamp: ";
    s << std::endl;
    Printer< ::camera_data_msgs::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.globalStamp);
    s << indent << "camera_numobstacles: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_numobstacles);
    s << indent << "VehSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.VehSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_DATA_MSGS_MESSAGE_CAMERA_H
