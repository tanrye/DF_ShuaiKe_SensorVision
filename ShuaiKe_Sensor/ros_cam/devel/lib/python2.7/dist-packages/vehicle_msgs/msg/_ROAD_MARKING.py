# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/ROAD_MARKING.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ROAD_MARKING(genpy.Message):
  _md5sum = "e1205ecf5882a35d2b33fa0ad805117a"
  _type = "vehicle_msgs/ROAD_MARKING"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32                     bottomleftx
int32                     bottomlefty
int32                     bottomrightx
int32                     bottomrighty
int32                     topleftx
int32                     toplefty
int32                     toprightx
int32                     toprighty
int32                     direction
int32                     width
uint8           sign_type

"""
  __slots__ = ['bottomleftx','bottomlefty','bottomrightx','bottomrighty','topleftx','toplefty','toprightx','toprighty','direction','width','sign_type']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bottomleftx,bottomlefty,bottomrightx,bottomrighty,topleftx,toplefty,toprightx,toprighty,direction,width,sign_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ROAD_MARKING, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bottomleftx is None:
        self.bottomleftx = 0
      if self.bottomlefty is None:
        self.bottomlefty = 0
      if self.bottomrightx is None:
        self.bottomrightx = 0
      if self.bottomrighty is None:
        self.bottomrighty = 0
      if self.topleftx is None:
        self.topleftx = 0
      if self.toplefty is None:
        self.toplefty = 0
      if self.toprightx is None:
        self.toprightx = 0
      if self.toprighty is None:
        self.toprighty = 0
      if self.direction is None:
        self.direction = 0
      if self.width is None:
        self.width = 0
      if self.sign_type is None:
        self.sign_type = 0
    else:
      self.bottomleftx = 0
      self.bottomlefty = 0
      self.bottomrightx = 0
      self.bottomrighty = 0
      self.topleftx = 0
      self.toplefty = 0
      self.toprightx = 0
      self.toprighty = 0
      self.direction = 0
      self.width = 0
      self.sign_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10iB().pack(_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type,) = _get_struct_10iB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10iB().pack(_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type,) = _get_struct_10iB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10iB = None
def _get_struct_10iB():
    global _struct_10iB
    if _struct_10iB is None:
        _struct_10iB = struct.Struct("<10iB")
    return _struct_10iB
