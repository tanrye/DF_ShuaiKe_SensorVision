# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/VehicleCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vehicle_msgs.msg
import std_msgs.msg

class VehicleCmd(genpy.Message):
  _md5sum = "132c9e9a1ccd49b8247dcbdeb6f55a8b"
  _type = "vehicle_msgs/VehicleCmd"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
HAD1   had1
HADCmd hadCmd


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vehicle_msgs/HAD1
# ID=0x080, Len=8, 10ms
float32 ElectricAccPedal      #  模拟加速踏板需求信号
float32 AngleWheel            #  期望方向盘转角
float32 BrakeReq              #  制动减速度请求
uint16  AnglularAccleration   #  期望方向盘转角速度
uint8   AutoDriveEnable       #  自动驾驶使能信号
uint8   EPBParkingReq         #  HAD控制EPB驻车指令
uint8   RollingCountHAD1      #  HAD1滚动计数值
uint8   CheckSumHAD1          #  HAD1校验值



================================================================================
MSG: vehicle_msgs/HADCmd
#  ID=0x303, Len=4, 100ms
uint8  FrontWiperCtrlCmd     #  前雨刮控制命令
uint8  RearWiperCtrlCmd      #  后雨刮控制命令
uint8  LowBeamCtrlCmd        #  近光灯控制命令
uint8  HighBeamCtrlCmd       #  远光灯控制命令
uint8  BackFogLightCtrlCmd   #  后雾灯控制命令
uint8  FrontFogLightCtrlCmd  #  前雾灯控制命令
uint8  PositionLampCtrlCmd   #  位置灯控制命令
uint8  LeftLightCtrlCmd      #  左转向控制命令
uint8  RightLightCtrlCmd     #  右转向控制命令
uint8  HarzadCtrlCmd         #  危险报警灯控制命令
uint8  BrakeLampCtrlCmd      #  刹车灯控制命令
uint8  ReversingLampCtrlCmd  #  倒车灯控制命令
uint8  AlarmHornCtrlCmd      #  喇叭控制命令

"""
  __slots__ = ['header','had1','hadCmd']
  _slot_types = ['std_msgs/Header','vehicle_msgs/HAD1','vehicle_msgs/HADCmd']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,had1,hadCmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.had1 is None:
        self.had1 = vehicle_msgs.msg.HAD1()
      if self.hadCmd is None:
        self.hadCmd = vehicle_msgs.msg.HADCmd()
    else:
      self.header = std_msgs.msg.Header()
      self.had1 = vehicle_msgs.msg.HAD1()
      self.hadCmd = vehicle_msgs.msg.HADCmd()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3fH17B().pack(_x.had1.ElectricAccPedal, _x.had1.AngleWheel, _x.had1.BrakeReq, _x.had1.AnglularAccleration, _x.had1.AutoDriveEnable, _x.had1.EPBParkingReq, _x.had1.RollingCountHAD1, _x.had1.CheckSumHAD1, _x.hadCmd.FrontWiperCtrlCmd, _x.hadCmd.RearWiperCtrlCmd, _x.hadCmd.LowBeamCtrlCmd, _x.hadCmd.HighBeamCtrlCmd, _x.hadCmd.BackFogLightCtrlCmd, _x.hadCmd.FrontFogLightCtrlCmd, _x.hadCmd.PositionLampCtrlCmd, _x.hadCmd.LeftLightCtrlCmd, _x.hadCmd.RightLightCtrlCmd, _x.hadCmd.HarzadCtrlCmd, _x.hadCmd.BrakeLampCtrlCmd, _x.hadCmd.ReversingLampCtrlCmd, _x.hadCmd.AlarmHornCtrlCmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.had1 is None:
        self.had1 = vehicle_msgs.msg.HAD1()
      if self.hadCmd is None:
        self.hadCmd = vehicle_msgs.msg.HADCmd()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.had1.ElectricAccPedal, _x.had1.AngleWheel, _x.had1.BrakeReq, _x.had1.AnglularAccleration, _x.had1.AutoDriveEnable, _x.had1.EPBParkingReq, _x.had1.RollingCountHAD1, _x.had1.CheckSumHAD1, _x.hadCmd.FrontWiperCtrlCmd, _x.hadCmd.RearWiperCtrlCmd, _x.hadCmd.LowBeamCtrlCmd, _x.hadCmd.HighBeamCtrlCmd, _x.hadCmd.BackFogLightCtrlCmd, _x.hadCmd.FrontFogLightCtrlCmd, _x.hadCmd.PositionLampCtrlCmd, _x.hadCmd.LeftLightCtrlCmd, _x.hadCmd.RightLightCtrlCmd, _x.hadCmd.HarzadCtrlCmd, _x.hadCmd.BrakeLampCtrlCmd, _x.hadCmd.ReversingLampCtrlCmd, _x.hadCmd.AlarmHornCtrlCmd,) = _get_struct_3fH17B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3fH17B().pack(_x.had1.ElectricAccPedal, _x.had1.AngleWheel, _x.had1.BrakeReq, _x.had1.AnglularAccleration, _x.had1.AutoDriveEnable, _x.had1.EPBParkingReq, _x.had1.RollingCountHAD1, _x.had1.CheckSumHAD1, _x.hadCmd.FrontWiperCtrlCmd, _x.hadCmd.RearWiperCtrlCmd, _x.hadCmd.LowBeamCtrlCmd, _x.hadCmd.HighBeamCtrlCmd, _x.hadCmd.BackFogLightCtrlCmd, _x.hadCmd.FrontFogLightCtrlCmd, _x.hadCmd.PositionLampCtrlCmd, _x.hadCmd.LeftLightCtrlCmd, _x.hadCmd.RightLightCtrlCmd, _x.hadCmd.HarzadCtrlCmd, _x.hadCmd.BrakeLampCtrlCmd, _x.hadCmd.ReversingLampCtrlCmd, _x.hadCmd.AlarmHornCtrlCmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.had1 is None:
        self.had1 = vehicle_msgs.msg.HAD1()
      if self.hadCmd is None:
        self.hadCmd = vehicle_msgs.msg.HADCmd()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.had1.ElectricAccPedal, _x.had1.AngleWheel, _x.had1.BrakeReq, _x.had1.AnglularAccleration, _x.had1.AutoDriveEnable, _x.had1.EPBParkingReq, _x.had1.RollingCountHAD1, _x.had1.CheckSumHAD1, _x.hadCmd.FrontWiperCtrlCmd, _x.hadCmd.RearWiperCtrlCmd, _x.hadCmd.LowBeamCtrlCmd, _x.hadCmd.HighBeamCtrlCmd, _x.hadCmd.BackFogLightCtrlCmd, _x.hadCmd.FrontFogLightCtrlCmd, _x.hadCmd.PositionLampCtrlCmd, _x.hadCmd.LeftLightCtrlCmd, _x.hadCmd.RightLightCtrlCmd, _x.hadCmd.HarzadCtrlCmd, _x.hadCmd.BrakeLampCtrlCmd, _x.hadCmd.ReversingLampCtrlCmd, _x.hadCmd.AlarmHornCtrlCmd,) = _get_struct_3fH17B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3fH17B = None
def _get_struct_3fH17B():
    global _struct_3fH17B
    if _struct_3fH17B is None:
        _struct_3fH17B = struct.Struct("<3fH17B")
    return _struct_3fH17B
