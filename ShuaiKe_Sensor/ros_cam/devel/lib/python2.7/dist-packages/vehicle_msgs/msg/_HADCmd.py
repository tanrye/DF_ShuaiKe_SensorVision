# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/HADCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HADCmd(genpy.Message):
  _md5sum = "32d5e791e88c20e40d5f1a1079507f6b"
  _type = "vehicle_msgs/HADCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#  ID=0x303, Len=4, 100ms
uint8  FrontWiperCtrlCmd     #  前雨刮控制命令
uint8  RearWiperCtrlCmd      #  后雨刮控制命令
uint8  LowBeamCtrlCmd        #  近光灯控制命令
uint8  HighBeamCtrlCmd       #  远光灯控制命令
uint8  BackFogLightCtrlCmd   #  后雾灯控制命令
uint8  FrontFogLightCtrlCmd  #  前雾灯控制命令
uint8  PositionLampCtrlCmd   #  位置灯控制命令
uint8  LeftLightCtrlCmd      #  左转向控制命令
uint8  RightLightCtrlCmd     #  右转向控制命令
uint8  HarzadCtrlCmd         #  危险报警灯控制命令
uint8  BrakeLampCtrlCmd      #  刹车灯控制命令
uint8  ReversingLampCtrlCmd  #  倒车灯控制命令
uint8  AlarmHornCtrlCmd      #  喇叭控制命令

"""
  __slots__ = ['FrontWiperCtrlCmd','RearWiperCtrlCmd','LowBeamCtrlCmd','HighBeamCtrlCmd','BackFogLightCtrlCmd','FrontFogLightCtrlCmd','PositionLampCtrlCmd','LeftLightCtrlCmd','RightLightCtrlCmd','HarzadCtrlCmd','BrakeLampCtrlCmd','ReversingLampCtrlCmd','AlarmHornCtrlCmd']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FrontWiperCtrlCmd,RearWiperCtrlCmd,LowBeamCtrlCmd,HighBeamCtrlCmd,BackFogLightCtrlCmd,FrontFogLightCtrlCmd,PositionLampCtrlCmd,LeftLightCtrlCmd,RightLightCtrlCmd,HarzadCtrlCmd,BrakeLampCtrlCmd,ReversingLampCtrlCmd,AlarmHornCtrlCmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HADCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.FrontWiperCtrlCmd is None:
        self.FrontWiperCtrlCmd = 0
      if self.RearWiperCtrlCmd is None:
        self.RearWiperCtrlCmd = 0
      if self.LowBeamCtrlCmd is None:
        self.LowBeamCtrlCmd = 0
      if self.HighBeamCtrlCmd is None:
        self.HighBeamCtrlCmd = 0
      if self.BackFogLightCtrlCmd is None:
        self.BackFogLightCtrlCmd = 0
      if self.FrontFogLightCtrlCmd is None:
        self.FrontFogLightCtrlCmd = 0
      if self.PositionLampCtrlCmd is None:
        self.PositionLampCtrlCmd = 0
      if self.LeftLightCtrlCmd is None:
        self.LeftLightCtrlCmd = 0
      if self.RightLightCtrlCmd is None:
        self.RightLightCtrlCmd = 0
      if self.HarzadCtrlCmd is None:
        self.HarzadCtrlCmd = 0
      if self.BrakeLampCtrlCmd is None:
        self.BrakeLampCtrlCmd = 0
      if self.ReversingLampCtrlCmd is None:
        self.ReversingLampCtrlCmd = 0
      if self.AlarmHornCtrlCmd is None:
        self.AlarmHornCtrlCmd = 0
    else:
      self.FrontWiperCtrlCmd = 0
      self.RearWiperCtrlCmd = 0
      self.LowBeamCtrlCmd = 0
      self.HighBeamCtrlCmd = 0
      self.BackFogLightCtrlCmd = 0
      self.FrontFogLightCtrlCmd = 0
      self.PositionLampCtrlCmd = 0
      self.LeftLightCtrlCmd = 0
      self.RightLightCtrlCmd = 0
      self.HarzadCtrlCmd = 0
      self.BrakeLampCtrlCmd = 0
      self.ReversingLampCtrlCmd = 0
      self.AlarmHornCtrlCmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13B().pack(_x.FrontWiperCtrlCmd, _x.RearWiperCtrlCmd, _x.LowBeamCtrlCmd, _x.HighBeamCtrlCmd, _x.BackFogLightCtrlCmd, _x.FrontFogLightCtrlCmd, _x.PositionLampCtrlCmd, _x.LeftLightCtrlCmd, _x.RightLightCtrlCmd, _x.HarzadCtrlCmd, _x.BrakeLampCtrlCmd, _x.ReversingLampCtrlCmd, _x.AlarmHornCtrlCmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.FrontWiperCtrlCmd, _x.RearWiperCtrlCmd, _x.LowBeamCtrlCmd, _x.HighBeamCtrlCmd, _x.BackFogLightCtrlCmd, _x.FrontFogLightCtrlCmd, _x.PositionLampCtrlCmd, _x.LeftLightCtrlCmd, _x.RightLightCtrlCmd, _x.HarzadCtrlCmd, _x.BrakeLampCtrlCmd, _x.ReversingLampCtrlCmd, _x.AlarmHornCtrlCmd,) = _get_struct_13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13B().pack(_x.FrontWiperCtrlCmd, _x.RearWiperCtrlCmd, _x.LowBeamCtrlCmd, _x.HighBeamCtrlCmd, _x.BackFogLightCtrlCmd, _x.FrontFogLightCtrlCmd, _x.PositionLampCtrlCmd, _x.LeftLightCtrlCmd, _x.RightLightCtrlCmd, _x.HarzadCtrlCmd, _x.BrakeLampCtrlCmd, _x.ReversingLampCtrlCmd, _x.AlarmHornCtrlCmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.FrontWiperCtrlCmd, _x.RearWiperCtrlCmd, _x.LowBeamCtrlCmd, _x.HighBeamCtrlCmd, _x.BackFogLightCtrlCmd, _x.FrontFogLightCtrlCmd, _x.PositionLampCtrlCmd, _x.LeftLightCtrlCmd, _x.RightLightCtrlCmd, _x.HarzadCtrlCmd, _x.BrakeLampCtrlCmd, _x.ReversingLampCtrlCmd, _x.AlarmHornCtrlCmd,) = _get_struct_13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13B = None
def _get_struct_13B():
    global _struct_13B
    if _struct_13B is None:
        _struct_13B = struct.Struct("<13B")
    return _struct_13B
