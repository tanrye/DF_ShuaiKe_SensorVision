# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/LANE_OBJ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LANE_OBJ(genpy.Message):
  _md5sum = "2e9c9ea532d33c58c9a38a72dbe8facd"
  _type = "vehicle_msgs/LANE_OBJ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 LaneID
int32 LaneRefer 	# 0,1,-1,2,-2,-3,3, from left to right
int32 LaneAttr  	# 0: 白实, 1:黄实, 2: 白虚, 3: 黄虚线, 4: 预测
int32 LanePtNum	#车道线数量
int32[200] LanePtX #
int32[200] LanePtY #
int32 LaneProb 	# 0-100, 概率
# line
float64 a
float64 b
float64 c 

"""
  __slots__ = ['LaneID','LaneRefer','LaneAttr','LanePtNum','LanePtX','LanePtY','LaneProb','a','b','c']
  _slot_types = ['int32','int32','int32','int32','int32[200]','int32[200]','int32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LaneID,LaneRefer,LaneAttr,LanePtNum,LanePtX,LanePtY,LaneProb,a,b,c

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LANE_OBJ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.LaneID is None:
        self.LaneID = 0
      if self.LaneRefer is None:
        self.LaneRefer = 0
      if self.LaneAttr is None:
        self.LaneAttr = 0
      if self.LanePtNum is None:
        self.LanePtNum = 0
      if self.LanePtX is None:
        self.LanePtX = [0] * 200
      if self.LanePtY is None:
        self.LanePtY = [0] * 200
      if self.LaneProb is None:
        self.LaneProb = 0
      if self.a is None:
        self.a = 0.
      if self.b is None:
        self.b = 0.
      if self.c is None:
        self.c = 0.
    else:
      self.LaneID = 0
      self.LaneRefer = 0
      self.LaneAttr = 0
      self.LanePtNum = 0
      self.LanePtX = [0] * 200
      self.LanePtY = [0] * 200
      self.LaneProb = 0
      self.a = 0.
      self.b = 0.
      self.c = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum))
      buff.write(_get_struct_200i().pack(*self.LanePtX))
      buff.write(_get_struct_200i().pack(*self.LanePtY))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.LaneProb, _x.a, _x.b, _x.c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 800
      self.LanePtX = _get_struct_200i().unpack(str[start:end])
      start = end
      end += 800
      self.LanePtY = _get_struct_200i().unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.LaneProb, _x.a, _x.b, _x.c,) = _get_struct_i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum))
      buff.write(self.LanePtX.tostring())
      buff.write(self.LanePtY.tostring())
      _x = self
      buff.write(_get_struct_i3d().pack(_x.LaneProb, _x.a, _x.b, _x.c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 800
      self.LanePtX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=200)
      start = end
      end += 800
      self.LanePtY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=200)
      _x = self
      start = end
      end += 28
      (_x.LaneProb, _x.a, _x.b, _x.c,) = _get_struct_i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
_struct_200i = None
def _get_struct_200i():
    global _struct_200i
    if _struct_200i is None:
        _struct_200i = struct.Struct("<200i")
    return _struct_200i
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
