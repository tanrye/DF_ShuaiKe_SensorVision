# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/ESC2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ESC2(genpy.Message):
  _md5sum = "5699aa57edafd231b29be027693467f8"
  _type = "vehicle_msgs/ESC2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID=0x0A0, Len=8, 10ms
uint8   VehSpdValidFlag              # 车速有效信号
uint8   VacuumOriginalValueValidity  # 真空压力原始值有效信号
float32 BrakeOilPress                # 制动主缸油压信号
float32 VehicleSpeed                 # 车速
int16   VacuumOriginalValue          # 真空压力原始值

"""
  __slots__ = ['VehSpdValidFlag','VacuumOriginalValueValidity','BrakeOilPress','VehicleSpeed','VacuumOriginalValue']
  _slot_types = ['uint8','uint8','float32','float32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VehSpdValidFlag,VacuumOriginalValueValidity,BrakeOilPress,VehicleSpeed,VacuumOriginalValue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ESC2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.VehSpdValidFlag is None:
        self.VehSpdValidFlag = 0
      if self.VacuumOriginalValueValidity is None:
        self.VacuumOriginalValueValidity = 0
      if self.BrakeOilPress is None:
        self.BrakeOilPress = 0.
      if self.VehicleSpeed is None:
        self.VehicleSpeed = 0.
      if self.VacuumOriginalValue is None:
        self.VacuumOriginalValue = 0
    else:
      self.VehSpdValidFlag = 0
      self.VacuumOriginalValueValidity = 0
      self.BrakeOilPress = 0.
      self.VehicleSpeed = 0.
      self.VacuumOriginalValue = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2fh().pack(_x.VehSpdValidFlag, _x.VacuumOriginalValueValidity, _x.BrakeOilPress, _x.VehicleSpeed, _x.VacuumOriginalValue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.VehSpdValidFlag, _x.VacuumOriginalValueValidity, _x.BrakeOilPress, _x.VehicleSpeed, _x.VacuumOriginalValue,) = _get_struct_2B2fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2fh().pack(_x.VehSpdValidFlag, _x.VacuumOriginalValueValidity, _x.BrakeOilPress, _x.VehicleSpeed, _x.VacuumOriginalValue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.VehSpdValidFlag, _x.VacuumOriginalValueValidity, _x.BrakeOilPress, _x.VehicleSpeed, _x.VacuumOriginalValue,) = _get_struct_2B2fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2fh = None
def _get_struct_2B2fh():
    global _struct_2B2fh
    if _struct_2B2fh is None:
        _struct_2B2fh = struct.Struct("<2B2fh")
    return _struct_2B2fh
