# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/SASInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SASInfo(genpy.Message):
  _md5sum = "f498c59239ab9f5ebaa888411522b5e1"
  _type = "vehicle_msgs/SASInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID=0x0A5, Len=8, 10ms                         
float32 SteeringAngle                # 转向角信号
uint16  SteeringRotSpd               # 转向角速度
uint8   CheckSumSAS1                 # SAS1校验值
uint8   RollingCountSAS1             # SAS1滚动计数值

"""
  __slots__ = ['SteeringAngle','SteeringRotSpd','CheckSumSAS1','RollingCountSAS1']
  _slot_types = ['float32','uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       SteeringAngle,SteeringRotSpd,CheckSumSAS1,RollingCountSAS1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SASInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.SteeringAngle is None:
        self.SteeringAngle = 0.
      if self.SteeringRotSpd is None:
        self.SteeringRotSpd = 0
      if self.CheckSumSAS1 is None:
        self.CheckSumSAS1 = 0
      if self.RollingCountSAS1 is None:
        self.RollingCountSAS1 = 0
    else:
      self.SteeringAngle = 0.
      self.SteeringRotSpd = 0
      self.CheckSumSAS1 = 0
      self.RollingCountSAS1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fH2B().pack(_x.SteeringAngle, _x.SteeringRotSpd, _x.CheckSumSAS1, _x.RollingCountSAS1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.SteeringAngle, _x.SteeringRotSpd, _x.CheckSumSAS1, _x.RollingCountSAS1,) = _get_struct_fH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fH2B().pack(_x.SteeringAngle, _x.SteeringRotSpd, _x.CheckSumSAS1, _x.RollingCountSAS1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.SteeringAngle, _x.SteeringRotSpd, _x.CheckSumSAS1, _x.RollingCountSAS1,) = _get_struct_fH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fH2B = None
def _get_struct_fH2B():
    global _struct_fH2B
    if _struct_fH2B is None:
        _struct_fH2B = struct.Struct("<fH2B")
    return _struct_fH2B
