# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/SpeedStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpeedStatus(genpy.Message):
  _md5sum = "91bbb94b1c08c13aa4b81b868ef0ac37"
  _type = "vehicle_msgs/SpeedStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 DesiredSpeed
float64 DesiredAcc
float64 CurrentSpeed
float64 CurrentAcc
float64 DesiredBrake
float64 CurrentBrake
float64 DesiredFuel
float64 CurrentFuel
int32 DesiredTransPos
int32 CurrentTransPos
int32 HardSwitchOn
int32 EmergenceFlag
int32 BcanControlFlag
int32 HornOnFlag
int32 EmergencyLightonFlag



"""
  __slots__ = ['DesiredSpeed','DesiredAcc','CurrentSpeed','CurrentAcc','DesiredBrake','CurrentBrake','DesiredFuel','CurrentFuel','DesiredTransPos','CurrentTransPos','HardSwitchOn','EmergenceFlag','BcanControlFlag','HornOnFlag','EmergencyLightonFlag']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       DesiredSpeed,DesiredAcc,CurrentSpeed,CurrentAcc,DesiredBrake,CurrentBrake,DesiredFuel,CurrentFuel,DesiredTransPos,CurrentTransPos,HardSwitchOn,EmergenceFlag,BcanControlFlag,HornOnFlag,EmergencyLightonFlag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpeedStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.DesiredSpeed is None:
        self.DesiredSpeed = 0.
      if self.DesiredAcc is None:
        self.DesiredAcc = 0.
      if self.CurrentSpeed is None:
        self.CurrentSpeed = 0.
      if self.CurrentAcc is None:
        self.CurrentAcc = 0.
      if self.DesiredBrake is None:
        self.DesiredBrake = 0.
      if self.CurrentBrake is None:
        self.CurrentBrake = 0.
      if self.DesiredFuel is None:
        self.DesiredFuel = 0.
      if self.CurrentFuel is None:
        self.CurrentFuel = 0.
      if self.DesiredTransPos is None:
        self.DesiredTransPos = 0
      if self.CurrentTransPos is None:
        self.CurrentTransPos = 0
      if self.HardSwitchOn is None:
        self.HardSwitchOn = 0
      if self.EmergenceFlag is None:
        self.EmergenceFlag = 0
      if self.BcanControlFlag is None:
        self.BcanControlFlag = 0
      if self.HornOnFlag is None:
        self.HornOnFlag = 0
      if self.EmergencyLightonFlag is None:
        self.EmergencyLightonFlag = 0
    else:
      self.DesiredSpeed = 0.
      self.DesiredAcc = 0.
      self.CurrentSpeed = 0.
      self.CurrentAcc = 0.
      self.DesiredBrake = 0.
      self.CurrentBrake = 0.
      self.DesiredFuel = 0.
      self.CurrentFuel = 0.
      self.DesiredTransPos = 0
      self.CurrentTransPos = 0
      self.HardSwitchOn = 0
      self.EmergenceFlag = 0
      self.BcanControlFlag = 0
      self.HornOnFlag = 0
      self.EmergencyLightonFlag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d7i().pack(_x.DesiredSpeed, _x.DesiredAcc, _x.CurrentSpeed, _x.CurrentAcc, _x.DesiredBrake, _x.CurrentBrake, _x.DesiredFuel, _x.CurrentFuel, _x.DesiredTransPos, _x.CurrentTransPos, _x.HardSwitchOn, _x.EmergenceFlag, _x.BcanControlFlag, _x.HornOnFlag, _x.EmergencyLightonFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.DesiredSpeed, _x.DesiredAcc, _x.CurrentSpeed, _x.CurrentAcc, _x.DesiredBrake, _x.CurrentBrake, _x.DesiredFuel, _x.CurrentFuel, _x.DesiredTransPos, _x.CurrentTransPos, _x.HardSwitchOn, _x.EmergenceFlag, _x.BcanControlFlag, _x.HornOnFlag, _x.EmergencyLightonFlag,) = _get_struct_8d7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d7i().pack(_x.DesiredSpeed, _x.DesiredAcc, _x.CurrentSpeed, _x.CurrentAcc, _x.DesiredBrake, _x.CurrentBrake, _x.DesiredFuel, _x.CurrentFuel, _x.DesiredTransPos, _x.CurrentTransPos, _x.HardSwitchOn, _x.EmergenceFlag, _x.BcanControlFlag, _x.HornOnFlag, _x.EmergencyLightonFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.DesiredSpeed, _x.DesiredAcc, _x.CurrentSpeed, _x.CurrentAcc, _x.DesiredBrake, _x.CurrentBrake, _x.DesiredFuel, _x.CurrentFuel, _x.DesiredTransPos, _x.CurrentTransPos, _x.HardSwitchOn, _x.EmergenceFlag, _x.BcanControlFlag, _x.HornOnFlag, _x.EmergencyLightonFlag,) = _get_struct_8d7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d7i = None
def _get_struct_8d7i():
    global _struct_8d7i
    if _struct_8d7i is None:
        _struct_8d7i = struct.Struct("<8d7i")
    return _struct_8d7i
