# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/PositionData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionData(genpy.Message):
  _md5sum = "fe95a850af88fa96dc6d597d5f291e37"
  _type = "vehicle_msgs/PositionData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 gps_flag       #gps info is updated
int16 gps_week
float64 gps_millisecond        #millisecond in a week
int32[2] llhPos	#经纬度，llpos[i]/SC_POS 单位为度
int32[2] gaussPos  #高斯投影位置,cm，
int32 height         #cm
int32 pitch  #欧拉角，单位为0.01度
int32 roll   #欧拉角，单位为0.01度
int32 azimuth        #欧拉角，单位为0.01度,向东为零度，逆时针0-360
int32 northVelocity  #north速度，单位为cm/s
int32 eastVelocity
int32 upVelocity
int32 positionStatus	  	#系统运行状态
int16 motion_flag    # motion info is updated
int16 motion_week
int32 motion_millisecond
int32[2] drPos
int32 drHeight
int32 drAzimuth
int32 drNorthVelocity
int32 drEastVelocity
int32 drUpVelocity
int32[2] reserved

"""
  __slots__ = ['gps_flag','gps_week','gps_millisecond','llhPos','gaussPos','height','pitch','roll','azimuth','northVelocity','eastVelocity','upVelocity','positionStatus','motion_flag','motion_week','motion_millisecond','drPos','drHeight','drAzimuth','drNorthVelocity','drEastVelocity','drUpVelocity','reserved']
  _slot_types = ['int16','int16','float64','int32[2]','int32[2]','int32','int32','int32','int32','int32','int32','int32','int32','int16','int16','int32','int32[2]','int32','int32','int32','int32','int32','int32[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_flag,gps_week,gps_millisecond,llhPos,gaussPos,height,pitch,roll,azimuth,northVelocity,eastVelocity,upVelocity,positionStatus,motion_flag,motion_week,motion_millisecond,drPos,drHeight,drAzimuth,drNorthVelocity,drEastVelocity,drUpVelocity,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gps_flag is None:
        self.gps_flag = 0
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_millisecond is None:
        self.gps_millisecond = 0.
      if self.llhPos is None:
        self.llhPos = [0] * 2
      if self.gaussPos is None:
        self.gaussPos = [0] * 2
      if self.height is None:
        self.height = 0
      if self.pitch is None:
        self.pitch = 0
      if self.roll is None:
        self.roll = 0
      if self.azimuth is None:
        self.azimuth = 0
      if self.northVelocity is None:
        self.northVelocity = 0
      if self.eastVelocity is None:
        self.eastVelocity = 0
      if self.upVelocity is None:
        self.upVelocity = 0
      if self.positionStatus is None:
        self.positionStatus = 0
      if self.motion_flag is None:
        self.motion_flag = 0
      if self.motion_week is None:
        self.motion_week = 0
      if self.motion_millisecond is None:
        self.motion_millisecond = 0
      if self.drPos is None:
        self.drPos = [0] * 2
      if self.drHeight is None:
        self.drHeight = 0
      if self.drAzimuth is None:
        self.drAzimuth = 0
      if self.drNorthVelocity is None:
        self.drNorthVelocity = 0
      if self.drEastVelocity is None:
        self.drEastVelocity = 0
      if self.drUpVelocity is None:
        self.drUpVelocity = 0
      if self.reserved is None:
        self.reserved = [0] * 2
    else:
      self.gps_flag = 0
      self.gps_week = 0
      self.gps_millisecond = 0.
      self.llhPos = [0] * 2
      self.gaussPos = [0] * 2
      self.height = 0
      self.pitch = 0
      self.roll = 0
      self.azimuth = 0
      self.northVelocity = 0
      self.eastVelocity = 0
      self.upVelocity = 0
      self.positionStatus = 0
      self.motion_flag = 0
      self.motion_week = 0
      self.motion_millisecond = 0
      self.drPos = [0] * 2
      self.drHeight = 0
      self.drAzimuth = 0
      self.drNorthVelocity = 0
      self.drEastVelocity = 0
      self.drUpVelocity = 0
      self.reserved = [0] * 2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2hd().pack(_x.gps_flag, _x.gps_week, _x.gps_millisecond))
      buff.write(_get_struct_2i().pack(*self.llhPos))
      buff.write(_get_struct_2i().pack(*self.gaussPos))
      _x = self
      buff.write(_get_struct_8i2hi().pack(_x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.motion_flag, _x.motion_week, _x.motion_millisecond))
      buff.write(_get_struct_2i().pack(*self.drPos))
      _x = self
      buff.write(_get_struct_5i().pack(_x.drHeight, _x.drAzimuth, _x.drNorthVelocity, _x.drEastVelocity, _x.drUpVelocity))
      buff.write(_get_struct_2i().pack(*self.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.gps_flag, _x.gps_week, _x.gps_millisecond,) = _get_struct_2hd().unpack(str[start:end])
      start = end
      end += 8
      self.llhPos = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 8
      self.gaussPos = _get_struct_2i().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.motion_flag, _x.motion_week, _x.motion_millisecond,) = _get_struct_8i2hi().unpack(str[start:end])
      start = end
      end += 8
      self.drPos = _get_struct_2i().unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.drHeight, _x.drAzimuth, _x.drNorthVelocity, _x.drEastVelocity, _x.drUpVelocity,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 8
      self.reserved = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2hd().pack(_x.gps_flag, _x.gps_week, _x.gps_millisecond))
      buff.write(self.llhPos.tostring())
      buff.write(self.gaussPos.tostring())
      _x = self
      buff.write(_get_struct_8i2hi().pack(_x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.motion_flag, _x.motion_week, _x.motion_millisecond))
      buff.write(self.drPos.tostring())
      _x = self
      buff.write(_get_struct_5i().pack(_x.drHeight, _x.drAzimuth, _x.drNorthVelocity, _x.drEastVelocity, _x.drUpVelocity))
      buff.write(self.reserved.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.gps_flag, _x.gps_week, _x.gps_millisecond,) = _get_struct_2hd().unpack(str[start:end])
      start = end
      end += 8
      self.llhPos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      self.gaussPos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      _x = self
      start = end
      end += 40
      (_x.height, _x.pitch, _x.roll, _x.azimuth, _x.northVelocity, _x.eastVelocity, _x.upVelocity, _x.positionStatus, _x.motion_flag, _x.motion_week, _x.motion_millisecond,) = _get_struct_8i2hi().unpack(str[start:end])
      start = end
      end += 8
      self.drPos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      _x = self
      start = end
      end += 20
      (_x.drHeight, _x.drAzimuth, _x.drNorthVelocity, _x.drEastVelocity, _x.drUpVelocity,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 8
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
_struct_8i2hi = None
def _get_struct_8i2hi():
    global _struct_8i2hi
    if _struct_8i2hi is None:
        _struct_8i2hi = struct.Struct("<8i2hi")
    return _struct_8i2hi
_struct_2hd = None
def _get_struct_2hd():
    global _struct_2hd
    if _struct_2hd is None:
        _struct_2hd = struct.Struct("<2hd")
    return _struct_2hd
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
