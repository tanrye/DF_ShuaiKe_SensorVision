# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/VehicleInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vehicle_msgs.msg
import std_msgs.msg

class VehicleInfo(genpy.Message):
  _md5sum = "389041fc448ce2da258fb1ce2aef72ff"
  _type = "vehicle_msgs/VehicleInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
EMS1    ems1
EMS5    ems5
TCU1    tcu1
EPB1    epb1
ESC2    esc2
ESC4    esc4
ESC5    esc5
EPS2    eps2
EPSInfo epsInfo
SASInfo sasInfo


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vehicle_msgs/EMS1
# ID=0x083, Len=8, 10ms
float32 ThrottlePosFeedback          # 发送机节气门开度反馈
float32 EngSpd                       # 发送机转速
float32 ActualAccPedal               # 物理油门踏板开度
uint8   AutoDriveStatus              # 自动驾驶功能状态
uint8   EngSpdSignalErrFlag          # 发动机转速信号错误标志
uint8   AccPedalInterventEnable      # 油门踏板干预使能
uint8   RollingCountEMS1             # EMS1滚动计数值
uint8   CheckSumEMS1                 # EMS1校验值 

================================================================================
MSG: vehicle_msgs/EMS5
# ID=0x0E0, Len=8, 20ms
uint8   BrakePedalSignal             # 制动踏板开关信号
uint8   AccPedalFaultFlag            # 加速踏板信号异常标志
uint8   RollingCountEMS5             # EMS5滚动计数值
float32 AccPedalPos                  # 加速踏板位置
uint8   CheckSumEMS5                 # EMS5校验值 

================================================================================
MSG: vehicle_msgs/TCU1
# ID=0x165, Len=8, 20ms
uint8 ShiftLeverPosValidFlag # 换挡杆位置是否有效信号
uint8 ActualGear             # 实际档位
uint8 PRNDLStatus            # 档杆信息
uint8 RollingCountTCU1       # TCU1滚动计数器
uint8 CheckSum1              # TCU1校验值


================================================================================
MSG: vehicle_msgs/EPB1
# ID=0x31A, Len=8, 100ms
uint8 EPBSystemStateIndicationReq  # EPB状态灯显示
uint8 EPBStatus                    # EPB状态 

================================================================================
MSG: vehicle_msgs/ESC2
# ID=0x0A0, Len=8, 10ms
uint8   VehSpdValidFlag              # 车速有效信号
uint8   VacuumOriginalValueValidity  # 真空压力原始值有效信号
float32 BrakeOilPress                # 制动主缸油压信号
float32 VehicleSpeed                 # 车速
int16   VacuumOriginalValue          # 真空压力原始值


================================================================================
MSG: vehicle_msgs/ESC4
# ID=0x0A6, Len=8, 10ms
uint16  FLWheelPulseCounter          # 左前轮速脉冲信号
uint16  FRWheelPulseCounter          # 右前轮速脉冲信号
uint16  RLWheelPulseCounter          # 左后轮速脉冲信号
uint16  RRWheelPulseCounter          # 右后轮速脉冲信号
uint8   FLWheelPulseCounterValidity  # 左前轮速脉冲信号有效标志
uint8   FRWheelPulseCounterValidity  # 右前轮速脉冲信号有效标志
float32 LongitudinalAcceleration     # 纵向加速度
uint8   RLWheelPulseCounterValidity  # 左后轮速脉冲信号有效标志
uint8   RRWheelPulseCounterValidity  # 右后轮速脉冲信号有效标志
uint8   LongitudinalAccelerationFlag # 纵向加速度标识


================================================================================
MSG: vehicle_msgs/ESC5
# ID=0x122, Len=8, 20ms
float32 YawRate             # 横摆角速度
uint8   YawRateValid        # 横摆角速度有效性
float32 LateralAcceleration # 横向加速度信号
uint8   AyvSensorValid      # 横向加速度有效性
uint8   StateAct            # 制动系统工作状态反馈


================================================================================
MSG: vehicle_msgs/EPS2
# ID=0x165, Len=8, 20ms
uint8   RollingCountEPS2                                        # EPS2滚动计数值
uint8   DriverSteeringInterferenceDetected                      # 驾驶员干预方向盘检测
uint8   DriverSteeringInterferenceDetectedValidity              # 驾驶员干预方向盘检测有效性
uint8   ElectricalPowerSteeringAvailablityStatus                # EPS可控状态
uint8   ElectricalPowerSteeringAvailablityStatusProtectionValue # EPS可用状态保护算法值
float32 SteeringTorqueAct                                       # 方向盘力矩反馈


================================================================================
MSG: vehicle_msgs/EPSInfo
# ID=0x235, Len=2, 40ms
uint8 WarningLampState             # EPS警告灯状态


================================================================================
MSG: vehicle_msgs/SASInfo
# ID=0x0A5, Len=8, 10ms                         
float32 SteeringAngle                # 转向角信号
uint16  SteeringRotSpd               # 转向角速度
uint8   CheckSumSAS1                 # SAS1校验值
uint8   RollingCountSAS1             # SAS1滚动计数值

"""
  __slots__ = ['header','ems1','ems5','tcu1','epb1','esc2','esc4','esc5','eps2','epsInfo','sasInfo']
  _slot_types = ['std_msgs/Header','vehicle_msgs/EMS1','vehicle_msgs/EMS5','vehicle_msgs/TCU1','vehicle_msgs/EPB1','vehicle_msgs/ESC2','vehicle_msgs/ESC4','vehicle_msgs/ESC5','vehicle_msgs/EPS2','vehicle_msgs/EPSInfo','vehicle_msgs/SASInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ems1,ems5,tcu1,epb1,esc2,esc4,esc5,eps2,epsInfo,sasInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ems1 is None:
        self.ems1 = vehicle_msgs.msg.EMS1()
      if self.ems5 is None:
        self.ems5 = vehicle_msgs.msg.EMS5()
      if self.tcu1 is None:
        self.tcu1 = vehicle_msgs.msg.TCU1()
      if self.epb1 is None:
        self.epb1 = vehicle_msgs.msg.EPB1()
      if self.esc2 is None:
        self.esc2 = vehicle_msgs.msg.ESC2()
      if self.esc4 is None:
        self.esc4 = vehicle_msgs.msg.ESC4()
      if self.esc5 is None:
        self.esc5 = vehicle_msgs.msg.ESC5()
      if self.eps2 is None:
        self.eps2 = vehicle_msgs.msg.EPS2()
      if self.epsInfo is None:
        self.epsInfo = vehicle_msgs.msg.EPSInfo()
      if self.sasInfo is None:
        self.sasInfo = vehicle_msgs.msg.SASInfo()
    else:
      self.header = std_msgs.msg.Header()
      self.ems1 = vehicle_msgs.msg.EMS1()
      self.ems5 = vehicle_msgs.msg.EMS5()
      self.tcu1 = vehicle_msgs.msg.TCU1()
      self.epb1 = vehicle_msgs.msg.EPB1()
      self.esc2 = vehicle_msgs.msg.ESC2()
      self.esc4 = vehicle_msgs.msg.ESC4()
      self.esc5 = vehicle_msgs.msg.ESC5()
      self.eps2 = vehicle_msgs.msg.EPS2()
      self.epsInfo = vehicle_msgs.msg.EPSInfo()
      self.sasInfo = vehicle_msgs.msg.SASInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B().pack(_x.ems1.ThrottlePosFeedback, _x.ems1.EngSpd, _x.ems1.ActualAccPedal, _x.ems1.AutoDriveStatus, _x.ems1.EngSpdSignalErrFlag, _x.ems1.AccPedalInterventEnable, _x.ems1.RollingCountEMS1, _x.ems1.CheckSumEMS1, _x.ems5.BrakePedalSignal, _x.ems5.AccPedalFaultFlag, _x.ems5.RollingCountEMS5, _x.ems5.AccPedalPos, _x.ems5.CheckSumEMS5, _x.tcu1.ShiftLeverPosValidFlag, _x.tcu1.ActualGear, _x.tcu1.PRNDLStatus, _x.tcu1.RollingCountTCU1, _x.tcu1.CheckSum1, _x.epb1.EPBSystemStateIndicationReq, _x.epb1.EPBStatus, _x.esc2.VehSpdValidFlag, _x.esc2.VacuumOriginalValueValidity, _x.esc2.BrakeOilPress, _x.esc2.VehicleSpeed, _x.esc2.VacuumOriginalValue, _x.esc4.FLWheelPulseCounter, _x.esc4.FRWheelPulseCounter, _x.esc4.RLWheelPulseCounter, _x.esc4.RRWheelPulseCounter, _x.esc4.FLWheelPulseCounterValidity, _x.esc4.FRWheelPulseCounterValidity, _x.esc4.LongitudinalAcceleration, _x.esc4.RLWheelPulseCounterValidity, _x.esc4.RRWheelPulseCounterValidity, _x.esc4.LongitudinalAccelerationFlag, _x.esc5.YawRate, _x.esc5.YawRateValid, _x.esc5.LateralAcceleration, _x.esc5.AyvSensorValid, _x.esc5.StateAct, _x.eps2.RollingCountEPS2, _x.eps2.DriverSteeringInterferenceDetected, _x.eps2.DriverSteeringInterferenceDetectedValidity, _x.eps2.ElectricalPowerSteeringAvailablityStatus, _x.eps2.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.eps2.SteeringTorqueAct, _x.epsInfo.WarningLampState, _x.sasInfo.SteeringAngle, _x.sasInfo.SteeringRotSpd, _x.sasInfo.CheckSumSAS1, _x.sasInfo.RollingCountSAS1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ems1 is None:
        self.ems1 = vehicle_msgs.msg.EMS1()
      if self.ems5 is None:
        self.ems5 = vehicle_msgs.msg.EMS5()
      if self.tcu1 is None:
        self.tcu1 = vehicle_msgs.msg.TCU1()
      if self.epb1 is None:
        self.epb1 = vehicle_msgs.msg.EPB1()
      if self.esc2 is None:
        self.esc2 = vehicle_msgs.msg.ESC2()
      if self.esc4 is None:
        self.esc4 = vehicle_msgs.msg.ESC4()
      if self.esc5 is None:
        self.esc5 = vehicle_msgs.msg.ESC5()
      if self.eps2 is None:
        self.eps2 = vehicle_msgs.msg.EPS2()
      if self.epsInfo is None:
        self.epsInfo = vehicle_msgs.msg.EPSInfo()
      if self.sasInfo is None:
        self.sasInfo = vehicle_msgs.msg.SASInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.ems1.ThrottlePosFeedback, _x.ems1.EngSpd, _x.ems1.ActualAccPedal, _x.ems1.AutoDriveStatus, _x.ems1.EngSpdSignalErrFlag, _x.ems1.AccPedalInterventEnable, _x.ems1.RollingCountEMS1, _x.ems1.CheckSumEMS1, _x.ems5.BrakePedalSignal, _x.ems5.AccPedalFaultFlag, _x.ems5.RollingCountEMS5, _x.ems5.AccPedalPos, _x.ems5.CheckSumEMS5, _x.tcu1.ShiftLeverPosValidFlag, _x.tcu1.ActualGear, _x.tcu1.PRNDLStatus, _x.tcu1.RollingCountTCU1, _x.tcu1.CheckSum1, _x.epb1.EPBSystemStateIndicationReq, _x.epb1.EPBStatus, _x.esc2.VehSpdValidFlag, _x.esc2.VacuumOriginalValueValidity, _x.esc2.BrakeOilPress, _x.esc2.VehicleSpeed, _x.esc2.VacuumOriginalValue, _x.esc4.FLWheelPulseCounter, _x.esc4.FRWheelPulseCounter, _x.esc4.RLWheelPulseCounter, _x.esc4.RRWheelPulseCounter, _x.esc4.FLWheelPulseCounterValidity, _x.esc4.FRWheelPulseCounterValidity, _x.esc4.LongitudinalAcceleration, _x.esc4.RLWheelPulseCounterValidity, _x.esc4.RRWheelPulseCounterValidity, _x.esc4.LongitudinalAccelerationFlag, _x.esc5.YawRate, _x.esc5.YawRateValid, _x.esc5.LateralAcceleration, _x.esc5.AyvSensorValid, _x.esc5.StateAct, _x.eps2.RollingCountEPS2, _x.eps2.DriverSteeringInterferenceDetected, _x.eps2.DriverSteeringInterferenceDetectedValidity, _x.eps2.ElectricalPowerSteeringAvailablityStatus, _x.eps2.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.eps2.SteeringTorqueAct, _x.epsInfo.WarningLampState, _x.sasInfo.SteeringAngle, _x.sasInfo.SteeringRotSpd, _x.sasInfo.CheckSumSAS1, _x.sasInfo.RollingCountSAS1,) = _get_struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B().pack(_x.ems1.ThrottlePosFeedback, _x.ems1.EngSpd, _x.ems1.ActualAccPedal, _x.ems1.AutoDriveStatus, _x.ems1.EngSpdSignalErrFlag, _x.ems1.AccPedalInterventEnable, _x.ems1.RollingCountEMS1, _x.ems1.CheckSumEMS1, _x.ems5.BrakePedalSignal, _x.ems5.AccPedalFaultFlag, _x.ems5.RollingCountEMS5, _x.ems5.AccPedalPos, _x.ems5.CheckSumEMS5, _x.tcu1.ShiftLeverPosValidFlag, _x.tcu1.ActualGear, _x.tcu1.PRNDLStatus, _x.tcu1.RollingCountTCU1, _x.tcu1.CheckSum1, _x.epb1.EPBSystemStateIndicationReq, _x.epb1.EPBStatus, _x.esc2.VehSpdValidFlag, _x.esc2.VacuumOriginalValueValidity, _x.esc2.BrakeOilPress, _x.esc2.VehicleSpeed, _x.esc2.VacuumOriginalValue, _x.esc4.FLWheelPulseCounter, _x.esc4.FRWheelPulseCounter, _x.esc4.RLWheelPulseCounter, _x.esc4.RRWheelPulseCounter, _x.esc4.FLWheelPulseCounterValidity, _x.esc4.FRWheelPulseCounterValidity, _x.esc4.LongitudinalAcceleration, _x.esc4.RLWheelPulseCounterValidity, _x.esc4.RRWheelPulseCounterValidity, _x.esc4.LongitudinalAccelerationFlag, _x.esc5.YawRate, _x.esc5.YawRateValid, _x.esc5.LateralAcceleration, _x.esc5.AyvSensorValid, _x.esc5.StateAct, _x.eps2.RollingCountEPS2, _x.eps2.DriverSteeringInterferenceDetected, _x.eps2.DriverSteeringInterferenceDetectedValidity, _x.eps2.ElectricalPowerSteeringAvailablityStatus, _x.eps2.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.eps2.SteeringTorqueAct, _x.epsInfo.WarningLampState, _x.sasInfo.SteeringAngle, _x.sasInfo.SteeringRotSpd, _x.sasInfo.CheckSumSAS1, _x.sasInfo.RollingCountSAS1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ems1 is None:
        self.ems1 = vehicle_msgs.msg.EMS1()
      if self.ems5 is None:
        self.ems5 = vehicle_msgs.msg.EMS5()
      if self.tcu1 is None:
        self.tcu1 = vehicle_msgs.msg.TCU1()
      if self.epb1 is None:
        self.epb1 = vehicle_msgs.msg.EPB1()
      if self.esc2 is None:
        self.esc2 = vehicle_msgs.msg.ESC2()
      if self.esc4 is None:
        self.esc4 = vehicle_msgs.msg.ESC4()
      if self.esc5 is None:
        self.esc5 = vehicle_msgs.msg.ESC5()
      if self.eps2 is None:
        self.eps2 = vehicle_msgs.msg.EPS2()
      if self.epsInfo is None:
        self.epsInfo = vehicle_msgs.msg.EPSInfo()
      if self.sasInfo is None:
        self.sasInfo = vehicle_msgs.msg.SASInfo()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.ems1.ThrottlePosFeedback, _x.ems1.EngSpd, _x.ems1.ActualAccPedal, _x.ems1.AutoDriveStatus, _x.ems1.EngSpdSignalErrFlag, _x.ems1.AccPedalInterventEnable, _x.ems1.RollingCountEMS1, _x.ems1.CheckSumEMS1, _x.ems5.BrakePedalSignal, _x.ems5.AccPedalFaultFlag, _x.ems5.RollingCountEMS5, _x.ems5.AccPedalPos, _x.ems5.CheckSumEMS5, _x.tcu1.ShiftLeverPosValidFlag, _x.tcu1.ActualGear, _x.tcu1.PRNDLStatus, _x.tcu1.RollingCountTCU1, _x.tcu1.CheckSum1, _x.epb1.EPBSystemStateIndicationReq, _x.epb1.EPBStatus, _x.esc2.VehSpdValidFlag, _x.esc2.VacuumOriginalValueValidity, _x.esc2.BrakeOilPress, _x.esc2.VehicleSpeed, _x.esc2.VacuumOriginalValue, _x.esc4.FLWheelPulseCounter, _x.esc4.FRWheelPulseCounter, _x.esc4.RLWheelPulseCounter, _x.esc4.RRWheelPulseCounter, _x.esc4.FLWheelPulseCounterValidity, _x.esc4.FRWheelPulseCounterValidity, _x.esc4.LongitudinalAcceleration, _x.esc4.RLWheelPulseCounterValidity, _x.esc4.RRWheelPulseCounterValidity, _x.esc4.LongitudinalAccelerationFlag, _x.esc5.YawRate, _x.esc5.YawRateValid, _x.esc5.LateralAcceleration, _x.esc5.AyvSensorValid, _x.esc5.StateAct, _x.eps2.RollingCountEPS2, _x.eps2.DriverSteeringInterferenceDetected, _x.eps2.DriverSteeringInterferenceDetectedValidity, _x.eps2.ElectricalPowerSteeringAvailablityStatus, _x.eps2.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.eps2.SteeringTorqueAct, _x.epsInfo.WarningLampState, _x.sasInfo.SteeringAngle, _x.sasInfo.SteeringRotSpd, _x.sasInfo.CheckSumSAS1, _x.sasInfo.RollingCountSAS1,) = _get_struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B = None
def _get_struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B():
    global _struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B
    if _struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B is None:
        _struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B = struct.Struct("<3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B")
    return _struct_3f8Bf10B2fh4H2Bf3BfBf7BfBfH2B
