# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/ENTITYMAP_MSG.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vehicle_msgs.msg

class ENTITYMAP_MSG(genpy.Message):
  _md5sum = "6bba80900635dcab163ebf9620a9b8dd"
  _type = "vehicle_msgs/ENTITYMAP_MSG"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 MessageID
int32 MessageSeqNum

float64 LocalPoseTime       # LocalPose的时间of message
float64 GlobalPosTime       # LocalPose的时间of message

LOCAL_POS_DATA  LocalPose          #局部定位
PositionData    Position		#全局定位

int32 PdNum
PEDESTRIAN_OBJ[30] PdObj
int32[30] PdLane                 # 行人所在车道线
 
int32 RoadNum                                    # 道路数量
ROAD_OBJ[5] RoadObj                   # 道路信息
int32 CurrentRoad                                # 本车辆所在道路

int32 LaneNum                                    #车道线数
LANE_OBJ[10] LaneObj                   #车道线信息
int32[10] LaneGenerateType             #车道线生成方法
int32 CurrentLane                                #本车辆所在车道线
# -100: on the left of all lanes, 100: on the right of all lanes
                                             # -100<CurrentLane<100, vehicle is between lane CurrentLane and CurrentLane+1
int32 NegObNum                                     #负障碍数
NEGATIVE_OBSTACLE_OBJ[20] NegObj

int32 VehicleNum                                   #环境中车辆数量
VEHICLE_OBJ[30] VehicleObj            #环境中车辆信息
int32[30] VehicleLane                 #环境中车辆所在车道线

# static object, farther than 50m
int32 FarObjectNum                                 # 50m以外静态障碍数量
FARSTATICOBJECT[50] FarStaticObject # 50m以外静态障碍

int32 RoadMarkingNum
ROAD_MARKING[10] RoadMarking

int32 TrafficSignNum      #最多给出5个路标
TRAFFIC_SIGN[5] TrafficSign

int32 TrafficLightNum      #给最近的1个交通灯
TRAFFIC_LIGHT TrafficLight

uint32 index_lanemarkinginfo
uint32 index_pedestrianinfo
uint32 index_vehicleinfo

================================================================================
MSG: vehicle_msgs/LOCAL_POS_DATA

uint32    header  #数据头
float64   time	#millisecond
int32 dr_x    #centimeter
int32 dr_y    #centimeter
int32 dr_z    #centimeter
int32 dr_heading #0.01degree
int32 dr_roll   #0.01degree
int32 dr_pitch  #0.01degree
int32 lf_speed #left_front wheel speed,cm/s
int32 rf_speed #right_front wheel speed,cm/s
int32 lr_speed #left_rear wheel speed,cm/s
int32 rr_speed #right_rear wheel speed,cm/s
int32 rot_x #imu三轴陀螺速度 0.01degree/s
int32 rot_y #imu三轴陀螺速度 0.01degree/s
int32 rot_z  #imu三轴陀螺速度 0.01degree/s
int32 acc_x  #imu三轴加速度  0.01m/s^2
int32 acc_y #imu三轴加速度  0.01m/s^2
int32 acc_z  #imu三轴加速度  0.01m/s^2
int32  steer  	#-3000(right)~3000(left) degree  0.01degree/s
int32  brake       #0(zero)~100(full)
int32  fuel          #0(zero)~100(full)
int32 trans  #PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3
int8 VehicleState#车辆状态
int32 mode      #行驶模式 #DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2

int32 drStatus		#dr运行状态
int32 errorStatus	#错误状态
int32 emergency_flag   #故障标志位
int32 hardswitch_on

================================================================================
MSG: vehicle_msgs/PositionData
int16 gps_flag       #gps info is updated
int16 gps_week
float64 gps_millisecond        #millisecond in a week
int32[2] llhPos	#经纬度，llpos[i]/SC_POS 单位为度
int32[2] gaussPos  #高斯投影位置,cm，
int32 height         #cm
int32 pitch  #欧拉角，单位为0.01度
int32 roll   #欧拉角，单位为0.01度
int32 azimuth        #欧拉角，单位为0.01度,向东为零度，逆时针0-360
int32 northVelocity  #north速度，单位为cm/s
int32 eastVelocity
int32 upVelocity
int32 positionStatus	  	#系统运行状态
int16 motion_flag    # motion info is updated
int16 motion_week
int32 motion_millisecond
int32[2] drPos
int32 drHeight
int32 drAzimuth
int32 drNorthVelocity
int32 drEastVelocity
int32 drUpVelocity
int32[2] reserved


================================================================================
MSG: vehicle_msgs/PEDESTRIAN_OBJ
int32 PedestrianID
int32 CenterX    	#cm为单位，惯导坐标系
int32 CenterY
int32 Radius    	#cm为单位
int32 Speed      	# cm/s
int32 Direction  	# 0.01度，惯导坐标系
int32 Height     	# height of the pedestrian 


================================================================================
MSG: vehicle_msgs/ROAD_OBJ
int32 RoadID   #1 yellow
int32 LeftPtNum
int32 RightPtNum
int32[50] LeftEdgePtX   #cm
int32[50] LeftEdgePtY   #cm
int32[50] RightEdgePtX  #cm
int32[50] RightEdgePtY  #cm


================================================================================
MSG: vehicle_msgs/LANE_OBJ
int32 LaneID
int32 LaneRefer 	# 0,1,-1,2,-2,-3,3, from left to right
int32 LaneAttr  	# 0: 白实, 1:黄实, 2: 白虚, 3: 黄虚线, 4: 预测
int32 LanePtNum	#车道线数量
int32[200] LanePtX #
int32[200] LanePtY #
int32 LaneProb 	# 0-100, 概率
# line
float64 a
float64 b
float64 c 


================================================================================
MSG: vehicle_msgs/NEGATIVE_OBSTACLE_OBJ
int32 NegObID
int32 CenterX    #cm为单位，惯导坐标系
int32 CenterY
int32 AxisX      #长轴，cm为单位
int32 AxisY      #短轴，cm为单位
int32 Slope      # 斜率，0.01度，逆时针为正


================================================================================
MSG: vehicle_msgs/VEHICLE_OBJ
int32 VehicleID
int32 CenterX         # cm
int32 CenterY
int32 Speed           # cm/s
int32 SpeedDirection  # 0.01degree
int32 Height          # cm

int32 Convexhull_VertexNumber 	#边界顶点数量
int32[50] ConvexhullX		#边界顶点坐标X
int32[50] ConvexhullY 


================================================================================
MSG: vehicle_msgs/FARSTATICOBJECT
int32 VertexNumber 	#多边形边界顶点数量
int32[50] ConvexX	#边界顶点坐标X
int32[50] ConvexY	#边界顶点坐标Y
int32 CenterX	#中心点x
int32 CenterY	#中心点y 

================================================================================
MSG: vehicle_msgs/ROAD_MARKING
int32                     bottomleftx
int32                     bottomlefty
int32                     bottomrightx
int32                     bottomrighty
int32                     topleftx
int32                     toplefty
int32                     toprightx
int32                     toprighty
int32                     direction
int32                     width
uint8           sign_type


================================================================================
MSG: vehicle_msgs/TRAFFIC_SIGN
uint8             pos_flag       #/*  交通标志位置信息 */
int32                       x              # x坐标，厘米为单位,全局坐标系
int32                       y              # y坐标，厘米为单位,全局坐标系
#int32                       z              # z坐标，厘米为单位,全局坐标系
uint8             sign_type      #/*  交通标志类型信息 */


================================================================================
MSG: vehicle_msgs/TRAFFIC_LIGHT
uint8           pos_flag		#是否有效
int32                      x			#坐标
int32                     y
uint8           forward_light_type  #/*直行灯信息*/
uint8           left_light_type     #/*左转灯信息*/
uint8           right_light_type    #/*右转灯信息*/
uint8           uturn_light_type   #/*U Turn灯信息*/

"""
  __slots__ = ['MessageID','MessageSeqNum','LocalPoseTime','GlobalPosTime','LocalPose','Position','PdNum','PdObj','PdLane','RoadNum','RoadObj','CurrentRoad','LaneNum','LaneObj','LaneGenerateType','CurrentLane','NegObNum','NegObj','VehicleNum','VehicleObj','VehicleLane','FarObjectNum','FarStaticObject','RoadMarkingNum','RoadMarking','TrafficSignNum','TrafficSign','TrafficLightNum','TrafficLight','index_lanemarkinginfo','index_pedestrianinfo','index_vehicleinfo']
  _slot_types = ['int32','int32','float64','float64','vehicle_msgs/LOCAL_POS_DATA','vehicle_msgs/PositionData','int32','vehicle_msgs/PEDESTRIAN_OBJ[30]','int32[30]','int32','vehicle_msgs/ROAD_OBJ[5]','int32','int32','vehicle_msgs/LANE_OBJ[10]','int32[10]','int32','int32','vehicle_msgs/NEGATIVE_OBSTACLE_OBJ[20]','int32','vehicle_msgs/VEHICLE_OBJ[30]','int32[30]','int32','vehicle_msgs/FARSTATICOBJECT[50]','int32','vehicle_msgs/ROAD_MARKING[10]','int32','vehicle_msgs/TRAFFIC_SIGN[5]','int32','vehicle_msgs/TRAFFIC_LIGHT','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MessageID,MessageSeqNum,LocalPoseTime,GlobalPosTime,LocalPose,Position,PdNum,PdObj,PdLane,RoadNum,RoadObj,CurrentRoad,LaneNum,LaneObj,LaneGenerateType,CurrentLane,NegObNum,NegObj,VehicleNum,VehicleObj,VehicleLane,FarObjectNum,FarStaticObject,RoadMarkingNum,RoadMarking,TrafficSignNum,TrafficSign,TrafficLightNum,TrafficLight,index_lanemarkinginfo,index_pedestrianinfo,index_vehicleinfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ENTITYMAP_MSG, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.MessageID is None:
        self.MessageID = 0
      if self.MessageSeqNum is None:
        self.MessageSeqNum = 0
      if self.LocalPoseTime is None:
        self.LocalPoseTime = 0.
      if self.GlobalPosTime is None:
        self.GlobalPosTime = 0.
      if self.LocalPose is None:
        self.LocalPose = vehicle_msgs.msg.LOCAL_POS_DATA()
      if self.Position is None:
        self.Position = vehicle_msgs.msg.PositionData()
      if self.PdNum is None:
        self.PdNum = 0
      if self.PdObj is None:
        self.PdObj = [vehicle_msgs.msg.PEDESTRIAN_OBJ() for _ in range(30)]
      if self.PdLane is None:
        self.PdLane = [0] * 30
      if self.RoadNum is None:
        self.RoadNum = 0
      if self.RoadObj is None:
        self.RoadObj = [vehicle_msgs.msg.ROAD_OBJ() for _ in range(5)]
      if self.CurrentRoad is None:
        self.CurrentRoad = 0
      if self.LaneNum is None:
        self.LaneNum = 0
      if self.LaneObj is None:
        self.LaneObj = [vehicle_msgs.msg.LANE_OBJ() for _ in range(10)]
      if self.LaneGenerateType is None:
        self.LaneGenerateType = [0] * 10
      if self.CurrentLane is None:
        self.CurrentLane = 0
      if self.NegObNum is None:
        self.NegObNum = 0
      if self.NegObj is None:
        self.NegObj = [vehicle_msgs.msg.NEGATIVE_OBSTACLE_OBJ() for _ in range(20)]
      if self.VehicleNum is None:
        self.VehicleNum = 0
      if self.VehicleObj is None:
        self.VehicleObj = [vehicle_msgs.msg.VEHICLE_OBJ() for _ in range(30)]
      if self.VehicleLane is None:
        self.VehicleLane = [0] * 30
      if self.FarObjectNum is None:
        self.FarObjectNum = 0
      if self.FarStaticObject is None:
        self.FarStaticObject = [vehicle_msgs.msg.FARSTATICOBJECT() for _ in range(50)]
      if self.RoadMarkingNum is None:
        self.RoadMarkingNum = 0
      if self.RoadMarking is None:
        self.RoadMarking = [vehicle_msgs.msg.ROAD_MARKING() for _ in range(10)]
      if self.TrafficSignNum is None:
        self.TrafficSignNum = 0
      if self.TrafficSign is None:
        self.TrafficSign = [vehicle_msgs.msg.TRAFFIC_SIGN() for _ in range(5)]
      if self.TrafficLightNum is None:
        self.TrafficLightNum = 0
      if self.TrafficLight is None:
        self.TrafficLight = vehicle_msgs.msg.TRAFFIC_LIGHT()
      if self.index_lanemarkinginfo is None:
        self.index_lanemarkinginfo = 0
      if self.index_pedestrianinfo is None:
        self.index_pedestrianinfo = 0
      if self.index_vehicleinfo is None:
        self.index_vehicleinfo = 0
    else:
      self.MessageID = 0
      self.MessageSeqNum = 0
      self.LocalPoseTime = 0.
      self.GlobalPosTime = 0.
      self.LocalPose = vehicle_msgs.msg.LOCAL_POS_DATA()
      self.Position = vehicle_msgs.msg.PositionData()
      self.PdNum = 0
      self.PdObj = [vehicle_msgs.msg.PEDESTRIAN_OBJ() for _ in range(30)]
      self.PdLane = [0] * 30
      self.RoadNum = 0
      self.RoadObj = [vehicle_msgs.msg.ROAD_OBJ() for _ in range(5)]
      self.CurrentRoad = 0
      self.LaneNum = 0
      self.LaneObj = [vehicle_msgs.msg.LANE_OBJ() for _ in range(10)]
      self.LaneGenerateType = [0] * 10
      self.CurrentLane = 0
      self.NegObNum = 0
      self.NegObj = [vehicle_msgs.msg.NEGATIVE_OBSTACLE_OBJ() for _ in range(20)]
      self.VehicleNum = 0
      self.VehicleObj = [vehicle_msgs.msg.VEHICLE_OBJ() for _ in range(30)]
      self.VehicleLane = [0] * 30
      self.FarObjectNum = 0
      self.FarStaticObject = [vehicle_msgs.msg.FARSTATICOBJECT() for _ in range(50)]
      self.RoadMarkingNum = 0
      self.RoadMarking = [vehicle_msgs.msg.ROAD_MARKING() for _ in range(10)]
      self.TrafficSignNum = 0
      self.TrafficSign = [vehicle_msgs.msg.TRAFFIC_SIGN() for _ in range(5)]
      self.TrafficLightNum = 0
      self.TrafficLight = vehicle_msgs.msg.TRAFFIC_LIGHT()
      self.index_lanemarkinginfo = 0
      self.index_pedestrianinfo = 0
      self.index_vehicleinfo = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2dId20ib5i2hd().pack(_x.MessageID, _x.MessageSeqNum, _x.LocalPoseTime, _x.GlobalPosTime, _x.LocalPose.header, _x.LocalPose.time, _x.LocalPose.dr_x, _x.LocalPose.dr_y, _x.LocalPose.dr_z, _x.LocalPose.dr_heading, _x.LocalPose.dr_roll, _x.LocalPose.dr_pitch, _x.LocalPose.lf_speed, _x.LocalPose.rf_speed, _x.LocalPose.lr_speed, _x.LocalPose.rr_speed, _x.LocalPose.rot_x, _x.LocalPose.rot_y, _x.LocalPose.rot_z, _x.LocalPose.acc_x, _x.LocalPose.acc_y, _x.LocalPose.acc_z, _x.LocalPose.steer, _x.LocalPose.brake, _x.LocalPose.fuel, _x.LocalPose.trans, _x.LocalPose.VehicleState, _x.LocalPose.mode, _x.LocalPose.drStatus, _x.LocalPose.errorStatus, _x.LocalPose.emergency_flag, _x.LocalPose.hardswitch_on, _x.Position.gps_flag, _x.Position.gps_week, _x.Position.gps_millisecond))
      buff.write(_get_struct_2i().pack(*self.Position.llhPos))
      buff.write(_get_struct_2i().pack(*self.Position.gaussPos))
      _x = self
      buff.write(_get_struct_8i2hi().pack(_x.Position.height, _x.Position.pitch, _x.Position.roll, _x.Position.azimuth, _x.Position.northVelocity, _x.Position.eastVelocity, _x.Position.upVelocity, _x.Position.positionStatus, _x.Position.motion_flag, _x.Position.motion_week, _x.Position.motion_millisecond))
      buff.write(_get_struct_2i().pack(*self.Position.drPos))
      _x = self
      buff.write(_get_struct_5i().pack(_x.Position.drHeight, _x.Position.drAzimuth, _x.Position.drNorthVelocity, _x.Position.drEastVelocity, _x.Position.drUpVelocity))
      buff.write(_get_struct_2i().pack(*self.Position.reserved))
      buff.write(_get_struct_i().pack(self.PdNum))
      for val1 in self.PdObj:
        _x = val1
        buff.write(_get_struct_7i().pack(_x.PedestrianID, _x.CenterX, _x.CenterY, _x.Radius, _x.Speed, _x.Direction, _x.Height))
      buff.write(_get_struct_30i().pack(*self.PdLane))
      buff.write(_get_struct_i().pack(self.RoadNum))
      for val1 in self.RoadObj:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.RoadID, _x.LeftPtNum, _x.RightPtNum))
        buff.write(_get_struct_50i().pack(*val1.LeftEdgePtX))
        buff.write(_get_struct_50i().pack(*val1.LeftEdgePtY))
        buff.write(_get_struct_50i().pack(*val1.RightEdgePtX))
        buff.write(_get_struct_50i().pack(*val1.RightEdgePtY))
      _x = self
      buff.write(_get_struct_2i().pack(_x.CurrentRoad, _x.LaneNum))
      for val1 in self.LaneObj:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum))
        buff.write(_get_struct_200i().pack(*val1.LanePtX))
        buff.write(_get_struct_200i().pack(*val1.LanePtY))
        _x = val1
        buff.write(_get_struct_i3d().pack(_x.LaneProb, _x.a, _x.b, _x.c))
      buff.write(_get_struct_10i().pack(*self.LaneGenerateType))
      _x = self
      buff.write(_get_struct_2i().pack(_x.CurrentLane, _x.NegObNum))
      for val1 in self.NegObj:
        _x = val1
        buff.write(_get_struct_6i().pack(_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope))
      buff.write(_get_struct_i().pack(self.VehicleNum))
      for val1 in self.VehicleObj:
        _x = val1
        buff.write(_get_struct_7i().pack(_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber))
        buff.write(_get_struct_50i().pack(*val1.ConvexhullX))
        buff.write(_get_struct_50i().pack(*val1.ConvexhullY))
      buff.write(_get_struct_30i().pack(*self.VehicleLane))
      buff.write(_get_struct_i().pack(self.FarObjectNum))
      for val1 in self.FarStaticObject:
        buff.write(_get_struct_i().pack(val1.VertexNumber))
        buff.write(_get_struct_50i().pack(*val1.ConvexX))
        buff.write(_get_struct_50i().pack(*val1.ConvexY))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.CenterX, _x.CenterY))
      buff.write(_get_struct_i().pack(self.RoadMarkingNum))
      for val1 in self.RoadMarking:
        _x = val1
        buff.write(_get_struct_10iB().pack(_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type))
      buff.write(_get_struct_i().pack(self.TrafficSignNum))
      for val1 in self.TrafficSign:
        _x = val1
        buff.write(_get_struct_B2iB().pack(_x.pos_flag, _x.x, _x.y, _x.sign_type))
      _x = self
      buff.write(_get_struct_iB2i4B3I().pack(_x.TrafficLightNum, _x.TrafficLight.pos_flag, _x.TrafficLight.x, _x.TrafficLight.y, _x.TrafficLight.forward_light_type, _x.TrafficLight.left_light_type, _x.TrafficLight.right_light_type, _x.TrafficLight.uturn_light_type, _x.index_lanemarkinginfo, _x.index_pedestrianinfo, _x.index_vehicleinfo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.LocalPose is None:
        self.LocalPose = vehicle_msgs.msg.LOCAL_POS_DATA()
      if self.Position is None:
        self.Position = vehicle_msgs.msg.PositionData()
      if self.PdObj is None:
        self.PdObj = None
      if self.RoadObj is None:
        self.RoadObj = None
      if self.LaneObj is None:
        self.LaneObj = None
      if self.NegObj is None:
        self.NegObj = None
      if self.VehicleObj is None:
        self.VehicleObj = None
      if self.FarStaticObject is None:
        self.FarStaticObject = None
      if self.RoadMarking is None:
        self.RoadMarking = None
      if self.TrafficSign is None:
        self.TrafficSign = None
      if self.TrafficLight is None:
        self.TrafficLight = vehicle_msgs.msg.TRAFFIC_LIGHT()
      end = 0
      _x = self
      start = end
      end += 149
      (_x.MessageID, _x.MessageSeqNum, _x.LocalPoseTime, _x.GlobalPosTime, _x.LocalPose.header, _x.LocalPose.time, _x.LocalPose.dr_x, _x.LocalPose.dr_y, _x.LocalPose.dr_z, _x.LocalPose.dr_heading, _x.LocalPose.dr_roll, _x.LocalPose.dr_pitch, _x.LocalPose.lf_speed, _x.LocalPose.rf_speed, _x.LocalPose.lr_speed, _x.LocalPose.rr_speed, _x.LocalPose.rot_x, _x.LocalPose.rot_y, _x.LocalPose.rot_z, _x.LocalPose.acc_x, _x.LocalPose.acc_y, _x.LocalPose.acc_z, _x.LocalPose.steer, _x.LocalPose.brake, _x.LocalPose.fuel, _x.LocalPose.trans, _x.LocalPose.VehicleState, _x.LocalPose.mode, _x.LocalPose.drStatus, _x.LocalPose.errorStatus, _x.LocalPose.emergency_flag, _x.LocalPose.hardswitch_on, _x.Position.gps_flag, _x.Position.gps_week, _x.Position.gps_millisecond,) = _get_struct_2i2dId20ib5i2hd().unpack(str[start:end])
      start = end
      end += 8
      self.Position.llhPos = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 8
      self.Position.gaussPos = _get_struct_2i().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.Position.height, _x.Position.pitch, _x.Position.roll, _x.Position.azimuth, _x.Position.northVelocity, _x.Position.eastVelocity, _x.Position.upVelocity, _x.Position.positionStatus, _x.Position.motion_flag, _x.Position.motion_week, _x.Position.motion_millisecond,) = _get_struct_8i2hi().unpack(str[start:end])
      start = end
      end += 8
      self.Position.drPos = _get_struct_2i().unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.Position.drHeight, _x.Position.drAzimuth, _x.Position.drNorthVelocity, _x.Position.drEastVelocity, _x.Position.drUpVelocity,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 8
      self.Position.reserved = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (self.PdNum,) = _get_struct_i().unpack(str[start:end])
      self.PdObj = []
      for i in range(0, 30):
        val1 = vehicle_msgs.msg.PEDESTRIAN_OBJ()
        _x = val1
        start = end
        end += 28
        (_x.PedestrianID, _x.CenterX, _x.CenterY, _x.Radius, _x.Speed, _x.Direction, _x.Height,) = _get_struct_7i().unpack(str[start:end])
        self.PdObj.append(val1)
      start = end
      end += 120
      self.PdLane = _get_struct_30i().unpack(str[start:end])
      start = end
      end += 4
      (self.RoadNum,) = _get_struct_i().unpack(str[start:end])
      self.RoadObj = []
      for i in range(0, 5):
        val1 = vehicle_msgs.msg.ROAD_OBJ()
        _x = val1
        start = end
        end += 12
        (_x.RoadID, _x.LeftPtNum, _x.RightPtNum,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 200
        val1.LeftEdgePtX = _get_struct_50i().unpack(str[start:end])
        start = end
        end += 200
        val1.LeftEdgePtY = _get_struct_50i().unpack(str[start:end])
        start = end
        end += 200
        val1.RightEdgePtX = _get_struct_50i().unpack(str[start:end])
        start = end
        end += 200
        val1.RightEdgePtY = _get_struct_50i().unpack(str[start:end])
        self.RoadObj.append(val1)
      _x = self
      start = end
      end += 8
      (_x.CurrentRoad, _x.LaneNum,) = _get_struct_2i().unpack(str[start:end])
      self.LaneObj = []
      for i in range(0, 10):
        val1 = vehicle_msgs.msg.LANE_OBJ()
        _x = val1
        start = end
        end += 16
        (_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum,) = _get_struct_4i().unpack(str[start:end])
        start = end
        end += 800
        val1.LanePtX = _get_struct_200i().unpack(str[start:end])
        start = end
        end += 800
        val1.LanePtY = _get_struct_200i().unpack(str[start:end])
        _x = val1
        start = end
        end += 28
        (_x.LaneProb, _x.a, _x.b, _x.c,) = _get_struct_i3d().unpack(str[start:end])
        self.LaneObj.append(val1)
      start = end
      end += 40
      self.LaneGenerateType = _get_struct_10i().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.CurrentLane, _x.NegObNum,) = _get_struct_2i().unpack(str[start:end])
      self.NegObj = []
      for i in range(0, 20):
        val1 = vehicle_msgs.msg.NEGATIVE_OBSTACLE_OBJ()
        _x = val1
        start = end
        end += 24
        (_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope,) = _get_struct_6i().unpack(str[start:end])
        self.NegObj.append(val1)
      start = end
      end += 4
      (self.VehicleNum,) = _get_struct_i().unpack(str[start:end])
      self.VehicleObj = []
      for i in range(0, 30):
        val1 = vehicle_msgs.msg.VEHICLE_OBJ()
        _x = val1
        start = end
        end += 28
        (_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber,) = _get_struct_7i().unpack(str[start:end])
        start = end
        end += 200
        val1.ConvexhullX = _get_struct_50i().unpack(str[start:end])
        start = end
        end += 200
        val1.ConvexhullY = _get_struct_50i().unpack(str[start:end])
        self.VehicleObj.append(val1)
      start = end
      end += 120
      self.VehicleLane = _get_struct_30i().unpack(str[start:end])
      start = end
      end += 4
      (self.FarObjectNum,) = _get_struct_i().unpack(str[start:end])
      self.FarStaticObject = []
      for i in range(0, 50):
        val1 = vehicle_msgs.msg.FARSTATICOBJECT()
        start = end
        end += 4
        (val1.VertexNumber,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 200
        val1.ConvexX = _get_struct_50i().unpack(str[start:end])
        start = end
        end += 200
        val1.ConvexY = _get_struct_50i().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.CenterX, _x.CenterY,) = _get_struct_2i().unpack(str[start:end])
        self.FarStaticObject.append(val1)
      start = end
      end += 4
      (self.RoadMarkingNum,) = _get_struct_i().unpack(str[start:end])
      self.RoadMarking = []
      for i in range(0, 10):
        val1 = vehicle_msgs.msg.ROAD_MARKING()
        _x = val1
        start = end
        end += 41
        (_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type,) = _get_struct_10iB().unpack(str[start:end])
        self.RoadMarking.append(val1)
      start = end
      end += 4
      (self.TrafficSignNum,) = _get_struct_i().unpack(str[start:end])
      self.TrafficSign = []
      for i in range(0, 5):
        val1 = vehicle_msgs.msg.TRAFFIC_SIGN()
        _x = val1
        start = end
        end += 10
        (_x.pos_flag, _x.x, _x.y, _x.sign_type,) = _get_struct_B2iB().unpack(str[start:end])
        self.TrafficSign.append(val1)
      _x = self
      start = end
      end += 29
      (_x.TrafficLightNum, _x.TrafficLight.pos_flag, _x.TrafficLight.x, _x.TrafficLight.y, _x.TrafficLight.forward_light_type, _x.TrafficLight.left_light_type, _x.TrafficLight.right_light_type, _x.TrafficLight.uturn_light_type, _x.index_lanemarkinginfo, _x.index_pedestrianinfo, _x.index_vehicleinfo,) = _get_struct_iB2i4B3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2dId20ib5i2hd().pack(_x.MessageID, _x.MessageSeqNum, _x.LocalPoseTime, _x.GlobalPosTime, _x.LocalPose.header, _x.LocalPose.time, _x.LocalPose.dr_x, _x.LocalPose.dr_y, _x.LocalPose.dr_z, _x.LocalPose.dr_heading, _x.LocalPose.dr_roll, _x.LocalPose.dr_pitch, _x.LocalPose.lf_speed, _x.LocalPose.rf_speed, _x.LocalPose.lr_speed, _x.LocalPose.rr_speed, _x.LocalPose.rot_x, _x.LocalPose.rot_y, _x.LocalPose.rot_z, _x.LocalPose.acc_x, _x.LocalPose.acc_y, _x.LocalPose.acc_z, _x.LocalPose.steer, _x.LocalPose.brake, _x.LocalPose.fuel, _x.LocalPose.trans, _x.LocalPose.VehicleState, _x.LocalPose.mode, _x.LocalPose.drStatus, _x.LocalPose.errorStatus, _x.LocalPose.emergency_flag, _x.LocalPose.hardswitch_on, _x.Position.gps_flag, _x.Position.gps_week, _x.Position.gps_millisecond))
      buff.write(self.Position.llhPos.tostring())
      buff.write(self.Position.gaussPos.tostring())
      _x = self
      buff.write(_get_struct_8i2hi().pack(_x.Position.height, _x.Position.pitch, _x.Position.roll, _x.Position.azimuth, _x.Position.northVelocity, _x.Position.eastVelocity, _x.Position.upVelocity, _x.Position.positionStatus, _x.Position.motion_flag, _x.Position.motion_week, _x.Position.motion_millisecond))
      buff.write(self.Position.drPos.tostring())
      _x = self
      buff.write(_get_struct_5i().pack(_x.Position.drHeight, _x.Position.drAzimuth, _x.Position.drNorthVelocity, _x.Position.drEastVelocity, _x.Position.drUpVelocity))
      buff.write(self.Position.reserved.tostring())
      buff.write(_get_struct_i().pack(self.PdNum))
      for val1 in self.PdObj:
        _x = val1
        buff.write(_get_struct_7i().pack(_x.PedestrianID, _x.CenterX, _x.CenterY, _x.Radius, _x.Speed, _x.Direction, _x.Height))
      buff.write(self.PdLane.tostring())
      buff.write(_get_struct_i().pack(self.RoadNum))
      for val1 in self.RoadObj:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.RoadID, _x.LeftPtNum, _x.RightPtNum))
        buff.write(val1.LeftEdgePtX.tostring())
        buff.write(val1.LeftEdgePtY.tostring())
        buff.write(val1.RightEdgePtX.tostring())
        buff.write(val1.RightEdgePtY.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.CurrentRoad, _x.LaneNum))
      for val1 in self.LaneObj:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum))
        buff.write(val1.LanePtX.tostring())
        buff.write(val1.LanePtY.tostring())
        _x = val1
        buff.write(_get_struct_i3d().pack(_x.LaneProb, _x.a, _x.b, _x.c))
      buff.write(self.LaneGenerateType.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.CurrentLane, _x.NegObNum))
      for val1 in self.NegObj:
        _x = val1
        buff.write(_get_struct_6i().pack(_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope))
      buff.write(_get_struct_i().pack(self.VehicleNum))
      for val1 in self.VehicleObj:
        _x = val1
        buff.write(_get_struct_7i().pack(_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber))
        buff.write(val1.ConvexhullX.tostring())
        buff.write(val1.ConvexhullY.tostring())
      buff.write(self.VehicleLane.tostring())
      buff.write(_get_struct_i().pack(self.FarObjectNum))
      for val1 in self.FarStaticObject:
        buff.write(_get_struct_i().pack(val1.VertexNumber))
        buff.write(val1.ConvexX.tostring())
        buff.write(val1.ConvexY.tostring())
        _x = val1
        buff.write(_get_struct_2i().pack(_x.CenterX, _x.CenterY))
      buff.write(_get_struct_i().pack(self.RoadMarkingNum))
      for val1 in self.RoadMarking:
        _x = val1
        buff.write(_get_struct_10iB().pack(_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type))
      buff.write(_get_struct_i().pack(self.TrafficSignNum))
      for val1 in self.TrafficSign:
        _x = val1
        buff.write(_get_struct_B2iB().pack(_x.pos_flag, _x.x, _x.y, _x.sign_type))
      _x = self
      buff.write(_get_struct_iB2i4B3I().pack(_x.TrafficLightNum, _x.TrafficLight.pos_flag, _x.TrafficLight.x, _x.TrafficLight.y, _x.TrafficLight.forward_light_type, _x.TrafficLight.left_light_type, _x.TrafficLight.right_light_type, _x.TrafficLight.uturn_light_type, _x.index_lanemarkinginfo, _x.index_pedestrianinfo, _x.index_vehicleinfo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.LocalPose is None:
        self.LocalPose = vehicle_msgs.msg.LOCAL_POS_DATA()
      if self.Position is None:
        self.Position = vehicle_msgs.msg.PositionData()
      if self.PdObj is None:
        self.PdObj = None
      if self.RoadObj is None:
        self.RoadObj = None
      if self.LaneObj is None:
        self.LaneObj = None
      if self.NegObj is None:
        self.NegObj = None
      if self.VehicleObj is None:
        self.VehicleObj = None
      if self.FarStaticObject is None:
        self.FarStaticObject = None
      if self.RoadMarking is None:
        self.RoadMarking = None
      if self.TrafficSign is None:
        self.TrafficSign = None
      if self.TrafficLight is None:
        self.TrafficLight = vehicle_msgs.msg.TRAFFIC_LIGHT()
      end = 0
      _x = self
      start = end
      end += 149
      (_x.MessageID, _x.MessageSeqNum, _x.LocalPoseTime, _x.GlobalPosTime, _x.LocalPose.header, _x.LocalPose.time, _x.LocalPose.dr_x, _x.LocalPose.dr_y, _x.LocalPose.dr_z, _x.LocalPose.dr_heading, _x.LocalPose.dr_roll, _x.LocalPose.dr_pitch, _x.LocalPose.lf_speed, _x.LocalPose.rf_speed, _x.LocalPose.lr_speed, _x.LocalPose.rr_speed, _x.LocalPose.rot_x, _x.LocalPose.rot_y, _x.LocalPose.rot_z, _x.LocalPose.acc_x, _x.LocalPose.acc_y, _x.LocalPose.acc_z, _x.LocalPose.steer, _x.LocalPose.brake, _x.LocalPose.fuel, _x.LocalPose.trans, _x.LocalPose.VehicleState, _x.LocalPose.mode, _x.LocalPose.drStatus, _x.LocalPose.errorStatus, _x.LocalPose.emergency_flag, _x.LocalPose.hardswitch_on, _x.Position.gps_flag, _x.Position.gps_week, _x.Position.gps_millisecond,) = _get_struct_2i2dId20ib5i2hd().unpack(str[start:end])
      start = end
      end += 8
      self.Position.llhPos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      self.Position.gaussPos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      _x = self
      start = end
      end += 40
      (_x.Position.height, _x.Position.pitch, _x.Position.roll, _x.Position.azimuth, _x.Position.northVelocity, _x.Position.eastVelocity, _x.Position.upVelocity, _x.Position.positionStatus, _x.Position.motion_flag, _x.Position.motion_week, _x.Position.motion_millisecond,) = _get_struct_8i2hi().unpack(str[start:end])
      start = end
      end += 8
      self.Position.drPos = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      _x = self
      start = end
      end += 20
      (_x.Position.drHeight, _x.Position.drAzimuth, _x.Position.drNorthVelocity, _x.Position.drEastVelocity, _x.Position.drUpVelocity,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 8
      self.Position.reserved = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 4
      (self.PdNum,) = _get_struct_i().unpack(str[start:end])
      self.PdObj = []
      for i in range(0, 30):
        val1 = vehicle_msgs.msg.PEDESTRIAN_OBJ()
        _x = val1
        start = end
        end += 28
        (_x.PedestrianID, _x.CenterX, _x.CenterY, _x.Radius, _x.Speed, _x.Direction, _x.Height,) = _get_struct_7i().unpack(str[start:end])
        self.PdObj.append(val1)
      start = end
      end += 120
      self.PdLane = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=30)
      start = end
      end += 4
      (self.RoadNum,) = _get_struct_i().unpack(str[start:end])
      self.RoadObj = []
      for i in range(0, 5):
        val1 = vehicle_msgs.msg.ROAD_OBJ()
        _x = val1
        start = end
        end += 12
        (_x.RoadID, _x.LeftPtNum, _x.RightPtNum,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 200
        val1.LeftEdgePtX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        start = end
        end += 200
        val1.LeftEdgePtY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        start = end
        end += 200
        val1.RightEdgePtX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        start = end
        end += 200
        val1.RightEdgePtY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        self.RoadObj.append(val1)
      _x = self
      start = end
      end += 8
      (_x.CurrentRoad, _x.LaneNum,) = _get_struct_2i().unpack(str[start:end])
      self.LaneObj = []
      for i in range(0, 10):
        val1 = vehicle_msgs.msg.LANE_OBJ()
        _x = val1
        start = end
        end += 16
        (_x.LaneID, _x.LaneRefer, _x.LaneAttr, _x.LanePtNum,) = _get_struct_4i().unpack(str[start:end])
        start = end
        end += 800
        val1.LanePtX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=200)
        start = end
        end += 800
        val1.LanePtY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=200)
        _x = val1
        start = end
        end += 28
        (_x.LaneProb, _x.a, _x.b, _x.c,) = _get_struct_i3d().unpack(str[start:end])
        self.LaneObj.append(val1)
      start = end
      end += 40
      self.LaneGenerateType = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=10)
      _x = self
      start = end
      end += 8
      (_x.CurrentLane, _x.NegObNum,) = _get_struct_2i().unpack(str[start:end])
      self.NegObj = []
      for i in range(0, 20):
        val1 = vehicle_msgs.msg.NEGATIVE_OBSTACLE_OBJ()
        _x = val1
        start = end
        end += 24
        (_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope,) = _get_struct_6i().unpack(str[start:end])
        self.NegObj.append(val1)
      start = end
      end += 4
      (self.VehicleNum,) = _get_struct_i().unpack(str[start:end])
      self.VehicleObj = []
      for i in range(0, 30):
        val1 = vehicle_msgs.msg.VEHICLE_OBJ()
        _x = val1
        start = end
        end += 28
        (_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber,) = _get_struct_7i().unpack(str[start:end])
        start = end
        end += 200
        val1.ConvexhullX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        start = end
        end += 200
        val1.ConvexhullY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        self.VehicleObj.append(val1)
      start = end
      end += 120
      self.VehicleLane = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=30)
      start = end
      end += 4
      (self.FarObjectNum,) = _get_struct_i().unpack(str[start:end])
      self.FarStaticObject = []
      for i in range(0, 50):
        val1 = vehicle_msgs.msg.FARSTATICOBJECT()
        start = end
        end += 4
        (val1.VertexNumber,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 200
        val1.ConvexX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        start = end
        end += 200
        val1.ConvexY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
        _x = val1
        start = end
        end += 8
        (_x.CenterX, _x.CenterY,) = _get_struct_2i().unpack(str[start:end])
        self.FarStaticObject.append(val1)
      start = end
      end += 4
      (self.RoadMarkingNum,) = _get_struct_i().unpack(str[start:end])
      self.RoadMarking = []
      for i in range(0, 10):
        val1 = vehicle_msgs.msg.ROAD_MARKING()
        _x = val1
        start = end
        end += 41
        (_x.bottomleftx, _x.bottomlefty, _x.bottomrightx, _x.bottomrighty, _x.topleftx, _x.toplefty, _x.toprightx, _x.toprighty, _x.direction, _x.width, _x.sign_type,) = _get_struct_10iB().unpack(str[start:end])
        self.RoadMarking.append(val1)
      start = end
      end += 4
      (self.TrafficSignNum,) = _get_struct_i().unpack(str[start:end])
      self.TrafficSign = []
      for i in range(0, 5):
        val1 = vehicle_msgs.msg.TRAFFIC_SIGN()
        _x = val1
        start = end
        end += 10
        (_x.pos_flag, _x.x, _x.y, _x.sign_type,) = _get_struct_B2iB().unpack(str[start:end])
        self.TrafficSign.append(val1)
      _x = self
      start = end
      end += 29
      (_x.TrafficLightNum, _x.TrafficLight.pos_flag, _x.TrafficLight.x, _x.TrafficLight.y, _x.TrafficLight.forward_light_type, _x.TrafficLight.left_light_type, _x.TrafficLight.right_light_type, _x.TrafficLight.uturn_light_type, _x.index_lanemarkinginfo, _x.index_pedestrianinfo, _x.index_vehicleinfo,) = _get_struct_iB2i4B3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10i = None
def _get_struct_10i():
    global _struct_10i
    if _struct_10i is None:
        _struct_10i = struct.Struct("<10i")
    return _struct_10i
_struct_10iB = None
def _get_struct_10iB():
    global _struct_10iB
    if _struct_10iB is None:
        _struct_10iB = struct.Struct("<10iB")
    return _struct_10iB
_struct_50i = None
def _get_struct_50i():
    global _struct_50i
    if _struct_50i is None:
        _struct_50i = struct.Struct("<50i")
    return _struct_50i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
_struct_200i = None
def _get_struct_200i():
    global _struct_200i
    if _struct_200i is None:
        _struct_200i = struct.Struct("<200i")
    return _struct_200i
_struct_2i2dId20ib5i2hd = None
def _get_struct_2i2dId20ib5i2hd():
    global _struct_2i2dId20ib5i2hd
    if _struct_2i2dId20ib5i2hd is None:
        _struct_2i2dId20ib5i2hd = struct.Struct("<2i2dId20ib5i2hd")
    return _struct_2i2dId20ib5i2hd
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
_struct_8i2hi = None
def _get_struct_8i2hi():
    global _struct_8i2hi
    if _struct_8i2hi is None:
        _struct_8i2hi = struct.Struct("<8i2hi")
    return _struct_8i2hi
_struct_30i = None
def _get_struct_30i():
    global _struct_30i
    if _struct_30i is None:
        _struct_30i = struct.Struct("<30i")
    return _struct_30i
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
_struct_iB2i4B3I = None
def _get_struct_iB2i4B3I():
    global _struct_iB2i4B3I
    if _struct_iB2i4B3I is None:
        _struct_iB2i4B3I = struct.Struct("<iB2i4B3I")
    return _struct_iB2i4B3I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_B2iB = None
def _get_struct_B2iB():
    global _struct_B2iB
    if _struct_B2iB is None:
        _struct_B2iB = struct.Struct("<B2iB")
    return _struct_B2iB
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
