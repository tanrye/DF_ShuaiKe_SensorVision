# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/CAMERA_DATA_MSG.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vehicle_msgs.msg
import std_msgs.msg

class CAMERA_DATA_MSG(genpy.Message):
  _md5sum = "2ca315a7807a0145e94d098512a2541b"
  _type = "vehicle_msgs/CAMERA_DATA_MSG"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header  header
int32 	messageID              #为每一个MSG设定唯一的标识码

FrameStamp localStamp
FrameStamp globalStamp
 
Camera camera
Camera_Obj[10] camera_obj
Camera_Lane camera_lane

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vehicle_msgs/FrameStamp
#MSG FrameStamp
Header header
float64 time
float64  lat
float64  lng
float64  height
float64[3] position
float64[3] orientation
float64[3] linearSpeed
float64[3] angularSpeed 

================================================================================
MSG: vehicle_msgs/Camera
Header  header
int32 	messageID              #为每一个MSG设定唯一的标识码
 
FrameStamp localStamp
FrameStamp globalStamp

int32 camera_numobstacles
float64  VehSpeed


================================================================================
MSG: vehicle_msgs/Camera_Obj
Header  header
int32 	messageID              #为每一个MSG设定唯一的标识码

FrameStamp localStamp
FrameStamp globalStamp
 
int32 camera_obstacle_id
float64 camera_obstacleposx
float64 camera_obstacleposy
int32 blinkerInfo
int32 cut_in_and_out
int32 obstacle_type
int32 obstacle_status
int32 obstacle_valid
int32 obstacles_brake_lights
float64 obstacle_length
float64 obstacle_width
float64 obstacles_velx

int32 obstacleAge
int32 obstacleLane
int32 CIPVFlag
float64 RadarPosX
float64 RadarVelX
int32 RadarMatchConfidence
int32 MatcheRadarID

float64 obstacleAngleRate
int32 obstacles_velY
float64 object_Accel_X
int32 obstacleReplaced
float64 obstacleAngle

================================================================================
MSG: vehicle_msgs/Camera_Lane
Header  header
int32 	messageID              #为每一个MSG设定唯一的标识码

FrameStamp localStamp
FrameStamp globalStamp
 
int32 l_numoflaneline
int32 l_lanelineid
float64 l_lanepositon
float64 l_lanecurvature
float64 l_lanecurvaturederivative
int32 l_lane_type
float64 l_heading_angle
int32  l_lane_mark_color
int32 l_laneQuality
int32 l_laneWidthMarking
int32 l_laneViewRangStart
int32 l_laneViewRangEnd
int32 l_laneCrossing
int32 l_lanePRED_DIST_BASED_EXTRAPOLATION
int32 l_lanePRED_OTHER_SIDE
int32 l_lanePRED_OVERRIDE
int32 l_lanePRED_OCCLUDED_LM_EXTRAPOLATION
int32 l_lanePRED_HEADWAY_ORIENTED
int32 l_lanePRED_SOURCE_DIVERGING_LANES
int32 l_lanePRED_SOURCE_GUARDRAIL_SHADOW
int32 l_lanePRED_SOURCE_HWE_SPAIN
int32 l_lanePRED_SOURCE_STD
int32 l_lanePRED_SOURCE_VRTL_MERGE
int32 l_laneTCL


int32 r_numoflaneline
int32 r_lanelineid
float64 r_lanepositon  
float64 r_lanecurvature  
float64 r_lanecurvaturederivative 
int32 r_lane_type
float64 r_heading_angle  
int32  r_lane_mark_color
int32 r_laneQuality
int32 r_laneWidthMarking
int32 r_laneViewRangStart
int32 r_laneViewRangEnd
int32 r_laneCrossing
int32 r_lanePRED_DIST_BASED_EXTRAPOLATION
int32 r_lanePRED_OTHER_SIDE
int32 r_lanePRED_OVERRIDE
int32 r_lanePRED_OCCLUDED_LM_EXTRAPOLATION
int32 r_lanePRED_HEADWAY_ORIENTED
int32 r_lanePRED_SOURCE_DIVERGING_LANES
int32 r_lanePRED_SOURCE_GUARDRAIL_SHADOW
int32 r_lanePRED_SOURCE_HWE_SPAIN
int32 r_lanePRED_SOURCE_STD
int32 r_lanePRED_SOURCE_VRTL_MERGE
int32 r_laneTCL


int32 next_l_laneViewRangStart
int32 next_l_laneViewRangEnd
int32 next_l_numoflaneline
int32 next_l_lanelineid
float64 next_l_lanepositon
float64  next_l_lanecurvature
float64 next_l_lanecurvaturederivative
int32 next_l_lane_type
float64 next_l_heading_angle
int32  next_l_lane_mark_color
int32 next_l_laneQuality
int32 next_l_laneWidthMarking

int32 next_r_laneViewRangStart
int32 next_r_laneViewRangEnd
int32 next_r_numoflaneline
int32 next_r_lanelineid
float64 next_r_lanepositon
float64 next_r_lanecurvature
float64 next_r_lanecurvaturederivative
int32 next_r_lane_type
float64 next_r_heading_angle
int32  next_r_lane_mark_color
int32 next_r_laneQuality
int32 next_r_laneWidthMarking

#0x76B highway road info
int32 highwayConstructionArea
int32 highwayRoadType
int32 highwayHighwayExitRight
int32 highwayHighwayExitLeft
float64   highwayProbabilityLeftLane
float64   highwayProbabilityRightLane
float64   highwayDriving_peed_left_lane
float64   highwayDriving_peed_right_lane
int32 highwayprotocol_version




"""
  __slots__ = ['header','messageID','localStamp','globalStamp','camera','camera_obj','camera_lane']
  _slot_types = ['std_msgs/Header','int32','vehicle_msgs/FrameStamp','vehicle_msgs/FrameStamp','vehicle_msgs/Camera','vehicle_msgs/Camera_Obj[10]','vehicle_msgs/Camera_Lane']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,messageID,localStamp,globalStamp,camera,camera_obj,camera_lane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CAMERA_DATA_MSG, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.messageID is None:
        self.messageID = 0
      if self.localStamp is None:
        self.localStamp = vehicle_msgs.msg.FrameStamp()
      if self.globalStamp is None:
        self.globalStamp = vehicle_msgs.msg.FrameStamp()
      if self.camera is None:
        self.camera = vehicle_msgs.msg.Camera()
      if self.camera_obj is None:
        self.camera_obj = [vehicle_msgs.msg.Camera_Obj() for _ in range(10)]
      if self.camera_lane is None:
        self.camera_lane = vehicle_msgs.msg.Camera_Lane()
    else:
      self.header = std_msgs.msg.Header()
      self.messageID = 0
      self.localStamp = vehicle_msgs.msg.FrameStamp()
      self.globalStamp = vehicle_msgs.msg.FrameStamp()
      self.camera = vehicle_msgs.msg.Camera()
      self.camera_obj = [vehicle_msgs.msg.Camera_Obj() for _ in range(10)]
      self.camera_lane = vehicle_msgs.msg.Camera_Lane()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.messageID, _x.localStamp.header.seq, _x.localStamp.header.stamp.secs, _x.localStamp.header.stamp.nsecs))
      _x = self.localStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.localStamp.time, _x.localStamp.lat, _x.localStamp.lng, _x.localStamp.height))
      buff.write(_get_struct_3d().pack(*self.localStamp.position))
      buff.write(_get_struct_3d().pack(*self.localStamp.orientation))
      buff.write(_get_struct_3d().pack(*self.localStamp.linearSpeed))
      buff.write(_get_struct_3d().pack(*self.localStamp.angularSpeed))
      _x = self
      buff.write(_get_struct_3I().pack(_x.globalStamp.header.seq, _x.globalStamp.header.stamp.secs, _x.globalStamp.header.stamp.nsecs))
      _x = self.globalStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.globalStamp.time, _x.globalStamp.lat, _x.globalStamp.lng, _x.globalStamp.height))
      buff.write(_get_struct_3d().pack(*self.globalStamp.position))
      buff.write(_get_struct_3d().pack(*self.globalStamp.orientation))
      buff.write(_get_struct_3d().pack(*self.globalStamp.linearSpeed))
      buff.write(_get_struct_3d().pack(*self.globalStamp.angularSpeed))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera.header.seq, _x.camera.header.stamp.secs, _x.camera.header.stamp.nsecs))
      _x = self.camera.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.camera.messageID, _x.camera.localStamp.header.seq, _x.camera.localStamp.header.stamp.secs, _x.camera.localStamp.header.stamp.nsecs))
      _x = self.camera.localStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera.localStamp.time, _x.camera.localStamp.lat, _x.camera.localStamp.lng, _x.camera.localStamp.height))
      buff.write(_get_struct_3d().pack(*self.camera.localStamp.position))
      buff.write(_get_struct_3d().pack(*self.camera.localStamp.orientation))
      buff.write(_get_struct_3d().pack(*self.camera.localStamp.linearSpeed))
      buff.write(_get_struct_3d().pack(*self.camera.localStamp.angularSpeed))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera.globalStamp.header.seq, _x.camera.globalStamp.header.stamp.secs, _x.camera.globalStamp.header.stamp.nsecs))
      _x = self.camera.globalStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera.globalStamp.time, _x.camera.globalStamp.lat, _x.camera.globalStamp.lng, _x.camera.globalStamp.height))
      buff.write(_get_struct_3d().pack(*self.camera.globalStamp.position))
      buff.write(_get_struct_3d().pack(*self.camera.globalStamp.orientation))
      buff.write(_get_struct_3d().pack(*self.camera.globalStamp.linearSpeed))
      buff.write(_get_struct_3d().pack(*self.camera.globalStamp.angularSpeed))
      _x = self
      buff.write(_get_struct_id().pack(_x.camera.camera_numobstacles, _x.camera.VehSpeed))
      for val1 in self.camera_obj:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.messageID))
        _v3 = val1.localStamp
        _v4 = _v3.header
        buff.write(_get_struct_I().pack(_v4.seq))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.time, _x.lat, _x.lng, _x.height))
        buff.write(_get_struct_3d().pack(*_v3.position))
        buff.write(_get_struct_3d().pack(*_v3.orientation))
        buff.write(_get_struct_3d().pack(*_v3.linearSpeed))
        buff.write(_get_struct_3d().pack(*_v3.angularSpeed))
        _v6 = val1.globalStamp
        _v7 = _v6.header
        buff.write(_get_struct_I().pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.time, _x.lat, _x.lng, _x.height))
        buff.write(_get_struct_3d().pack(*_v6.position))
        buff.write(_get_struct_3d().pack(*_v6.orientation))
        buff.write(_get_struct_3d().pack(*_v6.linearSpeed))
        buff.write(_get_struct_3d().pack(*_v6.angularSpeed))
        _x = val1
        buff.write(_get_struct_i2d6i3d3i2d2ididid().pack(_x.camera_obstacle_id, _x.camera_obstacleposx, _x.camera_obstacleposy, _x.blinkerInfo, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_valid, _x.obstacles_brake_lights, _x.obstacle_length, _x.obstacle_width, _x.obstacles_velx, _x.obstacleAge, _x.obstacleLane, _x.CIPVFlag, _x.RadarPosX, _x.RadarVelX, _x.RadarMatchConfidence, _x.MatcheRadarID, _x.obstacleAngleRate, _x.obstacles_velY, _x.object_Accel_X, _x.obstacleReplaced, _x.obstacleAngle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_lane.header.seq, _x.camera_lane.header.stamp.secs, _x.camera_lane.header.stamp.nsecs))
      _x = self.camera_lane.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.camera_lane.messageID, _x.camera_lane.localStamp.header.seq, _x.camera_lane.localStamp.header.stamp.secs, _x.camera_lane.localStamp.header.stamp.nsecs))
      _x = self.camera_lane.localStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera_lane.localStamp.time, _x.camera_lane.localStamp.lat, _x.camera_lane.localStamp.lng, _x.camera_lane.localStamp.height))
      buff.write(_get_struct_3d().pack(*self.camera_lane.localStamp.position))
      buff.write(_get_struct_3d().pack(*self.camera_lane.localStamp.orientation))
      buff.write(_get_struct_3d().pack(*self.camera_lane.localStamp.linearSpeed))
      buff.write(_get_struct_3d().pack(*self.camera_lane.localStamp.angularSpeed))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_lane.globalStamp.header.seq, _x.camera_lane.globalStamp.header.stamp.secs, _x.camera_lane.globalStamp.header.stamp.nsecs))
      _x = self.camera_lane.globalStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera_lane.globalStamp.time, _x.camera_lane.globalStamp.lat, _x.camera_lane.globalStamp.lng, _x.camera_lane.globalStamp.height))
      buff.write(_get_struct_3d().pack(*self.camera_lane.globalStamp.position))
      buff.write(_get_struct_3d().pack(*self.camera_lane.globalStamp.orientation))
      buff.write(_get_struct_3d().pack(*self.camera_lane.globalStamp.linearSpeed))
      buff.write(_get_struct_3d().pack(*self.camera_lane.globalStamp.angularSpeed))
      _x = self
      buff.write(_get_struct_2i3did19i3did21i3did7i3did7i4di().pack(_x.camera_lane.l_numoflaneline, _x.camera_lane.l_lanelineid, _x.camera_lane.l_lanepositon, _x.camera_lane.l_lanecurvature, _x.camera_lane.l_lanecurvaturederivative, _x.camera_lane.l_lane_type, _x.camera_lane.l_heading_angle, _x.camera_lane.l_lane_mark_color, _x.camera_lane.l_laneQuality, _x.camera_lane.l_laneWidthMarking, _x.camera_lane.l_laneViewRangStart, _x.camera_lane.l_laneViewRangEnd, _x.camera_lane.l_laneCrossing, _x.camera_lane.l_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.l_lanePRED_OTHER_SIDE, _x.camera_lane.l_lanePRED_OVERRIDE, _x.camera_lane.l_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.l_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.l_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.l_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.l_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.l_lanePRED_SOURCE_STD, _x.camera_lane.l_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.l_laneTCL, _x.camera_lane.r_numoflaneline, _x.camera_lane.r_lanelineid, _x.camera_lane.r_lanepositon, _x.camera_lane.r_lanecurvature, _x.camera_lane.r_lanecurvaturederivative, _x.camera_lane.r_lane_type, _x.camera_lane.r_heading_angle, _x.camera_lane.r_lane_mark_color, _x.camera_lane.r_laneQuality, _x.camera_lane.r_laneWidthMarking, _x.camera_lane.r_laneViewRangStart, _x.camera_lane.r_laneViewRangEnd, _x.camera_lane.r_laneCrossing, _x.camera_lane.r_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.r_lanePRED_OTHER_SIDE, _x.camera_lane.r_lanePRED_OVERRIDE, _x.camera_lane.r_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.r_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.r_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.r_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.r_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.r_lanePRED_SOURCE_STD, _x.camera_lane.r_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.r_laneTCL, _x.camera_lane.next_l_laneViewRangStart, _x.camera_lane.next_l_laneViewRangEnd, _x.camera_lane.next_l_numoflaneline, _x.camera_lane.next_l_lanelineid, _x.camera_lane.next_l_lanepositon, _x.camera_lane.next_l_lanecurvature, _x.camera_lane.next_l_lanecurvaturederivative, _x.camera_lane.next_l_lane_type, _x.camera_lane.next_l_heading_angle, _x.camera_lane.next_l_lane_mark_color, _x.camera_lane.next_l_laneQuality, _x.camera_lane.next_l_laneWidthMarking, _x.camera_lane.next_r_laneViewRangStart, _x.camera_lane.next_r_laneViewRangEnd, _x.camera_lane.next_r_numoflaneline, _x.camera_lane.next_r_lanelineid, _x.camera_lane.next_r_lanepositon, _x.camera_lane.next_r_lanecurvature, _x.camera_lane.next_r_lanecurvaturederivative, _x.camera_lane.next_r_lane_type, _x.camera_lane.next_r_heading_angle, _x.camera_lane.next_r_lane_mark_color, _x.camera_lane.next_r_laneQuality, _x.camera_lane.next_r_laneWidthMarking, _x.camera_lane.highwayConstructionArea, _x.camera_lane.highwayRoadType, _x.camera_lane.highwayHighwayExitRight, _x.camera_lane.highwayHighwayExitLeft, _x.camera_lane.highwayProbabilityLeftLane, _x.camera_lane.highwayProbabilityRightLane, _x.camera_lane.highwayDriving_peed_left_lane, _x.camera_lane.highwayDriving_peed_right_lane, _x.camera_lane.highwayprotocol_version))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localStamp is None:
        self.localStamp = vehicle_msgs.msg.FrameStamp()
      if self.globalStamp is None:
        self.globalStamp = vehicle_msgs.msg.FrameStamp()
      if self.camera is None:
        self.camera = vehicle_msgs.msg.Camera()
      if self.camera_obj is None:
        self.camera_obj = None
      if self.camera_lane is None:
        self.camera_lane = vehicle_msgs.msg.Camera_Lane()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.messageID, _x.localStamp.header.seq, _x.localStamp.header.stamp.secs, _x.localStamp.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.localStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.localStamp.time, _x.localStamp.lat, _x.localStamp.lng, _x.localStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.localStamp.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.localStamp.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.localStamp.linearSpeed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.localStamp.angularSpeed = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.globalStamp.header.seq, _x.globalStamp.header.stamp.secs, _x.globalStamp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.globalStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.globalStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.globalStamp.time, _x.globalStamp.lat, _x.globalStamp.lng, _x.globalStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.globalStamp.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.globalStamp.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.globalStamp.linearSpeed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.globalStamp.angularSpeed = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.camera.header.seq, _x.camera.header.stamp.secs, _x.camera.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.camera.messageID, _x.camera.localStamp.header.seq, _x.camera.localStamp.header.stamp.secs, _x.camera.localStamp.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.localStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera.localStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera.localStamp.time, _x.camera.localStamp.lat, _x.camera.localStamp.lng, _x.camera.localStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.localStamp.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.localStamp.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.localStamp.linearSpeed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.localStamp.angularSpeed = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.camera.globalStamp.header.seq, _x.camera.globalStamp.header.stamp.secs, _x.camera.globalStamp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.globalStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera.globalStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera.globalStamp.time, _x.camera.globalStamp.lat, _x.camera.globalStamp.lng, _x.camera.globalStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.globalStamp.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.globalStamp.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.globalStamp.linearSpeed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.globalStamp.angularSpeed = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.camera.camera_numobstacles, _x.camera.VehSpeed,) = _get_struct_id().unpack(str[start:end])
      self.camera_obj = []
      for i in range(0, 10):
        val1 = vehicle_msgs.msg.Camera_Obj()
        _v9 = val1.header
        start = end
        end += 4
        (_v9.seq,) = _get_struct_I().unpack(str[start:end])
        _v10 = _v9.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.frame_id = str[start:end].decode('utf-8')
        else:
          _v9.frame_id = str[start:end]
        start = end
        end += 4
        (val1.messageID,) = _get_struct_i().unpack(str[start:end])
        _v11 = val1.localStamp
        _v12 = _v11.header
        start = end
        end += 4
        (_v12.seq,) = _get_struct_I().unpack(str[start:end])
        _v13 = _v12.stamp
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.frame_id = str[start:end].decode('utf-8')
        else:
          _v12.frame_id = str[start:end]
        _x = _v11
        start = end
        end += 32
        (_x.time, _x.lat, _x.lng, _x.height,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 24
        _v11.position = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 24
        _v11.orientation = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 24
        _v11.linearSpeed = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 24
        _v11.angularSpeed = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.globalStamp
        _v15 = _v14.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8')
        else:
          _v15.frame_id = str[start:end]
        _x = _v14
        start = end
        end += 32
        (_x.time, _x.lat, _x.lng, _x.height,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 24
        _v14.position = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 24
        _v14.orientation = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 24
        _v14.linearSpeed = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 24
        _v14.angularSpeed = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 136
        (_x.camera_obstacle_id, _x.camera_obstacleposx, _x.camera_obstacleposy, _x.blinkerInfo, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_valid, _x.obstacles_brake_lights, _x.obstacle_length, _x.obstacle_width, _x.obstacles_velx, _x.obstacleAge, _x.obstacleLane, _x.CIPVFlag, _x.RadarPosX, _x.RadarVelX, _x.RadarMatchConfidence, _x.MatcheRadarID, _x.obstacleAngleRate, _x.obstacles_velY, _x.object_Accel_X, _x.obstacleReplaced, _x.obstacleAngle,) = _get_struct_i2d6i3d3i2d2ididid().unpack(str[start:end])
        self.camera_obj.append(val1)
      _x = self
      start = end
      end += 12
      (_x.camera_lane.header.seq, _x.camera_lane.header.stamp.secs, _x.camera_lane.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_lane.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera_lane.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.camera_lane.messageID, _x.camera_lane.localStamp.header.seq, _x.camera_lane.localStamp.header.stamp.secs, _x.camera_lane.localStamp.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_lane.localStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera_lane.localStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera_lane.localStamp.time, _x.camera_lane.localStamp.lat, _x.camera_lane.localStamp.lng, _x.camera_lane.localStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.localStamp.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.localStamp.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.localStamp.linearSpeed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.localStamp.angularSpeed = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.camera_lane.globalStamp.header.seq, _x.camera_lane.globalStamp.header.stamp.secs, _x.camera_lane.globalStamp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_lane.globalStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera_lane.globalStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera_lane.globalStamp.time, _x.camera_lane.globalStamp.lat, _x.camera_lane.globalStamp.lng, _x.camera_lane.globalStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.globalStamp.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.globalStamp.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.globalStamp.linearSpeed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.globalStamp.angularSpeed = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 404
      (_x.camera_lane.l_numoflaneline, _x.camera_lane.l_lanelineid, _x.camera_lane.l_lanepositon, _x.camera_lane.l_lanecurvature, _x.camera_lane.l_lanecurvaturederivative, _x.camera_lane.l_lane_type, _x.camera_lane.l_heading_angle, _x.camera_lane.l_lane_mark_color, _x.camera_lane.l_laneQuality, _x.camera_lane.l_laneWidthMarking, _x.camera_lane.l_laneViewRangStart, _x.camera_lane.l_laneViewRangEnd, _x.camera_lane.l_laneCrossing, _x.camera_lane.l_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.l_lanePRED_OTHER_SIDE, _x.camera_lane.l_lanePRED_OVERRIDE, _x.camera_lane.l_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.l_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.l_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.l_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.l_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.l_lanePRED_SOURCE_STD, _x.camera_lane.l_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.l_laneTCL, _x.camera_lane.r_numoflaneline, _x.camera_lane.r_lanelineid, _x.camera_lane.r_lanepositon, _x.camera_lane.r_lanecurvature, _x.camera_lane.r_lanecurvaturederivative, _x.camera_lane.r_lane_type, _x.camera_lane.r_heading_angle, _x.camera_lane.r_lane_mark_color, _x.camera_lane.r_laneQuality, _x.camera_lane.r_laneWidthMarking, _x.camera_lane.r_laneViewRangStart, _x.camera_lane.r_laneViewRangEnd, _x.camera_lane.r_laneCrossing, _x.camera_lane.r_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.r_lanePRED_OTHER_SIDE, _x.camera_lane.r_lanePRED_OVERRIDE, _x.camera_lane.r_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.r_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.r_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.r_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.r_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.r_lanePRED_SOURCE_STD, _x.camera_lane.r_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.r_laneTCL, _x.camera_lane.next_l_laneViewRangStart, _x.camera_lane.next_l_laneViewRangEnd, _x.camera_lane.next_l_numoflaneline, _x.camera_lane.next_l_lanelineid, _x.camera_lane.next_l_lanepositon, _x.camera_lane.next_l_lanecurvature, _x.camera_lane.next_l_lanecurvaturederivative, _x.camera_lane.next_l_lane_type, _x.camera_lane.next_l_heading_angle, _x.camera_lane.next_l_lane_mark_color, _x.camera_lane.next_l_laneQuality, _x.camera_lane.next_l_laneWidthMarking, _x.camera_lane.next_r_laneViewRangStart, _x.camera_lane.next_r_laneViewRangEnd, _x.camera_lane.next_r_numoflaneline, _x.camera_lane.next_r_lanelineid, _x.camera_lane.next_r_lanepositon, _x.camera_lane.next_r_lanecurvature, _x.camera_lane.next_r_lanecurvaturederivative, _x.camera_lane.next_r_lane_type, _x.camera_lane.next_r_heading_angle, _x.camera_lane.next_r_lane_mark_color, _x.camera_lane.next_r_laneQuality, _x.camera_lane.next_r_laneWidthMarking, _x.camera_lane.highwayConstructionArea, _x.camera_lane.highwayRoadType, _x.camera_lane.highwayHighwayExitRight, _x.camera_lane.highwayHighwayExitLeft, _x.camera_lane.highwayProbabilityLeftLane, _x.camera_lane.highwayProbabilityRightLane, _x.camera_lane.highwayDriving_peed_left_lane, _x.camera_lane.highwayDriving_peed_right_lane, _x.camera_lane.highwayprotocol_version,) = _get_struct_2i3did19i3did21i3did7i3did7i4di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.messageID, _x.localStamp.header.seq, _x.localStamp.header.stamp.secs, _x.localStamp.header.stamp.nsecs))
      _x = self.localStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.localStamp.time, _x.localStamp.lat, _x.localStamp.lng, _x.localStamp.height))
      buff.write(self.localStamp.position.tostring())
      buff.write(self.localStamp.orientation.tostring())
      buff.write(self.localStamp.linearSpeed.tostring())
      buff.write(self.localStamp.angularSpeed.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.globalStamp.header.seq, _x.globalStamp.header.stamp.secs, _x.globalStamp.header.stamp.nsecs))
      _x = self.globalStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.globalStamp.time, _x.globalStamp.lat, _x.globalStamp.lng, _x.globalStamp.height))
      buff.write(self.globalStamp.position.tostring())
      buff.write(self.globalStamp.orientation.tostring())
      buff.write(self.globalStamp.linearSpeed.tostring())
      buff.write(self.globalStamp.angularSpeed.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera.header.seq, _x.camera.header.stamp.secs, _x.camera.header.stamp.nsecs))
      _x = self.camera.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.camera.messageID, _x.camera.localStamp.header.seq, _x.camera.localStamp.header.stamp.secs, _x.camera.localStamp.header.stamp.nsecs))
      _x = self.camera.localStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera.localStamp.time, _x.camera.localStamp.lat, _x.camera.localStamp.lng, _x.camera.localStamp.height))
      buff.write(self.camera.localStamp.position.tostring())
      buff.write(self.camera.localStamp.orientation.tostring())
      buff.write(self.camera.localStamp.linearSpeed.tostring())
      buff.write(self.camera.localStamp.angularSpeed.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera.globalStamp.header.seq, _x.camera.globalStamp.header.stamp.secs, _x.camera.globalStamp.header.stamp.nsecs))
      _x = self.camera.globalStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera.globalStamp.time, _x.camera.globalStamp.lat, _x.camera.globalStamp.lng, _x.camera.globalStamp.height))
      buff.write(self.camera.globalStamp.position.tostring())
      buff.write(self.camera.globalStamp.orientation.tostring())
      buff.write(self.camera.globalStamp.linearSpeed.tostring())
      buff.write(self.camera.globalStamp.angularSpeed.tostring())
      _x = self
      buff.write(_get_struct_id().pack(_x.camera.camera_numobstacles, _x.camera.VehSpeed))
      for val1 in self.camera_obj:
        _v17 = val1.header
        buff.write(_get_struct_I().pack(_v17.seq))
        _v18 = _v17.stamp
        _x = _v18
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v17.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.messageID))
        _v19 = val1.localStamp
        _v20 = _v19.header
        buff.write(_get_struct_I().pack(_v20.seq))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v19
        buff.write(_get_struct_4d().pack(_x.time, _x.lat, _x.lng, _x.height))
        buff.write(_v19.position.tostring())
        buff.write(_v19.orientation.tostring())
        buff.write(_v19.linearSpeed.tostring())
        buff.write(_v19.angularSpeed.tostring())
        _v22 = val1.globalStamp
        _v23 = _v22.header
        buff.write(_get_struct_I().pack(_v23.seq))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v22
        buff.write(_get_struct_4d().pack(_x.time, _x.lat, _x.lng, _x.height))
        buff.write(_v22.position.tostring())
        buff.write(_v22.orientation.tostring())
        buff.write(_v22.linearSpeed.tostring())
        buff.write(_v22.angularSpeed.tostring())
        _x = val1
        buff.write(_get_struct_i2d6i3d3i2d2ididid().pack(_x.camera_obstacle_id, _x.camera_obstacleposx, _x.camera_obstacleposy, _x.blinkerInfo, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_valid, _x.obstacles_brake_lights, _x.obstacle_length, _x.obstacle_width, _x.obstacles_velx, _x.obstacleAge, _x.obstacleLane, _x.CIPVFlag, _x.RadarPosX, _x.RadarVelX, _x.RadarMatchConfidence, _x.MatcheRadarID, _x.obstacleAngleRate, _x.obstacles_velY, _x.object_Accel_X, _x.obstacleReplaced, _x.obstacleAngle))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_lane.header.seq, _x.camera_lane.header.stamp.secs, _x.camera_lane.header.stamp.nsecs))
      _x = self.camera_lane.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.camera_lane.messageID, _x.camera_lane.localStamp.header.seq, _x.camera_lane.localStamp.header.stamp.secs, _x.camera_lane.localStamp.header.stamp.nsecs))
      _x = self.camera_lane.localStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera_lane.localStamp.time, _x.camera_lane.localStamp.lat, _x.camera_lane.localStamp.lng, _x.camera_lane.localStamp.height))
      buff.write(self.camera_lane.localStamp.position.tostring())
      buff.write(self.camera_lane.localStamp.orientation.tostring())
      buff.write(self.camera_lane.localStamp.linearSpeed.tostring())
      buff.write(self.camera_lane.localStamp.angularSpeed.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_lane.globalStamp.header.seq, _x.camera_lane.globalStamp.header.stamp.secs, _x.camera_lane.globalStamp.header.stamp.nsecs))
      _x = self.camera_lane.globalStamp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.camera_lane.globalStamp.time, _x.camera_lane.globalStamp.lat, _x.camera_lane.globalStamp.lng, _x.camera_lane.globalStamp.height))
      buff.write(self.camera_lane.globalStamp.position.tostring())
      buff.write(self.camera_lane.globalStamp.orientation.tostring())
      buff.write(self.camera_lane.globalStamp.linearSpeed.tostring())
      buff.write(self.camera_lane.globalStamp.angularSpeed.tostring())
      _x = self
      buff.write(_get_struct_2i3did19i3did21i3did7i3did7i4di().pack(_x.camera_lane.l_numoflaneline, _x.camera_lane.l_lanelineid, _x.camera_lane.l_lanepositon, _x.camera_lane.l_lanecurvature, _x.camera_lane.l_lanecurvaturederivative, _x.camera_lane.l_lane_type, _x.camera_lane.l_heading_angle, _x.camera_lane.l_lane_mark_color, _x.camera_lane.l_laneQuality, _x.camera_lane.l_laneWidthMarking, _x.camera_lane.l_laneViewRangStart, _x.camera_lane.l_laneViewRangEnd, _x.camera_lane.l_laneCrossing, _x.camera_lane.l_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.l_lanePRED_OTHER_SIDE, _x.camera_lane.l_lanePRED_OVERRIDE, _x.camera_lane.l_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.l_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.l_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.l_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.l_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.l_lanePRED_SOURCE_STD, _x.camera_lane.l_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.l_laneTCL, _x.camera_lane.r_numoflaneline, _x.camera_lane.r_lanelineid, _x.camera_lane.r_lanepositon, _x.camera_lane.r_lanecurvature, _x.camera_lane.r_lanecurvaturederivative, _x.camera_lane.r_lane_type, _x.camera_lane.r_heading_angle, _x.camera_lane.r_lane_mark_color, _x.camera_lane.r_laneQuality, _x.camera_lane.r_laneWidthMarking, _x.camera_lane.r_laneViewRangStart, _x.camera_lane.r_laneViewRangEnd, _x.camera_lane.r_laneCrossing, _x.camera_lane.r_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.r_lanePRED_OTHER_SIDE, _x.camera_lane.r_lanePRED_OVERRIDE, _x.camera_lane.r_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.r_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.r_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.r_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.r_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.r_lanePRED_SOURCE_STD, _x.camera_lane.r_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.r_laneTCL, _x.camera_lane.next_l_laneViewRangStart, _x.camera_lane.next_l_laneViewRangEnd, _x.camera_lane.next_l_numoflaneline, _x.camera_lane.next_l_lanelineid, _x.camera_lane.next_l_lanepositon, _x.camera_lane.next_l_lanecurvature, _x.camera_lane.next_l_lanecurvaturederivative, _x.camera_lane.next_l_lane_type, _x.camera_lane.next_l_heading_angle, _x.camera_lane.next_l_lane_mark_color, _x.camera_lane.next_l_laneQuality, _x.camera_lane.next_l_laneWidthMarking, _x.camera_lane.next_r_laneViewRangStart, _x.camera_lane.next_r_laneViewRangEnd, _x.camera_lane.next_r_numoflaneline, _x.camera_lane.next_r_lanelineid, _x.camera_lane.next_r_lanepositon, _x.camera_lane.next_r_lanecurvature, _x.camera_lane.next_r_lanecurvaturederivative, _x.camera_lane.next_r_lane_type, _x.camera_lane.next_r_heading_angle, _x.camera_lane.next_r_lane_mark_color, _x.camera_lane.next_r_laneQuality, _x.camera_lane.next_r_laneWidthMarking, _x.camera_lane.highwayConstructionArea, _x.camera_lane.highwayRoadType, _x.camera_lane.highwayHighwayExitRight, _x.camera_lane.highwayHighwayExitLeft, _x.camera_lane.highwayProbabilityLeftLane, _x.camera_lane.highwayProbabilityRightLane, _x.camera_lane.highwayDriving_peed_left_lane, _x.camera_lane.highwayDriving_peed_right_lane, _x.camera_lane.highwayprotocol_version))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.localStamp is None:
        self.localStamp = vehicle_msgs.msg.FrameStamp()
      if self.globalStamp is None:
        self.globalStamp = vehicle_msgs.msg.FrameStamp()
      if self.camera is None:
        self.camera = vehicle_msgs.msg.Camera()
      if self.camera_obj is None:
        self.camera_obj = None
      if self.camera_lane is None:
        self.camera_lane = vehicle_msgs.msg.Camera_Lane()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.messageID, _x.localStamp.header.seq, _x.localStamp.header.stamp.secs, _x.localStamp.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.localStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.localStamp.time, _x.localStamp.lat, _x.localStamp.lng, _x.localStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.localStamp.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.localStamp.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.localStamp.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.localStamp.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 12
      (_x.globalStamp.header.seq, _x.globalStamp.header.stamp.secs, _x.globalStamp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.globalStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.globalStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.globalStamp.time, _x.globalStamp.lat, _x.globalStamp.lng, _x.globalStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.globalStamp.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.globalStamp.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.globalStamp.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.globalStamp.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 12
      (_x.camera.header.seq, _x.camera.header.stamp.secs, _x.camera.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.camera.messageID, _x.camera.localStamp.header.seq, _x.camera.localStamp.header.stamp.secs, _x.camera.localStamp.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.localStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera.localStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera.localStamp.time, _x.camera.localStamp.lat, _x.camera.localStamp.lng, _x.camera.localStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.localStamp.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera.localStamp.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera.localStamp.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera.localStamp.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 12
      (_x.camera.globalStamp.header.seq, _x.camera.globalStamp.header.stamp.secs, _x.camera.globalStamp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.globalStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera.globalStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera.globalStamp.time, _x.camera.globalStamp.lat, _x.camera.globalStamp.lng, _x.camera.globalStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera.globalStamp.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera.globalStamp.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera.globalStamp.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera.globalStamp.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 12
      (_x.camera.camera_numobstacles, _x.camera.VehSpeed,) = _get_struct_id().unpack(str[start:end])
      self.camera_obj = []
      for i in range(0, 10):
        val1 = vehicle_msgs.msg.Camera_Obj()
        _v25 = val1.header
        start = end
        end += 4
        (_v25.seq,) = _get_struct_I().unpack(str[start:end])
        _v26 = _v25.stamp
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v25.frame_id = str[start:end].decode('utf-8')
        else:
          _v25.frame_id = str[start:end]
        start = end
        end += 4
        (val1.messageID,) = _get_struct_i().unpack(str[start:end])
        _v27 = val1.localStamp
        _v28 = _v27.header
        start = end
        end += 4
        (_v28.seq,) = _get_struct_I().unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.frame_id = str[start:end].decode('utf-8')
        else:
          _v28.frame_id = str[start:end]
        _x = _v27
        start = end
        end += 32
        (_x.time, _x.lat, _x.lng, _x.height,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 24
        _v27.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 24
        _v27.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 24
        _v27.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 24
        _v27.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        _v30 = val1.globalStamp
        _v31 = _v30.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8')
        else:
          _v31.frame_id = str[start:end]
        _x = _v30
        start = end
        end += 32
        (_x.time, _x.lat, _x.lng, _x.height,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 24
        _v30.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 24
        _v30.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 24
        _v30.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 24
        _v30.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        _x = val1
        start = end
        end += 136
        (_x.camera_obstacle_id, _x.camera_obstacleposx, _x.camera_obstacleposy, _x.blinkerInfo, _x.cut_in_and_out, _x.obstacle_type, _x.obstacle_status, _x.obstacle_valid, _x.obstacles_brake_lights, _x.obstacle_length, _x.obstacle_width, _x.obstacles_velx, _x.obstacleAge, _x.obstacleLane, _x.CIPVFlag, _x.RadarPosX, _x.RadarVelX, _x.RadarMatchConfidence, _x.MatcheRadarID, _x.obstacleAngleRate, _x.obstacles_velY, _x.object_Accel_X, _x.obstacleReplaced, _x.obstacleAngle,) = _get_struct_i2d6i3d3i2d2ididid().unpack(str[start:end])
        self.camera_obj.append(val1)
      _x = self
      start = end
      end += 12
      (_x.camera_lane.header.seq, _x.camera_lane.header.stamp.secs, _x.camera_lane.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_lane.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera_lane.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.camera_lane.messageID, _x.camera_lane.localStamp.header.seq, _x.camera_lane.localStamp.header.stamp.secs, _x.camera_lane.localStamp.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_lane.localStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera_lane.localStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera_lane.localStamp.time, _x.camera_lane.localStamp.lat, _x.camera_lane.localStamp.lng, _x.camera_lane.localStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.localStamp.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera_lane.localStamp.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera_lane.localStamp.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera_lane.localStamp.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 12
      (_x.camera_lane.globalStamp.header.seq, _x.camera_lane.globalStamp.header.stamp.secs, _x.camera_lane.globalStamp.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_lane.globalStamp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.camera_lane.globalStamp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.camera_lane.globalStamp.time, _x.camera_lane.globalStamp.lat, _x.camera_lane.globalStamp.lng, _x.camera_lane.globalStamp.height,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.camera_lane.globalStamp.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera_lane.globalStamp.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera_lane.globalStamp.linearSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.camera_lane.globalStamp.angularSpeed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 404
      (_x.camera_lane.l_numoflaneline, _x.camera_lane.l_lanelineid, _x.camera_lane.l_lanepositon, _x.camera_lane.l_lanecurvature, _x.camera_lane.l_lanecurvaturederivative, _x.camera_lane.l_lane_type, _x.camera_lane.l_heading_angle, _x.camera_lane.l_lane_mark_color, _x.camera_lane.l_laneQuality, _x.camera_lane.l_laneWidthMarking, _x.camera_lane.l_laneViewRangStart, _x.camera_lane.l_laneViewRangEnd, _x.camera_lane.l_laneCrossing, _x.camera_lane.l_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.l_lanePRED_OTHER_SIDE, _x.camera_lane.l_lanePRED_OVERRIDE, _x.camera_lane.l_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.l_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.l_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.l_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.l_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.l_lanePRED_SOURCE_STD, _x.camera_lane.l_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.l_laneTCL, _x.camera_lane.r_numoflaneline, _x.camera_lane.r_lanelineid, _x.camera_lane.r_lanepositon, _x.camera_lane.r_lanecurvature, _x.camera_lane.r_lanecurvaturederivative, _x.camera_lane.r_lane_type, _x.camera_lane.r_heading_angle, _x.camera_lane.r_lane_mark_color, _x.camera_lane.r_laneQuality, _x.camera_lane.r_laneWidthMarking, _x.camera_lane.r_laneViewRangStart, _x.camera_lane.r_laneViewRangEnd, _x.camera_lane.r_laneCrossing, _x.camera_lane.r_lanePRED_DIST_BASED_EXTRAPOLATION, _x.camera_lane.r_lanePRED_OTHER_SIDE, _x.camera_lane.r_lanePRED_OVERRIDE, _x.camera_lane.r_lanePRED_OCCLUDED_LM_EXTRAPOLATION, _x.camera_lane.r_lanePRED_HEADWAY_ORIENTED, _x.camera_lane.r_lanePRED_SOURCE_DIVERGING_LANES, _x.camera_lane.r_lanePRED_SOURCE_GUARDRAIL_SHADOW, _x.camera_lane.r_lanePRED_SOURCE_HWE_SPAIN, _x.camera_lane.r_lanePRED_SOURCE_STD, _x.camera_lane.r_lanePRED_SOURCE_VRTL_MERGE, _x.camera_lane.r_laneTCL, _x.camera_lane.next_l_laneViewRangStart, _x.camera_lane.next_l_laneViewRangEnd, _x.camera_lane.next_l_numoflaneline, _x.camera_lane.next_l_lanelineid, _x.camera_lane.next_l_lanepositon, _x.camera_lane.next_l_lanecurvature, _x.camera_lane.next_l_lanecurvaturederivative, _x.camera_lane.next_l_lane_type, _x.camera_lane.next_l_heading_angle, _x.camera_lane.next_l_lane_mark_color, _x.camera_lane.next_l_laneQuality, _x.camera_lane.next_l_laneWidthMarking, _x.camera_lane.next_r_laneViewRangStart, _x.camera_lane.next_r_laneViewRangEnd, _x.camera_lane.next_r_numoflaneline, _x.camera_lane.next_r_lanelineid, _x.camera_lane.next_r_lanepositon, _x.camera_lane.next_r_lanecurvature, _x.camera_lane.next_r_lanecurvaturederivative, _x.camera_lane.next_r_lane_type, _x.camera_lane.next_r_heading_angle, _x.camera_lane.next_r_lane_mark_color, _x.camera_lane.next_r_laneQuality, _x.camera_lane.next_r_laneWidthMarking, _x.camera_lane.highwayConstructionArea, _x.camera_lane.highwayRoadType, _x.camera_lane.highwayHighwayExitRight, _x.camera_lane.highwayHighwayExitLeft, _x.camera_lane.highwayProbabilityLeftLane, _x.camera_lane.highwayProbabilityRightLane, _x.camera_lane.highwayDriving_peed_left_lane, _x.camera_lane.highwayDriving_peed_right_lane, _x.camera_lane.highwayprotocol_version,) = _get_struct_2i3did19i3did21i3did7i3did7i4di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3did19i3did21i3did7i3did7i4di = None
def _get_struct_2i3did19i3did21i3did7i3did7i4di():
    global _struct_2i3did19i3did21i3did7i3did7i4di
    if _struct_2i3did19i3did21i3did7i3did7i4di is None:
        _struct_2i3did19i3did21i3did7i3did7i4di = struct.Struct("<2i3did19i3did21i3did7i3did7i4di")
    return _struct_2i3did19i3did21i3did7i3did7i4di
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_id = None
def _get_struct_id():
    global _struct_id
    if _struct_id is None:
        _struct_id = struct.Struct("<id")
    return _struct_id
_struct_i2d6i3d3i2d2ididid = None
def _get_struct_i2d6i3d3i2d2ididid():
    global _struct_i2d6i3d3i2d2ididid
    if _struct_i2d6i3d3i2d2ididid is None:
        _struct_i2d6i3d3i2d2ididid = struct.Struct("<i2d6i3d3i2d2ididid")
    return _struct_i2d6i3d3i2d2ididid
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
