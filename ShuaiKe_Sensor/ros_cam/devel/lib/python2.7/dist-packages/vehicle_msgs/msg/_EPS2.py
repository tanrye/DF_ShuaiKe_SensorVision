# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/EPS2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EPS2(genpy.Message):
  _md5sum = "cbfcc99842089b6df53d8bc780a97a80"
  _type = "vehicle_msgs/EPS2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID=0x165, Len=8, 20ms
uint8   RollingCountEPS2                                        # EPS2滚动计数值
uint8   DriverSteeringInterferenceDetected                      # 驾驶员干预方向盘检测
uint8   DriverSteeringInterferenceDetectedValidity              # 驾驶员干预方向盘检测有效性
uint8   ElectricalPowerSteeringAvailablityStatus                # EPS可控状态
uint8   ElectricalPowerSteeringAvailablityStatusProtectionValue # EPS可用状态保护算法值
float32 SteeringTorqueAct                                       # 方向盘力矩反馈

"""
  __slots__ = ['RollingCountEPS2','DriverSteeringInterferenceDetected','DriverSteeringInterferenceDetectedValidity','ElectricalPowerSteeringAvailablityStatus','ElectricalPowerSteeringAvailablityStatusProtectionValue','SteeringTorqueAct']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RollingCountEPS2,DriverSteeringInterferenceDetected,DriverSteeringInterferenceDetectedValidity,ElectricalPowerSteeringAvailablityStatus,ElectricalPowerSteeringAvailablityStatusProtectionValue,SteeringTorqueAct

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EPS2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.RollingCountEPS2 is None:
        self.RollingCountEPS2 = 0
      if self.DriverSteeringInterferenceDetected is None:
        self.DriverSteeringInterferenceDetected = 0
      if self.DriverSteeringInterferenceDetectedValidity is None:
        self.DriverSteeringInterferenceDetectedValidity = 0
      if self.ElectricalPowerSteeringAvailablityStatus is None:
        self.ElectricalPowerSteeringAvailablityStatus = 0
      if self.ElectricalPowerSteeringAvailablityStatusProtectionValue is None:
        self.ElectricalPowerSteeringAvailablityStatusProtectionValue = 0
      if self.SteeringTorqueAct is None:
        self.SteeringTorqueAct = 0.
    else:
      self.RollingCountEPS2 = 0
      self.DriverSteeringInterferenceDetected = 0
      self.DriverSteeringInterferenceDetectedValidity = 0
      self.ElectricalPowerSteeringAvailablityStatus = 0
      self.ElectricalPowerSteeringAvailablityStatusProtectionValue = 0
      self.SteeringTorqueAct = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5Bf().pack(_x.RollingCountEPS2, _x.DriverSteeringInterferenceDetected, _x.DriverSteeringInterferenceDetectedValidity, _x.ElectricalPowerSteeringAvailablityStatus, _x.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.SteeringTorqueAct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.RollingCountEPS2, _x.DriverSteeringInterferenceDetected, _x.DriverSteeringInterferenceDetectedValidity, _x.ElectricalPowerSteeringAvailablityStatus, _x.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.SteeringTorqueAct,) = _get_struct_5Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5Bf().pack(_x.RollingCountEPS2, _x.DriverSteeringInterferenceDetected, _x.DriverSteeringInterferenceDetectedValidity, _x.ElectricalPowerSteeringAvailablityStatus, _x.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.SteeringTorqueAct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.RollingCountEPS2, _x.DriverSteeringInterferenceDetected, _x.DriverSteeringInterferenceDetectedValidity, _x.ElectricalPowerSteeringAvailablityStatus, _x.ElectricalPowerSteeringAvailablityStatusProtectionValue, _x.SteeringTorqueAct,) = _get_struct_5Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5Bf = None
def _get_struct_5Bf():
    global _struct_5Bf
    if _struct_5Bf is None:
        _struct_5Bf = struct.Struct("<5Bf")
    return _struct_5Bf
