# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/EMS1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EMS1(genpy.Message):
  _md5sum = "616efb498ace6d9e7e9bb3f7ddd2f36e"
  _type = "vehicle_msgs/EMS1"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID=0x083, Len=8, 10ms
float32 ThrottlePosFeedback          # 发送机节气门开度反馈
float32 EngSpd                       # 发送机转速
float32 ActualAccPedal               # 物理油门踏板开度
uint8   AutoDriveStatus              # 自动驾驶功能状态
uint8   EngSpdSignalErrFlag          # 发动机转速信号错误标志
uint8   AccPedalInterventEnable      # 油门踏板干预使能
uint8   RollingCountEMS1             # EMS1滚动计数值
uint8   CheckSumEMS1                 # EMS1校验值 
"""
  __slots__ = ['ThrottlePosFeedback','EngSpd','ActualAccPedal','AutoDriveStatus','EngSpdSignalErrFlag','AccPedalInterventEnable','RollingCountEMS1','CheckSumEMS1']
  _slot_types = ['float32','float32','float32','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ThrottlePosFeedback,EngSpd,ActualAccPedal,AutoDriveStatus,EngSpdSignalErrFlag,AccPedalInterventEnable,RollingCountEMS1,CheckSumEMS1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EMS1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ThrottlePosFeedback is None:
        self.ThrottlePosFeedback = 0.
      if self.EngSpd is None:
        self.EngSpd = 0.
      if self.ActualAccPedal is None:
        self.ActualAccPedal = 0.
      if self.AutoDriveStatus is None:
        self.AutoDriveStatus = 0
      if self.EngSpdSignalErrFlag is None:
        self.EngSpdSignalErrFlag = 0
      if self.AccPedalInterventEnable is None:
        self.AccPedalInterventEnable = 0
      if self.RollingCountEMS1 is None:
        self.RollingCountEMS1 = 0
      if self.CheckSumEMS1 is None:
        self.CheckSumEMS1 = 0
    else:
      self.ThrottlePosFeedback = 0.
      self.EngSpd = 0.
      self.ActualAccPedal = 0.
      self.AutoDriveStatus = 0
      self.EngSpdSignalErrFlag = 0
      self.AccPedalInterventEnable = 0
      self.RollingCountEMS1 = 0
      self.CheckSumEMS1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f5B().pack(_x.ThrottlePosFeedback, _x.EngSpd, _x.ActualAccPedal, _x.AutoDriveStatus, _x.EngSpdSignalErrFlag, _x.AccPedalInterventEnable, _x.RollingCountEMS1, _x.CheckSumEMS1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.ThrottlePosFeedback, _x.EngSpd, _x.ActualAccPedal, _x.AutoDriveStatus, _x.EngSpdSignalErrFlag, _x.AccPedalInterventEnable, _x.RollingCountEMS1, _x.CheckSumEMS1,) = _get_struct_3f5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f5B().pack(_x.ThrottlePosFeedback, _x.EngSpd, _x.ActualAccPedal, _x.AutoDriveStatus, _x.EngSpdSignalErrFlag, _x.AccPedalInterventEnable, _x.RollingCountEMS1, _x.CheckSumEMS1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.ThrottlePosFeedback, _x.EngSpd, _x.ActualAccPedal, _x.AutoDriveStatus, _x.EngSpdSignalErrFlag, _x.AccPedalInterventEnable, _x.RollingCountEMS1, _x.CheckSumEMS1,) = _get_struct_3f5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f5B = None
def _get_struct_3f5B():
    global _struct_3f5B
    if _struct_3f5B is None:
        _struct_3f5B = struct.Struct("<3f5B")
    return _struct_3f5B
