# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/ESC4.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ESC4(genpy.Message):
  _md5sum = "4b72d589ceec9edf1fed7767832d6e76"
  _type = "vehicle_msgs/ESC4"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID=0x0A6, Len=8, 10ms
uint16  FLWheelPulseCounter          # 左前轮速脉冲信号
uint16  FRWheelPulseCounter          # 右前轮速脉冲信号
uint16  RLWheelPulseCounter          # 左后轮速脉冲信号
uint16  RRWheelPulseCounter          # 右后轮速脉冲信号
uint8   FLWheelPulseCounterValidity  # 左前轮速脉冲信号有效标志
uint8   FRWheelPulseCounterValidity  # 右前轮速脉冲信号有效标志
float32 LongitudinalAcceleration     # 纵向加速度
uint8   RLWheelPulseCounterValidity  # 左后轮速脉冲信号有效标志
uint8   RRWheelPulseCounterValidity  # 右后轮速脉冲信号有效标志
uint8   LongitudinalAccelerationFlag # 纵向加速度标识

"""
  __slots__ = ['FLWheelPulseCounter','FRWheelPulseCounter','RLWheelPulseCounter','RRWheelPulseCounter','FLWheelPulseCounterValidity','FRWheelPulseCounterValidity','LongitudinalAcceleration','RLWheelPulseCounterValidity','RRWheelPulseCounterValidity','LongitudinalAccelerationFlag']
  _slot_types = ['uint16','uint16','uint16','uint16','uint8','uint8','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FLWheelPulseCounter,FRWheelPulseCounter,RLWheelPulseCounter,RRWheelPulseCounter,FLWheelPulseCounterValidity,FRWheelPulseCounterValidity,LongitudinalAcceleration,RLWheelPulseCounterValidity,RRWheelPulseCounterValidity,LongitudinalAccelerationFlag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ESC4, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.FLWheelPulseCounter is None:
        self.FLWheelPulseCounter = 0
      if self.FRWheelPulseCounter is None:
        self.FRWheelPulseCounter = 0
      if self.RLWheelPulseCounter is None:
        self.RLWheelPulseCounter = 0
      if self.RRWheelPulseCounter is None:
        self.RRWheelPulseCounter = 0
      if self.FLWheelPulseCounterValidity is None:
        self.FLWheelPulseCounterValidity = 0
      if self.FRWheelPulseCounterValidity is None:
        self.FRWheelPulseCounterValidity = 0
      if self.LongitudinalAcceleration is None:
        self.LongitudinalAcceleration = 0.
      if self.RLWheelPulseCounterValidity is None:
        self.RLWheelPulseCounterValidity = 0
      if self.RRWheelPulseCounterValidity is None:
        self.RRWheelPulseCounterValidity = 0
      if self.LongitudinalAccelerationFlag is None:
        self.LongitudinalAccelerationFlag = 0
    else:
      self.FLWheelPulseCounter = 0
      self.FRWheelPulseCounter = 0
      self.RLWheelPulseCounter = 0
      self.RRWheelPulseCounter = 0
      self.FLWheelPulseCounterValidity = 0
      self.FRWheelPulseCounterValidity = 0
      self.LongitudinalAcceleration = 0.
      self.RLWheelPulseCounterValidity = 0
      self.RRWheelPulseCounterValidity = 0
      self.LongitudinalAccelerationFlag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H2Bf3B().pack(_x.FLWheelPulseCounter, _x.FRWheelPulseCounter, _x.RLWheelPulseCounter, _x.RRWheelPulseCounter, _x.FLWheelPulseCounterValidity, _x.FRWheelPulseCounterValidity, _x.LongitudinalAcceleration, _x.RLWheelPulseCounterValidity, _x.RRWheelPulseCounterValidity, _x.LongitudinalAccelerationFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.FLWheelPulseCounter, _x.FRWheelPulseCounter, _x.RLWheelPulseCounter, _x.RRWheelPulseCounter, _x.FLWheelPulseCounterValidity, _x.FRWheelPulseCounterValidity, _x.LongitudinalAcceleration, _x.RLWheelPulseCounterValidity, _x.RRWheelPulseCounterValidity, _x.LongitudinalAccelerationFlag,) = _get_struct_4H2Bf3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H2Bf3B().pack(_x.FLWheelPulseCounter, _x.FRWheelPulseCounter, _x.RLWheelPulseCounter, _x.RRWheelPulseCounter, _x.FLWheelPulseCounterValidity, _x.FRWheelPulseCounterValidity, _x.LongitudinalAcceleration, _x.RLWheelPulseCounterValidity, _x.RRWheelPulseCounterValidity, _x.LongitudinalAccelerationFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.FLWheelPulseCounter, _x.FRWheelPulseCounter, _x.RLWheelPulseCounter, _x.RRWheelPulseCounter, _x.FLWheelPulseCounterValidity, _x.FRWheelPulseCounterValidity, _x.LongitudinalAcceleration, _x.RLWheelPulseCounterValidity, _x.RRWheelPulseCounterValidity, _x.LongitudinalAccelerationFlag,) = _get_struct_4H2Bf3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H2Bf3B = None
def _get_struct_4H2Bf3B():
    global _struct_4H2Bf3B
    if _struct_4H2Bf3B is None:
        _struct_4H2Bf3B = struct.Struct("<4H2Bf3B")
    return _struct_4H2Bf3B
