# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/VEHICLE_OBJ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VEHICLE_OBJ(genpy.Message):
  _md5sum = "67a67a234b6a2cac1649aefedf54db2d"
  _type = "vehicle_msgs/VEHICLE_OBJ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 VehicleID
int32 CenterX         # cm
int32 CenterY
int32 Speed           # cm/s
int32 SpeedDirection  # 0.01degree
int32 Height          # cm

int32 Convexhull_VertexNumber 	#边界顶点数量
int32[50] ConvexhullX		#边界顶点坐标X
int32[50] ConvexhullY 

"""
  __slots__ = ['VehicleID','CenterX','CenterY','Speed','SpeedDirection','Height','Convexhull_VertexNumber','ConvexhullX','ConvexhullY']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32[50]','int32[50]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       VehicleID,CenterX,CenterY,Speed,SpeedDirection,Height,Convexhull_VertexNumber,ConvexhullX,ConvexhullY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VEHICLE_OBJ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.VehicleID is None:
        self.VehicleID = 0
      if self.CenterX is None:
        self.CenterX = 0
      if self.CenterY is None:
        self.CenterY = 0
      if self.Speed is None:
        self.Speed = 0
      if self.SpeedDirection is None:
        self.SpeedDirection = 0
      if self.Height is None:
        self.Height = 0
      if self.Convexhull_VertexNumber is None:
        self.Convexhull_VertexNumber = 0
      if self.ConvexhullX is None:
        self.ConvexhullX = [0] * 50
      if self.ConvexhullY is None:
        self.ConvexhullY = [0] * 50
    else:
      self.VehicleID = 0
      self.CenterX = 0
      self.CenterY = 0
      self.Speed = 0
      self.SpeedDirection = 0
      self.Height = 0
      self.Convexhull_VertexNumber = 0
      self.ConvexhullX = [0] * 50
      self.ConvexhullY = [0] * 50

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber))
      buff.write(_get_struct_50i().pack(*self.ConvexhullX))
      buff.write(_get_struct_50i().pack(*self.ConvexhullY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber,) = _get_struct_7i().unpack(str[start:end])
      start = end
      end += 200
      self.ConvexhullX = _get_struct_50i().unpack(str[start:end])
      start = end
      end += 200
      self.ConvexhullY = _get_struct_50i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber))
      buff.write(self.ConvexhullX.tostring())
      buff.write(self.ConvexhullY.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.VehicleID, _x.CenterX, _x.CenterY, _x.Speed, _x.SpeedDirection, _x.Height, _x.Convexhull_VertexNumber,) = _get_struct_7i().unpack(str[start:end])
      start = end
      end += 200
      self.ConvexhullX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.ConvexhullY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
_struct_50i = None
def _get_struct_50i():
    global _struct_50i
    if _struct_50i is None:
        _struct_50i = struct.Struct("<50i")
    return _struct_50i
