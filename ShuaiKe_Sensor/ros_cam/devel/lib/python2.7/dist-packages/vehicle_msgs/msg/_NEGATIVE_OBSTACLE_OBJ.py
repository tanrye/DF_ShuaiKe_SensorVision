# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/NEGATIVE_OBSTACLE_OBJ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NEGATIVE_OBSTACLE_OBJ(genpy.Message):
  _md5sum = "ea31db64d0c73cb8bc9813012d7fbcf6"
  _type = "vehicle_msgs/NEGATIVE_OBSTACLE_OBJ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 NegObID
int32 CenterX    #cm为单位，惯导坐标系
int32 CenterY
int32 AxisX      #长轴，cm为单位
int32 AxisY      #短轴，cm为单位
int32 Slope      # 斜率，0.01度，逆时针为正

"""
  __slots__ = ['NegObID','CenterX','CenterY','AxisX','AxisY','Slope']
  _slot_types = ['int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       NegObID,CenterX,CenterY,AxisX,AxisY,Slope

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NEGATIVE_OBSTACLE_OBJ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.NegObID is None:
        self.NegObID = 0
      if self.CenterX is None:
        self.CenterX = 0
      if self.CenterY is None:
        self.CenterY = 0
      if self.AxisX is None:
        self.AxisX = 0
      if self.AxisY is None:
        self.AxisY = 0
      if self.Slope is None:
        self.Slope = 0
    else:
      self.NegObID = 0
      self.CenterX = 0
      self.CenterY = 0
      self.AxisX = 0
      self.AxisY = 0
      self.Slope = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope,) = _get_struct_6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.NegObID, _x.CenterX, _x.CenterY, _x.AxisX, _x.AxisY, _x.Slope,) = _get_struct_6i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
