# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/HAD1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HAD1(genpy.Message):
  _md5sum = "3a4fd349ffc9c43ab3924ec0f15197f0"
  _type = "vehicle_msgs/HAD1"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ID=0x080, Len=8, 10ms
float32 ElectricAccPedal      #  模拟加速踏板需求信号
float32 AngleWheel            #  期望方向盘转角
float32 BrakeReq              #  制动减速度请求
uint16  AnglularAccleration   #  期望方向盘转角速度
uint8   AutoDriveEnable       #  自动驾驶使能信号
uint8   EPBParkingReq         #  HAD控制EPB驻车指令
uint8   RollingCountHAD1      #  HAD1滚动计数值
uint8   CheckSumHAD1          #  HAD1校验值


"""
  __slots__ = ['ElectricAccPedal','AngleWheel','BrakeReq','AnglularAccleration','AutoDriveEnable','EPBParkingReq','RollingCountHAD1','CheckSumHAD1']
  _slot_types = ['float32','float32','float32','uint16','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ElectricAccPedal,AngleWheel,BrakeReq,AnglularAccleration,AutoDriveEnable,EPBParkingReq,RollingCountHAD1,CheckSumHAD1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HAD1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ElectricAccPedal is None:
        self.ElectricAccPedal = 0.
      if self.AngleWheel is None:
        self.AngleWheel = 0.
      if self.BrakeReq is None:
        self.BrakeReq = 0.
      if self.AnglularAccleration is None:
        self.AnglularAccleration = 0
      if self.AutoDriveEnable is None:
        self.AutoDriveEnable = 0
      if self.EPBParkingReq is None:
        self.EPBParkingReq = 0
      if self.RollingCountHAD1 is None:
        self.RollingCountHAD1 = 0
      if self.CheckSumHAD1 is None:
        self.CheckSumHAD1 = 0
    else:
      self.ElectricAccPedal = 0.
      self.AngleWheel = 0.
      self.BrakeReq = 0.
      self.AnglularAccleration = 0
      self.AutoDriveEnable = 0
      self.EPBParkingReq = 0
      self.RollingCountHAD1 = 0
      self.CheckSumHAD1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fH4B().pack(_x.ElectricAccPedal, _x.AngleWheel, _x.BrakeReq, _x.AnglularAccleration, _x.AutoDriveEnable, _x.EPBParkingReq, _x.RollingCountHAD1, _x.CheckSumHAD1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.ElectricAccPedal, _x.AngleWheel, _x.BrakeReq, _x.AnglularAccleration, _x.AutoDriveEnable, _x.EPBParkingReq, _x.RollingCountHAD1, _x.CheckSumHAD1,) = _get_struct_3fH4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fH4B().pack(_x.ElectricAccPedal, _x.AngleWheel, _x.BrakeReq, _x.AnglularAccleration, _x.AutoDriveEnable, _x.EPBParkingReq, _x.RollingCountHAD1, _x.CheckSumHAD1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.ElectricAccPedal, _x.AngleWheel, _x.BrakeReq, _x.AnglularAccleration, _x.AutoDriveEnable, _x.EPBParkingReq, _x.RollingCountHAD1, _x.CheckSumHAD1,) = _get_struct_3fH4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fH4B = None
def _get_struct_3fH4B():
    global _struct_3fH4B
    if _struct_3fH4B is None:
        _struct_3fH4B = struct.Struct("<3fH4B")
    return _struct_3fH4B
