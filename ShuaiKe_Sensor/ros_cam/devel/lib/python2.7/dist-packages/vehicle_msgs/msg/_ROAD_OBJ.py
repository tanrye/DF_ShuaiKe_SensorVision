# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/ROAD_OBJ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ROAD_OBJ(genpy.Message):
  _md5sum = "0368fe6ff623a2ad6dd68cf53a6c57f8"
  _type = "vehicle_msgs/ROAD_OBJ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 RoadID   #1 yellow
int32 LeftPtNum
int32 RightPtNum
int32[50] LeftEdgePtX   #cm
int32[50] LeftEdgePtY   #cm
int32[50] RightEdgePtX  #cm
int32[50] RightEdgePtY  #cm

"""
  __slots__ = ['RoadID','LeftPtNum','RightPtNum','LeftEdgePtX','LeftEdgePtY','RightEdgePtX','RightEdgePtY']
  _slot_types = ['int32','int32','int32','int32[50]','int32[50]','int32[50]','int32[50]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RoadID,LeftPtNum,RightPtNum,LeftEdgePtX,LeftEdgePtY,RightEdgePtX,RightEdgePtY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ROAD_OBJ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.RoadID is None:
        self.RoadID = 0
      if self.LeftPtNum is None:
        self.LeftPtNum = 0
      if self.RightPtNum is None:
        self.RightPtNum = 0
      if self.LeftEdgePtX is None:
        self.LeftEdgePtX = [0] * 50
      if self.LeftEdgePtY is None:
        self.LeftEdgePtY = [0] * 50
      if self.RightEdgePtX is None:
        self.RightEdgePtX = [0] * 50
      if self.RightEdgePtY is None:
        self.RightEdgePtY = [0] * 50
    else:
      self.RoadID = 0
      self.LeftPtNum = 0
      self.RightPtNum = 0
      self.LeftEdgePtX = [0] * 50
      self.LeftEdgePtY = [0] * 50
      self.RightEdgePtX = [0] * 50
      self.RightEdgePtY = [0] * 50

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.RoadID, _x.LeftPtNum, _x.RightPtNum))
      buff.write(_get_struct_50i().pack(*self.LeftEdgePtX))
      buff.write(_get_struct_50i().pack(*self.LeftEdgePtY))
      buff.write(_get_struct_50i().pack(*self.RightEdgePtX))
      buff.write(_get_struct_50i().pack(*self.RightEdgePtY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.RoadID, _x.LeftPtNum, _x.RightPtNum,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 200
      self.LeftEdgePtX = _get_struct_50i().unpack(str[start:end])
      start = end
      end += 200
      self.LeftEdgePtY = _get_struct_50i().unpack(str[start:end])
      start = end
      end += 200
      self.RightEdgePtX = _get_struct_50i().unpack(str[start:end])
      start = end
      end += 200
      self.RightEdgePtY = _get_struct_50i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.RoadID, _x.LeftPtNum, _x.RightPtNum))
      buff.write(self.LeftEdgePtX.tostring())
      buff.write(self.LeftEdgePtY.tostring())
      buff.write(self.RightEdgePtX.tostring())
      buff.write(self.RightEdgePtY.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.RoadID, _x.LeftPtNum, _x.RightPtNum,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 200
      self.LeftEdgePtX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.LeftEdgePtY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.RightEdgePtX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      start = end
      end += 200
      self.RightEdgePtY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=50)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_50i = None
def _get_struct_50i():
    global _struct_50i
    if _struct_50i is None:
        _struct_50i = struct.Struct("<50i")
    return _struct_50i
