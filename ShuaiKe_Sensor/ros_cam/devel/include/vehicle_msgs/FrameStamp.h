// Generated by gencpp from file vehicle_msgs/FrameStamp.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_FRAMESTAMP_H
#define VEHICLE_MSGS_MESSAGE_FRAMESTAMP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct FrameStamp_
{
  typedef FrameStamp_<ContainerAllocator> Type;

  FrameStamp_()
    : header()
    , time(0.0)
    , lat(0.0)
    , lng(0.0)
    , height(0.0)
    , position()
    , orientation()
    , linearSpeed()
    , angularSpeed()  {
      position.assign(0.0);

      orientation.assign(0.0);

      linearSpeed.assign(0.0);

      angularSpeed.assign(0.0);
  }
  FrameStamp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , lat(0.0)
    , lng(0.0)
    , height(0.0)
    , position()
    , orientation()
    , linearSpeed()
    , angularSpeed()  {
  (void)_alloc;
      position.assign(0.0);

      orientation.assign(0.0);

      linearSpeed.assign(0.0);

      angularSpeed.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lng_type;
  _lng_type lng;

   typedef double _height_type;
  _height_type height;

   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef boost::array<double, 3>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<double, 3>  _linearSpeed_type;
  _linearSpeed_type linearSpeed;

   typedef boost::array<double, 3>  _angularSpeed_type;
  _angularSpeed_type angularSpeed;





  typedef boost::shared_ptr< ::vehicle_msgs::FrameStamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::FrameStamp_<ContainerAllocator> const> ConstPtr;

}; // struct FrameStamp_

typedef ::vehicle_msgs::FrameStamp_<std::allocator<void> > FrameStamp;

typedef boost::shared_ptr< ::vehicle_msgs::FrameStamp > FrameStampPtr;
typedef boost::shared_ptr< ::vehicle_msgs::FrameStamp const> FrameStampConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::FrameStamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::FrameStamp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::FrameStamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::FrameStamp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e2f864d2e9f071288ea5ded23c18913";
  }

  static const char* value(const ::vehicle_msgs::FrameStamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e2f864d2e9f0712ULL;
  static const uint64_t static_value2 = 0x88ea5ded23c18913ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/FrameStamp";
  }

  static const char* value(const ::vehicle_msgs::FrameStamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#MSG FrameStamp\n\
Header header\n\
float64 time\n\
float64  lat\n\
float64  lng\n\
float64  height\n\
float64[3] position\n\
float64[3] orientation\n\
float64[3] linearSpeed\n\
float64[3] angularSpeed \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::vehicle_msgs::FrameStamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.lat);
      stream.next(m.lng);
      stream.next(m.height);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.linearSpeed);
      stream.next(m.angularSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrameStamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::FrameStamp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<double>::stream(s, indent + "  ", v.lng);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "linearSpeed[]" << std::endl;
    for (size_t i = 0; i < v.linearSpeed.size(); ++i)
    {
      s << indent << "  linearSpeed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linearSpeed[i]);
    }
    s << indent << "angularSpeed[]" << std::endl;
    for (size_t i = 0; i < v.angularSpeed.size(); ++i)
    {
      s << indent << "  angularSpeed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angularSpeed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_FRAMESTAMP_H
