// Generated by gencpp from file vehicle_msgs/EMS5.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_EMS5_H
#define VEHICLE_MSGS_MESSAGE_EMS5_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct EMS5_
{
  typedef EMS5_<ContainerAllocator> Type;

  EMS5_()
    : BrakePedalSignal(0)
    , AccPedalFaultFlag(0)
    , RollingCountEMS5(0)
    , AccPedalPos(0.0)
    , CheckSumEMS5(0)  {
    }
  EMS5_(const ContainerAllocator& _alloc)
    : BrakePedalSignal(0)
    , AccPedalFaultFlag(0)
    , RollingCountEMS5(0)
    , AccPedalPos(0.0)
    , CheckSumEMS5(0)  {
  (void)_alloc;
    }



   typedef uint8_t _BrakePedalSignal_type;
  _BrakePedalSignal_type BrakePedalSignal;

   typedef uint8_t _AccPedalFaultFlag_type;
  _AccPedalFaultFlag_type AccPedalFaultFlag;

   typedef uint8_t _RollingCountEMS5_type;
  _RollingCountEMS5_type RollingCountEMS5;

   typedef float _AccPedalPos_type;
  _AccPedalPos_type AccPedalPos;

   typedef uint8_t _CheckSumEMS5_type;
  _CheckSumEMS5_type CheckSumEMS5;





  typedef boost::shared_ptr< ::vehicle_msgs::EMS5_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::EMS5_<ContainerAllocator> const> ConstPtr;

}; // struct EMS5_

typedef ::vehicle_msgs::EMS5_<std::allocator<void> > EMS5;

typedef boost::shared_ptr< ::vehicle_msgs::EMS5 > EMS5Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::EMS5 const> EMS5ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::EMS5_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::EMS5_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::EMS5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::EMS5_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::EMS5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::EMS5_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::EMS5_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::EMS5_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::EMS5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd438c509bd33c2fdc3156e68bbb6b7a";
  }

  static const char* value(const ::vehicle_msgs::EMS5_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd438c509bd33c2fULL;
  static const uint64_t static_value2 = 0xdc3156e68bbb6b7aULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::EMS5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/EMS5";
  }

  static const char* value(const ::vehicle_msgs::EMS5_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::EMS5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x0E0, Len=8, 20ms\n\
uint8   BrakePedalSignal             # 制动踏板开关信号\n\
uint8   AccPedalFaultFlag            # 加速踏板信号异常标志\n\
uint8   RollingCountEMS5             # EMS5滚动计数值\n\
float32 AccPedalPos                  # 加速踏板位置\n\
uint8   CheckSumEMS5                 # EMS5校验值 \n\
";
  }

  static const char* value(const ::vehicle_msgs::EMS5_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::EMS5_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BrakePedalSignal);
      stream.next(m.AccPedalFaultFlag);
      stream.next(m.RollingCountEMS5);
      stream.next(m.AccPedalPos);
      stream.next(m.CheckSumEMS5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EMS5_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::EMS5_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::EMS5_<ContainerAllocator>& v)
  {
    s << indent << "BrakePedalSignal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BrakePedalSignal);
    s << indent << "AccPedalFaultFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccPedalFaultFlag);
    s << indent << "RollingCountEMS5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RollingCountEMS5);
    s << indent << "AccPedalPos: ";
    Printer<float>::stream(s, indent + "  ", v.AccPedalPos);
    s << indent << "CheckSumEMS5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CheckSumEMS5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_EMS5_H
