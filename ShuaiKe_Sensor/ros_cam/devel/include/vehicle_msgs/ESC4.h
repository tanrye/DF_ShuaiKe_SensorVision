// Generated by gencpp from file vehicle_msgs/ESC4.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_ESC4_H
#define VEHICLE_MSGS_MESSAGE_ESC4_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct ESC4_
{
  typedef ESC4_<ContainerAllocator> Type;

  ESC4_()
    : FLWheelPulseCounter(0)
    , FRWheelPulseCounter(0)
    , RLWheelPulseCounter(0)
    , RRWheelPulseCounter(0)
    , FLWheelPulseCounterValidity(0)
    , FRWheelPulseCounterValidity(0)
    , LongitudinalAcceleration(0.0)
    , RLWheelPulseCounterValidity(0)
    , RRWheelPulseCounterValidity(0)
    , LongitudinalAccelerationFlag(0)  {
    }
  ESC4_(const ContainerAllocator& _alloc)
    : FLWheelPulseCounter(0)
    , FRWheelPulseCounter(0)
    , RLWheelPulseCounter(0)
    , RRWheelPulseCounter(0)
    , FLWheelPulseCounterValidity(0)
    , FRWheelPulseCounterValidity(0)
    , LongitudinalAcceleration(0.0)
    , RLWheelPulseCounterValidity(0)
    , RRWheelPulseCounterValidity(0)
    , LongitudinalAccelerationFlag(0)  {
  (void)_alloc;
    }



   typedef uint16_t _FLWheelPulseCounter_type;
  _FLWheelPulseCounter_type FLWheelPulseCounter;

   typedef uint16_t _FRWheelPulseCounter_type;
  _FRWheelPulseCounter_type FRWheelPulseCounter;

   typedef uint16_t _RLWheelPulseCounter_type;
  _RLWheelPulseCounter_type RLWheelPulseCounter;

   typedef uint16_t _RRWheelPulseCounter_type;
  _RRWheelPulseCounter_type RRWheelPulseCounter;

   typedef uint8_t _FLWheelPulseCounterValidity_type;
  _FLWheelPulseCounterValidity_type FLWheelPulseCounterValidity;

   typedef uint8_t _FRWheelPulseCounterValidity_type;
  _FRWheelPulseCounterValidity_type FRWheelPulseCounterValidity;

   typedef float _LongitudinalAcceleration_type;
  _LongitudinalAcceleration_type LongitudinalAcceleration;

   typedef uint8_t _RLWheelPulseCounterValidity_type;
  _RLWheelPulseCounterValidity_type RLWheelPulseCounterValidity;

   typedef uint8_t _RRWheelPulseCounterValidity_type;
  _RRWheelPulseCounterValidity_type RRWheelPulseCounterValidity;

   typedef uint8_t _LongitudinalAccelerationFlag_type;
  _LongitudinalAccelerationFlag_type LongitudinalAccelerationFlag;





  typedef boost::shared_ptr< ::vehicle_msgs::ESC4_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::ESC4_<ContainerAllocator> const> ConstPtr;

}; // struct ESC4_

typedef ::vehicle_msgs::ESC4_<std::allocator<void> > ESC4;

typedef boost::shared_ptr< ::vehicle_msgs::ESC4 > ESC4Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::ESC4 const> ESC4ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::ESC4_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::ESC4_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ESC4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ESC4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ESC4_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ESC4_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ESC4_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ESC4_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::ESC4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b72d589ceec9edf1fed7767832d6e76";
  }

  static const char* value(const ::vehicle_msgs::ESC4_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b72d589ceec9edfULL;
  static const uint64_t static_value2 = 0x1fed7767832d6e76ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::ESC4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/ESC4";
  }

  static const char* value(const ::vehicle_msgs::ESC4_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::ESC4_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x0A6, Len=8, 10ms\n\
uint16  FLWheelPulseCounter          # 左前轮速脉冲信号\n\
uint16  FRWheelPulseCounter          # 右前轮速脉冲信号\n\
uint16  RLWheelPulseCounter          # 左后轮速脉冲信号\n\
uint16  RRWheelPulseCounter          # 右后轮速脉冲信号\n\
uint8   FLWheelPulseCounterValidity  # 左前轮速脉冲信号有效标志\n\
uint8   FRWheelPulseCounterValidity  # 右前轮速脉冲信号有效标志\n\
float32 LongitudinalAcceleration     # 纵向加速度\n\
uint8   RLWheelPulseCounterValidity  # 左后轮速脉冲信号有效标志\n\
uint8   RRWheelPulseCounterValidity  # 右后轮速脉冲信号有效标志\n\
uint8   LongitudinalAccelerationFlag # 纵向加速度标识\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::ESC4_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::ESC4_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FLWheelPulseCounter);
      stream.next(m.FRWheelPulseCounter);
      stream.next(m.RLWheelPulseCounter);
      stream.next(m.RRWheelPulseCounter);
      stream.next(m.FLWheelPulseCounterValidity);
      stream.next(m.FRWheelPulseCounterValidity);
      stream.next(m.LongitudinalAcceleration);
      stream.next(m.RLWheelPulseCounterValidity);
      stream.next(m.RRWheelPulseCounterValidity);
      stream.next(m.LongitudinalAccelerationFlag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ESC4_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::ESC4_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::ESC4_<ContainerAllocator>& v)
  {
    s << indent << "FLWheelPulseCounter: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.FLWheelPulseCounter);
    s << indent << "FRWheelPulseCounter: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.FRWheelPulseCounter);
    s << indent << "RLWheelPulseCounter: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RLWheelPulseCounter);
    s << indent << "RRWheelPulseCounter: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RRWheelPulseCounter);
    s << indent << "FLWheelPulseCounterValidity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FLWheelPulseCounterValidity);
    s << indent << "FRWheelPulseCounterValidity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FRWheelPulseCounterValidity);
    s << indent << "LongitudinalAcceleration: ";
    Printer<float>::stream(s, indent + "  ", v.LongitudinalAcceleration);
    s << indent << "RLWheelPulseCounterValidity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RLWheelPulseCounterValidity);
    s << indent << "RRWheelPulseCounterValidity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RRWheelPulseCounterValidity);
    s << indent << "LongitudinalAccelerationFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LongitudinalAccelerationFlag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_ESC4_H
