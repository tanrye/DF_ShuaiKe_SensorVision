// Generated by gencpp from file vehicle_msgs/SpeedStatus.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_SPEEDSTATUS_H
#define VEHICLE_MSGS_MESSAGE_SPEEDSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct SpeedStatus_
{
  typedef SpeedStatus_<ContainerAllocator> Type;

  SpeedStatus_()
    : DesiredSpeed(0.0)
    , DesiredAcc(0.0)
    , CurrentSpeed(0.0)
    , CurrentAcc(0.0)
    , DesiredBrake(0.0)
    , CurrentBrake(0.0)
    , DesiredFuel(0.0)
    , CurrentFuel(0.0)
    , DesiredTransPos(0)
    , CurrentTransPos(0)
    , HardSwitchOn(0)
    , EmergenceFlag(0)
    , BcanControlFlag(0)
    , HornOnFlag(0)
    , EmergencyLightonFlag(0)  {
    }
  SpeedStatus_(const ContainerAllocator& _alloc)
    : DesiredSpeed(0.0)
    , DesiredAcc(0.0)
    , CurrentSpeed(0.0)
    , CurrentAcc(0.0)
    , DesiredBrake(0.0)
    , CurrentBrake(0.0)
    , DesiredFuel(0.0)
    , CurrentFuel(0.0)
    , DesiredTransPos(0)
    , CurrentTransPos(0)
    , HardSwitchOn(0)
    , EmergenceFlag(0)
    , BcanControlFlag(0)
    , HornOnFlag(0)
    , EmergencyLightonFlag(0)  {
  (void)_alloc;
    }



   typedef double _DesiredSpeed_type;
  _DesiredSpeed_type DesiredSpeed;

   typedef double _DesiredAcc_type;
  _DesiredAcc_type DesiredAcc;

   typedef double _CurrentSpeed_type;
  _CurrentSpeed_type CurrentSpeed;

   typedef double _CurrentAcc_type;
  _CurrentAcc_type CurrentAcc;

   typedef double _DesiredBrake_type;
  _DesiredBrake_type DesiredBrake;

   typedef double _CurrentBrake_type;
  _CurrentBrake_type CurrentBrake;

   typedef double _DesiredFuel_type;
  _DesiredFuel_type DesiredFuel;

   typedef double _CurrentFuel_type;
  _CurrentFuel_type CurrentFuel;

   typedef int32_t _DesiredTransPos_type;
  _DesiredTransPos_type DesiredTransPos;

   typedef int32_t _CurrentTransPos_type;
  _CurrentTransPos_type CurrentTransPos;

   typedef int32_t _HardSwitchOn_type;
  _HardSwitchOn_type HardSwitchOn;

   typedef int32_t _EmergenceFlag_type;
  _EmergenceFlag_type EmergenceFlag;

   typedef int32_t _BcanControlFlag_type;
  _BcanControlFlag_type BcanControlFlag;

   typedef int32_t _HornOnFlag_type;
  _HornOnFlag_type HornOnFlag;

   typedef int32_t _EmergencyLightonFlag_type;
  _EmergencyLightonFlag_type EmergencyLightonFlag;





  typedef boost::shared_ptr< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedStatus_

typedef ::vehicle_msgs::SpeedStatus_<std::allocator<void> > SpeedStatus;

typedef boost::shared_ptr< ::vehicle_msgs::SpeedStatus > SpeedStatusPtr;
typedef boost::shared_ptr< ::vehicle_msgs::SpeedStatus const> SpeedStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::SpeedStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91bbb94b1c08c13aa4b81b868ef0ac37";
  }

  static const char* value(const ::vehicle_msgs::SpeedStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91bbb94b1c08c13aULL;
  static const uint64_t static_value2 = 0xa4b81b868ef0ac37ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/SpeedStatus";
  }

  static const char* value(const ::vehicle_msgs::SpeedStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 DesiredSpeed\n\
float64 DesiredAcc\n\
float64 CurrentSpeed\n\
float64 CurrentAcc\n\
float64 DesiredBrake\n\
float64 CurrentBrake\n\
float64 DesiredFuel\n\
float64 CurrentFuel\n\
int32 DesiredTransPos\n\
int32 CurrentTransPos\n\
int32 HardSwitchOn\n\
int32 EmergenceFlag\n\
int32 BcanControlFlag\n\
int32 HornOnFlag\n\
int32 EmergencyLightonFlag\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::SpeedStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DesiredSpeed);
      stream.next(m.DesiredAcc);
      stream.next(m.CurrentSpeed);
      stream.next(m.CurrentAcc);
      stream.next(m.DesiredBrake);
      stream.next(m.CurrentBrake);
      stream.next(m.DesiredFuel);
      stream.next(m.CurrentFuel);
      stream.next(m.DesiredTransPos);
      stream.next(m.CurrentTransPos);
      stream.next(m.HardSwitchOn);
      stream.next(m.EmergenceFlag);
      stream.next(m.BcanControlFlag);
      stream.next(m.HornOnFlag);
      stream.next(m.EmergencyLightonFlag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::SpeedStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::SpeedStatus_<ContainerAllocator>& v)
  {
    s << indent << "DesiredSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.DesiredSpeed);
    s << indent << "DesiredAcc: ";
    Printer<double>::stream(s, indent + "  ", v.DesiredAcc);
    s << indent << "CurrentSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.CurrentSpeed);
    s << indent << "CurrentAcc: ";
    Printer<double>::stream(s, indent + "  ", v.CurrentAcc);
    s << indent << "DesiredBrake: ";
    Printer<double>::stream(s, indent + "  ", v.DesiredBrake);
    s << indent << "CurrentBrake: ";
    Printer<double>::stream(s, indent + "  ", v.CurrentBrake);
    s << indent << "DesiredFuel: ";
    Printer<double>::stream(s, indent + "  ", v.DesiredFuel);
    s << indent << "CurrentFuel: ";
    Printer<double>::stream(s, indent + "  ", v.CurrentFuel);
    s << indent << "DesiredTransPos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DesiredTransPos);
    s << indent << "CurrentTransPos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CurrentTransPos);
    s << indent << "HardSwitchOn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.HardSwitchOn);
    s << indent << "EmergenceFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.EmergenceFlag);
    s << indent << "BcanControlFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.BcanControlFlag);
    s << indent << "HornOnFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.HornOnFlag);
    s << indent << "EmergencyLightonFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.EmergencyLightonFlag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_SPEEDSTATUS_H
