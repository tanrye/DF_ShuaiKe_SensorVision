// Generated by gencpp from file vehicle_msgs/TRAFFIC_SIGN.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_TRAFFIC_SIGN_H
#define VEHICLE_MSGS_MESSAGE_TRAFFIC_SIGN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct TRAFFIC_SIGN_
{
  typedef TRAFFIC_SIGN_<ContainerAllocator> Type;

  TRAFFIC_SIGN_()
    : pos_flag(0)
    , x(0)
    , y(0)
    , sign_type(0)  {
    }
  TRAFFIC_SIGN_(const ContainerAllocator& _alloc)
    : pos_flag(0)
    , x(0)
    , y(0)
    , sign_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _pos_flag_type;
  _pos_flag_type pos_flag;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef uint8_t _sign_type_type;
  _sign_type_type sign_type;





  typedef boost::shared_ptr< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> const> ConstPtr;

}; // struct TRAFFIC_SIGN_

typedef ::vehicle_msgs::TRAFFIC_SIGN_<std::allocator<void> > TRAFFIC_SIGN;

typedef boost::shared_ptr< ::vehicle_msgs::TRAFFIC_SIGN > TRAFFIC_SIGNPtr;
typedef boost::shared_ptr< ::vehicle_msgs::TRAFFIC_SIGN const> TRAFFIC_SIGNConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3513bee1140afeb245ce4576130c04b8";
  }

  static const char* value(const ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3513bee1140afeb2ULL;
  static const uint64_t static_value2 = 0x45ce4576130c04b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/TRAFFIC_SIGN";
  }

  static const char* value(const ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8             pos_flag       #/*  交通标志位置信息 */\n\
int32                       x              # x坐标，厘米为单位,全局坐标系\n\
int32                       y              # y坐标，厘米为单位,全局坐标系\n\
#int32                       z              # z坐标，厘米为单位,全局坐标系\n\
uint8             sign_type      #/*  交通标志类型信息 */\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_flag);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.sign_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TRAFFIC_SIGN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator>& v)
  {
    s << indent << "pos_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_flag);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "sign_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sign_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_TRAFFIC_SIGN_H
