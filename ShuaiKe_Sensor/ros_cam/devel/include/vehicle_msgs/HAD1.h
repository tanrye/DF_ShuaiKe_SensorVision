// Generated by gencpp from file vehicle_msgs/HAD1.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_HAD1_H
#define VEHICLE_MSGS_MESSAGE_HAD1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct HAD1_
{
  typedef HAD1_<ContainerAllocator> Type;

  HAD1_()
    : ElectricAccPedal(0.0)
    , AngleWheel(0.0)
    , BrakeReq(0.0)
    , AnglularAccleration(0)
    , AutoDriveEnable(0)
    , EPBParkingReq(0)
    , RollingCountHAD1(0)
    , CheckSumHAD1(0)  {
    }
  HAD1_(const ContainerAllocator& _alloc)
    : ElectricAccPedal(0.0)
    , AngleWheel(0.0)
    , BrakeReq(0.0)
    , AnglularAccleration(0)
    , AutoDriveEnable(0)
    , EPBParkingReq(0)
    , RollingCountHAD1(0)
    , CheckSumHAD1(0)  {
  (void)_alloc;
    }



   typedef float _ElectricAccPedal_type;
  _ElectricAccPedal_type ElectricAccPedal;

   typedef float _AngleWheel_type;
  _AngleWheel_type AngleWheel;

   typedef float _BrakeReq_type;
  _BrakeReq_type BrakeReq;

   typedef uint16_t _AnglularAccleration_type;
  _AnglularAccleration_type AnglularAccleration;

   typedef uint8_t _AutoDriveEnable_type;
  _AutoDriveEnable_type AutoDriveEnable;

   typedef uint8_t _EPBParkingReq_type;
  _EPBParkingReq_type EPBParkingReq;

   typedef uint8_t _RollingCountHAD1_type;
  _RollingCountHAD1_type RollingCountHAD1;

   typedef uint8_t _CheckSumHAD1_type;
  _CheckSumHAD1_type CheckSumHAD1;





  typedef boost::shared_ptr< ::vehicle_msgs::HAD1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::HAD1_<ContainerAllocator> const> ConstPtr;

}; // struct HAD1_

typedef ::vehicle_msgs::HAD1_<std::allocator<void> > HAD1;

typedef boost::shared_ptr< ::vehicle_msgs::HAD1 > HAD1Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::HAD1 const> HAD1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::HAD1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::HAD1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::HAD1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::HAD1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::HAD1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::HAD1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::HAD1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::HAD1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::HAD1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a4fd349ffc9c43ab3924ec0f15197f0";
  }

  static const char* value(const ::vehicle_msgs::HAD1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a4fd349ffc9c43aULL;
  static const uint64_t static_value2 = 0xb3924ec0f15197f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::HAD1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/HAD1";
  }

  static const char* value(const ::vehicle_msgs::HAD1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::HAD1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x080, Len=8, 10ms\n\
float32 ElectricAccPedal      #  模拟加速踏板需求信号\n\
float32 AngleWheel            #  期望方向盘转角\n\
float32 BrakeReq              #  制动减速度请求\n\
uint16  AnglularAccleration   #  期望方向盘转角速度\n\
uint8   AutoDriveEnable       #  自动驾驶使能信号\n\
uint8   EPBParkingReq         #  HAD控制EPB驻车指令\n\
uint8   RollingCountHAD1      #  HAD1滚动计数值\n\
uint8   CheckSumHAD1          #  HAD1校验值\n\
\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::HAD1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::HAD1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ElectricAccPedal);
      stream.next(m.AngleWheel);
      stream.next(m.BrakeReq);
      stream.next(m.AnglularAccleration);
      stream.next(m.AutoDriveEnable);
      stream.next(m.EPBParkingReq);
      stream.next(m.RollingCountHAD1);
      stream.next(m.CheckSumHAD1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HAD1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::HAD1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::HAD1_<ContainerAllocator>& v)
  {
    s << indent << "ElectricAccPedal: ";
    Printer<float>::stream(s, indent + "  ", v.ElectricAccPedal);
    s << indent << "AngleWheel: ";
    Printer<float>::stream(s, indent + "  ", v.AngleWheel);
    s << indent << "BrakeReq: ";
    Printer<float>::stream(s, indent + "  ", v.BrakeReq);
    s << indent << "AnglularAccleration: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.AnglularAccleration);
    s << indent << "AutoDriveEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AutoDriveEnable);
    s << indent << "EPBParkingReq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPBParkingReq);
    s << indent << "RollingCountHAD1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RollingCountHAD1);
    s << indent << "CheckSumHAD1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CheckSumHAD1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_HAD1_H
