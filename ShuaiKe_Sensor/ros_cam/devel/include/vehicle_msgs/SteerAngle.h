// Generated by gencpp from file vehicle_msgs/SteerAngle.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_STEERANGLE_H
#define VEHICLE_MSGS_MESSAGE_STEERANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct SteerAngle_
{
  typedef SteerAngle_<ContainerAllocator> Type;

  SteerAngle_()
    : ActualFrontWheelAngle(0.0)
    , DesiredFrontWheelAngle(0.0)
    , ActualCurvature(0.0)
    , DesiredCurvature(0.0)
    , BcanControlFlag(0)
    , LeftLightFlag(0)
    , RightLightFlag(0)  {
    }
  SteerAngle_(const ContainerAllocator& _alloc)
    : ActualFrontWheelAngle(0.0)
    , DesiredFrontWheelAngle(0.0)
    , ActualCurvature(0.0)
    , DesiredCurvature(0.0)
    , BcanControlFlag(0)
    , LeftLightFlag(0)
    , RightLightFlag(0)  {
  (void)_alloc;
    }



   typedef double _ActualFrontWheelAngle_type;
  _ActualFrontWheelAngle_type ActualFrontWheelAngle;

   typedef double _DesiredFrontWheelAngle_type;
  _DesiredFrontWheelAngle_type DesiredFrontWheelAngle;

   typedef double _ActualCurvature_type;
  _ActualCurvature_type ActualCurvature;

   typedef double _DesiredCurvature_type;
  _DesiredCurvature_type DesiredCurvature;

   typedef int32_t _BcanControlFlag_type;
  _BcanControlFlag_type BcanControlFlag;

   typedef int32_t _LeftLightFlag_type;
  _LeftLightFlag_type LeftLightFlag;

   typedef int32_t _RightLightFlag_type;
  _RightLightFlag_type RightLightFlag;





  typedef boost::shared_ptr< ::vehicle_msgs::SteerAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::SteerAngle_<ContainerAllocator> const> ConstPtr;

}; // struct SteerAngle_

typedef ::vehicle_msgs::SteerAngle_<std::allocator<void> > SteerAngle;

typedef boost::shared_ptr< ::vehicle_msgs::SteerAngle > SteerAnglePtr;
typedef boost::shared_ptr< ::vehicle_msgs::SteerAngle const> SteerAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::SteerAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::SteerAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::SteerAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::SteerAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c56a75c37946a45deed88fde498a3fe";
  }

  static const char* value(const ::vehicle_msgs::SteerAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c56a75c37946a45ULL;
  static const uint64_t static_value2 = 0xdeed88fde498a3feULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/SteerAngle";
  }

  static const char* value(const ::vehicle_msgs::SteerAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 ActualFrontWheelAngle\n\
float64 DesiredFrontWheelAngle\n\
float64 ActualCurvature\n\
float64 DesiredCurvature\n\
int32   BcanControlFlag\n\
int32   LeftLightFlag\n\
int32   RightLightFlag\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::SteerAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ActualFrontWheelAngle);
      stream.next(m.DesiredFrontWheelAngle);
      stream.next(m.ActualCurvature);
      stream.next(m.DesiredCurvature);
      stream.next(m.BcanControlFlag);
      stream.next(m.LeftLightFlag);
      stream.next(m.RightLightFlag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SteerAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::SteerAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::SteerAngle_<ContainerAllocator>& v)
  {
    s << indent << "ActualFrontWheelAngle: ";
    Printer<double>::stream(s, indent + "  ", v.ActualFrontWheelAngle);
    s << indent << "DesiredFrontWheelAngle: ";
    Printer<double>::stream(s, indent + "  ", v.DesiredFrontWheelAngle);
    s << indent << "ActualCurvature: ";
    Printer<double>::stream(s, indent + "  ", v.ActualCurvature);
    s << indent << "DesiredCurvature: ";
    Printer<double>::stream(s, indent + "  ", v.DesiredCurvature);
    s << indent << "BcanControlFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.BcanControlFlag);
    s << indent << "LeftLightFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LeftLightFlag);
    s << indent << "RightLightFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RightLightFlag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_STEERANGLE_H
