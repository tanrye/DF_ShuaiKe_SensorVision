// Generated by gencpp from file vehicle_msgs/VEHICLE_OBJ.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_VEHICLE_OBJ_H
#define VEHICLE_MSGS_MESSAGE_VEHICLE_OBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct VEHICLE_OBJ_
{
  typedef VEHICLE_OBJ_<ContainerAllocator> Type;

  VEHICLE_OBJ_()
    : VehicleID(0)
    , CenterX(0)
    , CenterY(0)
    , Speed(0)
    , SpeedDirection(0)
    , Height(0)
    , Convexhull_VertexNumber(0)
    , ConvexhullX()
    , ConvexhullY()  {
      ConvexhullX.assign(0);

      ConvexhullY.assign(0);
  }
  VEHICLE_OBJ_(const ContainerAllocator& _alloc)
    : VehicleID(0)
    , CenterX(0)
    , CenterY(0)
    , Speed(0)
    , SpeedDirection(0)
    , Height(0)
    , Convexhull_VertexNumber(0)
    , ConvexhullX()
    , ConvexhullY()  {
  (void)_alloc;
      ConvexhullX.assign(0);

      ConvexhullY.assign(0);
  }



   typedef int32_t _VehicleID_type;
  _VehicleID_type VehicleID;

   typedef int32_t _CenterX_type;
  _CenterX_type CenterX;

   typedef int32_t _CenterY_type;
  _CenterY_type CenterY;

   typedef int32_t _Speed_type;
  _Speed_type Speed;

   typedef int32_t _SpeedDirection_type;
  _SpeedDirection_type SpeedDirection;

   typedef int32_t _Height_type;
  _Height_type Height;

   typedef int32_t _Convexhull_VertexNumber_type;
  _Convexhull_VertexNumber_type Convexhull_VertexNumber;

   typedef boost::array<int32_t, 50>  _ConvexhullX_type;
  _ConvexhullX_type ConvexhullX;

   typedef boost::array<int32_t, 50>  _ConvexhullY_type;
  _ConvexhullY_type ConvexhullY;





  typedef boost::shared_ptr< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> const> ConstPtr;

}; // struct VEHICLE_OBJ_

typedef ::vehicle_msgs::VEHICLE_OBJ_<std::allocator<void> > VEHICLE_OBJ;

typedef boost::shared_ptr< ::vehicle_msgs::VEHICLE_OBJ > VEHICLE_OBJPtr;
typedef boost::shared_ptr< ::vehicle_msgs::VEHICLE_OBJ const> VEHICLE_OBJConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67a67a234b6a2cac1649aefedf54db2d";
  }

  static const char* value(const ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67a67a234b6a2cacULL;
  static const uint64_t static_value2 = 0x1649aefedf54db2dULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/VEHICLE_OBJ";
  }

  static const char* value(const ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 VehicleID\n\
int32 CenterX         # cm\n\
int32 CenterY\n\
int32 Speed           # cm/s\n\
int32 SpeedDirection  # 0.01degree\n\
int32 Height          # cm\n\
\n\
int32 Convexhull_VertexNumber 	#边界顶点数量\n\
int32[50] ConvexhullX		#边界顶点坐标X\n\
int32[50] ConvexhullY \n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VehicleID);
      stream.next(m.CenterX);
      stream.next(m.CenterY);
      stream.next(m.Speed);
      stream.next(m.SpeedDirection);
      stream.next(m.Height);
      stream.next(m.Convexhull_VertexNumber);
      stream.next(m.ConvexhullX);
      stream.next(m.ConvexhullY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VEHICLE_OBJ_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator>& v)
  {
    s << indent << "VehicleID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VehicleID);
    s << indent << "CenterX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CenterX);
    s << indent << "CenterY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CenterY);
    s << indent << "Speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Speed);
    s << indent << "SpeedDirection: ";
    Printer<int32_t>::stream(s, indent + "  ", v.SpeedDirection);
    s << indent << "Height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Height);
    s << indent << "Convexhull_VertexNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Convexhull_VertexNumber);
    s << indent << "ConvexhullX[]" << std::endl;
    for (size_t i = 0; i < v.ConvexhullX.size(); ++i)
    {
      s << indent << "  ConvexhullX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ConvexhullX[i]);
    }
    s << indent << "ConvexhullY[]" << std::endl;
    for (size_t i = 0; i < v.ConvexhullY.size(); ++i)
    {
      s << indent << "  ConvexhullY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ConvexhullY[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_VEHICLE_OBJ_H
