// Generated by gencpp from file vehicle_msgs/CAMERA_DATA_MSG.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_CAMERA_DATA_MSG_H
#define VEHICLE_MSGS_MESSAGE_CAMERA_DATA_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <vehicle_msgs/FrameStamp.h>
#include <vehicle_msgs/FrameStamp.h>
#include <vehicle_msgs/Camera.h>
#include <vehicle_msgs/Camera_Obj.h>
#include <vehicle_msgs/Camera_Lane.h>

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct CAMERA_DATA_MSG_
{
  typedef CAMERA_DATA_MSG_<ContainerAllocator> Type;

  CAMERA_DATA_MSG_()
    : header()
    , messageID(0)
    , localStamp()
    , globalStamp()
    , camera()
    , camera_obj()
    , camera_lane()  {
    }
  CAMERA_DATA_MSG_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , messageID(0)
    , localStamp(_alloc)
    , globalStamp(_alloc)
    , camera(_alloc)
    , camera_obj()
    , camera_lane(_alloc)  {
  (void)_alloc;
      camera_obj.assign( ::vehicle_msgs::Camera_Obj_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _messageID_type;
  _messageID_type messageID;

   typedef  ::vehicle_msgs::FrameStamp_<ContainerAllocator>  _localStamp_type;
  _localStamp_type localStamp;

   typedef  ::vehicle_msgs::FrameStamp_<ContainerAllocator>  _globalStamp_type;
  _globalStamp_type globalStamp;

   typedef  ::vehicle_msgs::Camera_<ContainerAllocator>  _camera_type;
  _camera_type camera;

   typedef boost::array< ::vehicle_msgs::Camera_Obj_<ContainerAllocator> , 10>  _camera_obj_type;
  _camera_obj_type camera_obj;

   typedef  ::vehicle_msgs::Camera_Lane_<ContainerAllocator>  _camera_lane_type;
  _camera_lane_type camera_lane;





  typedef boost::shared_ptr< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> const> ConstPtr;

}; // struct CAMERA_DATA_MSG_

typedef ::vehicle_msgs::CAMERA_DATA_MSG_<std::allocator<void> > CAMERA_DATA_MSG;

typedef boost::shared_ptr< ::vehicle_msgs::CAMERA_DATA_MSG > CAMERA_DATA_MSGPtr;
typedef boost::shared_ptr< ::vehicle_msgs::CAMERA_DATA_MSG const> CAMERA_DATA_MSGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ca315a7807a0145e94d098512a2541b";
  }

  static const char* value(const ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ca315a7807a0145ULL;
  static const uint64_t static_value2 = 0xe94d098512a2541bULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/CAMERA_DATA_MSG";
  }

  static const char* value(const ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
\n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
 \n\
Camera camera\n\
Camera_Obj[10] camera_obj\n\
Camera_Lane camera_lane\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/FrameStamp\n\
#MSG FrameStamp\n\
Header header\n\
float64 time\n\
float64  lat\n\
float64  lng\n\
float64  height\n\
float64[3] position\n\
float64[3] orientation\n\
float64[3] linearSpeed\n\
float64[3] angularSpeed \n\
\n\
================================================================================\n\
MSG: vehicle_msgs/Camera\n\
Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
 \n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
\n\
int32 camera_numobstacles\n\
float64  VehSpeed\n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/Camera_Obj\n\
Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
\n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
 \n\
int32 camera_obstacle_id\n\
float64 camera_obstacleposx\n\
float64 camera_obstacleposy\n\
int32 blinkerInfo\n\
int32 cut_in_and_out\n\
int32 obstacle_type\n\
int32 obstacle_status\n\
int32 obstacle_valid\n\
int32 obstacles_brake_lights\n\
float64 obstacle_length\n\
float64 obstacle_width\n\
float64 obstacles_velx\n\
\n\
int32 obstacleAge\n\
int32 obstacleLane\n\
int32 CIPVFlag\n\
float64 RadarPosX\n\
float64 RadarVelX\n\
int32 RadarMatchConfidence\n\
int32 MatcheRadarID\n\
\n\
float64 obstacleAngleRate\n\
int32 obstacles_velY\n\
float64 object_Accel_X\n\
int32 obstacleReplaced\n\
float64 obstacleAngle\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/Camera_Lane\n\
Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
\n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
 \n\
int32 l_numoflaneline\n\
int32 l_lanelineid\n\
float64 l_lanepositon\n\
float64 l_lanecurvature\n\
float64 l_lanecurvaturederivative\n\
int32 l_lane_type\n\
float64 l_heading_angle\n\
int32  l_lane_mark_color\n\
int32 l_laneQuality\n\
int32 l_laneWidthMarking\n\
int32 l_laneViewRangStart\n\
int32 l_laneViewRangEnd\n\
int32 l_laneCrossing\n\
int32 l_lanePRED_DIST_BASED_EXTRAPOLATION\n\
int32 l_lanePRED_OTHER_SIDE\n\
int32 l_lanePRED_OVERRIDE\n\
int32 l_lanePRED_OCCLUDED_LM_EXTRAPOLATION\n\
int32 l_lanePRED_HEADWAY_ORIENTED\n\
int32 l_lanePRED_SOURCE_DIVERGING_LANES\n\
int32 l_lanePRED_SOURCE_GUARDRAIL_SHADOW\n\
int32 l_lanePRED_SOURCE_HWE_SPAIN\n\
int32 l_lanePRED_SOURCE_STD\n\
int32 l_lanePRED_SOURCE_VRTL_MERGE\n\
int32 l_laneTCL\n\
\n\
\n\
int32 r_numoflaneline\n\
int32 r_lanelineid\n\
float64 r_lanepositon  \n\
float64 r_lanecurvature  \n\
float64 r_lanecurvaturederivative \n\
int32 r_lane_type\n\
float64 r_heading_angle  \n\
int32  r_lane_mark_color\n\
int32 r_laneQuality\n\
int32 r_laneWidthMarking\n\
int32 r_laneViewRangStart\n\
int32 r_laneViewRangEnd\n\
int32 r_laneCrossing\n\
int32 r_lanePRED_DIST_BASED_EXTRAPOLATION\n\
int32 r_lanePRED_OTHER_SIDE\n\
int32 r_lanePRED_OVERRIDE\n\
int32 r_lanePRED_OCCLUDED_LM_EXTRAPOLATION\n\
int32 r_lanePRED_HEADWAY_ORIENTED\n\
int32 r_lanePRED_SOURCE_DIVERGING_LANES\n\
int32 r_lanePRED_SOURCE_GUARDRAIL_SHADOW\n\
int32 r_lanePRED_SOURCE_HWE_SPAIN\n\
int32 r_lanePRED_SOURCE_STD\n\
int32 r_lanePRED_SOURCE_VRTL_MERGE\n\
int32 r_laneTCL\n\
\n\
\n\
int32 next_l_laneViewRangStart\n\
int32 next_l_laneViewRangEnd\n\
int32 next_l_numoflaneline\n\
int32 next_l_lanelineid\n\
float64 next_l_lanepositon\n\
float64  next_l_lanecurvature\n\
float64 next_l_lanecurvaturederivative\n\
int32 next_l_lane_type\n\
float64 next_l_heading_angle\n\
int32  next_l_lane_mark_color\n\
int32 next_l_laneQuality\n\
int32 next_l_laneWidthMarking\n\
\n\
int32 next_r_laneViewRangStart\n\
int32 next_r_laneViewRangEnd\n\
int32 next_r_numoflaneline\n\
int32 next_r_lanelineid\n\
float64 next_r_lanepositon\n\
float64 next_r_lanecurvature\n\
float64 next_r_lanecurvaturederivative\n\
int32 next_r_lane_type\n\
float64 next_r_heading_angle\n\
int32  next_r_lane_mark_color\n\
int32 next_r_laneQuality\n\
int32 next_r_laneWidthMarking\n\
\n\
#0x76B highway road info\n\
int32 highwayConstructionArea\n\
int32 highwayRoadType\n\
int32 highwayHighwayExitRight\n\
int32 highwayHighwayExitLeft\n\
float64   highwayProbabilityLeftLane\n\
float64   highwayProbabilityRightLane\n\
float64   highwayDriving_peed_left_lane\n\
float64   highwayDriving_peed_right_lane\n\
int32 highwayprotocol_version\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.messageID);
      stream.next(m.localStamp);
      stream.next(m.globalStamp);
      stream.next(m.camera);
      stream.next(m.camera_obj);
      stream.next(m.camera_lane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAMERA_DATA_MSG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::CAMERA_DATA_MSG_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "messageID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.messageID);
    s << indent << "localStamp: ";
    s << std::endl;
    Printer< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.localStamp);
    s << indent << "globalStamp: ";
    s << std::endl;
    Printer< ::vehicle_msgs::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.globalStamp);
    s << indent << "camera: ";
    s << std::endl;
    Printer< ::vehicle_msgs::Camera_<ContainerAllocator> >::stream(s, indent + "  ", v.camera);
    s << indent << "camera_obj[]" << std::endl;
    for (size_t i = 0; i < v.camera_obj.size(); ++i)
    {
      s << indent << "  camera_obj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::Camera_Obj_<ContainerAllocator> >::stream(s, indent + "    ", v.camera_obj[i]);
    }
    s << indent << "camera_lane: ";
    s << std::endl;
    Printer< ::vehicle_msgs::Camera_Lane_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_lane);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_CAMERA_DATA_MSG_H
