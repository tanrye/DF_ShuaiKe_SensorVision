// Generated by gencpp from file vehicle_msgs/ENTITYMAP_MSG.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_ENTITYMAP_MSG_H
#define VEHICLE_MSGS_MESSAGE_ENTITYMAP_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vehicle_msgs/LOCAL_POS_DATA.h>
#include <vehicle_msgs/PositionData.h>
#include <vehicle_msgs/PEDESTRIAN_OBJ.h>
#include <vehicle_msgs/ROAD_OBJ.h>
#include <vehicle_msgs/LANE_OBJ.h>
#include <vehicle_msgs/NEGATIVE_OBSTACLE_OBJ.h>
#include <vehicle_msgs/VEHICLE_OBJ.h>
#include <vehicle_msgs/FARSTATICOBJECT.h>
#include <vehicle_msgs/ROAD_MARKING.h>
#include <vehicle_msgs/TRAFFIC_SIGN.h>
#include <vehicle_msgs/TRAFFIC_LIGHT.h>

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct ENTITYMAP_MSG_
{
  typedef ENTITYMAP_MSG_<ContainerAllocator> Type;

  ENTITYMAP_MSG_()
    : MessageID(0)
    , MessageSeqNum(0)
    , LocalPoseTime(0.0)
    , GlobalPosTime(0.0)
    , LocalPose()
    , Position()
    , PdNum(0)
    , PdObj()
    , PdLane()
    , RoadNum(0)
    , RoadObj()
    , CurrentRoad(0)
    , LaneNum(0)
    , LaneObj()
    , LaneGenerateType()
    , CurrentLane(0)
    , NegObNum(0)
    , NegObj()
    , VehicleNum(0)
    , VehicleObj()
    , VehicleLane()
    , FarObjectNum(0)
    , FarStaticObject()
    , RoadMarkingNum(0)
    , RoadMarking()
    , TrafficSignNum(0)
    , TrafficSign()
    , TrafficLightNum(0)
    , TrafficLight()
    , index_lanemarkinginfo(0)
    , index_pedestrianinfo(0)
    , index_vehicleinfo(0)  {
      PdLane.assign(0);

      LaneGenerateType.assign(0);

      VehicleLane.assign(0);
  }
  ENTITYMAP_MSG_(const ContainerAllocator& _alloc)
    : MessageID(0)
    , MessageSeqNum(0)
    , LocalPoseTime(0.0)
    , GlobalPosTime(0.0)
    , LocalPose(_alloc)
    , Position(_alloc)
    , PdNum(0)
    , PdObj()
    , PdLane()
    , RoadNum(0)
    , RoadObj()
    , CurrentRoad(0)
    , LaneNum(0)
    , LaneObj()
    , LaneGenerateType()
    , CurrentLane(0)
    , NegObNum(0)
    , NegObj()
    , VehicleNum(0)
    , VehicleObj()
    , VehicleLane()
    , FarObjectNum(0)
    , FarStaticObject()
    , RoadMarkingNum(0)
    , RoadMarking()
    , TrafficSignNum(0)
    , TrafficSign()
    , TrafficLightNum(0)
    , TrafficLight(_alloc)
    , index_lanemarkinginfo(0)
    , index_pedestrianinfo(0)
    , index_vehicleinfo(0)  {
  (void)_alloc;
      PdObj.assign( ::vehicle_msgs::PEDESTRIAN_OBJ_<ContainerAllocator> (_alloc));

      PdLane.assign(0);

      RoadObj.assign( ::vehicle_msgs::ROAD_OBJ_<ContainerAllocator> (_alloc));

      LaneObj.assign( ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> (_alloc));

      LaneGenerateType.assign(0);

      NegObj.assign( ::vehicle_msgs::NEGATIVE_OBSTACLE_OBJ_<ContainerAllocator> (_alloc));

      VehicleObj.assign( ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> (_alloc));

      VehicleLane.assign(0);

      FarStaticObject.assign( ::vehicle_msgs::FARSTATICOBJECT_<ContainerAllocator> (_alloc));

      RoadMarking.assign( ::vehicle_msgs::ROAD_MARKING_<ContainerAllocator> (_alloc));

      TrafficSign.assign( ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> (_alloc));
  }



   typedef int32_t _MessageID_type;
  _MessageID_type MessageID;

   typedef int32_t _MessageSeqNum_type;
  _MessageSeqNum_type MessageSeqNum;

   typedef double _LocalPoseTime_type;
  _LocalPoseTime_type LocalPoseTime;

   typedef double _GlobalPosTime_type;
  _GlobalPosTime_type GlobalPosTime;

   typedef  ::vehicle_msgs::LOCAL_POS_DATA_<ContainerAllocator>  _LocalPose_type;
  _LocalPose_type LocalPose;

   typedef  ::vehicle_msgs::PositionData_<ContainerAllocator>  _Position_type;
  _Position_type Position;

   typedef int32_t _PdNum_type;
  _PdNum_type PdNum;

   typedef boost::array< ::vehicle_msgs::PEDESTRIAN_OBJ_<ContainerAllocator> , 30>  _PdObj_type;
  _PdObj_type PdObj;

   typedef boost::array<int32_t, 30>  _PdLane_type;
  _PdLane_type PdLane;

   typedef int32_t _RoadNum_type;
  _RoadNum_type RoadNum;

   typedef boost::array< ::vehicle_msgs::ROAD_OBJ_<ContainerAllocator> , 5>  _RoadObj_type;
  _RoadObj_type RoadObj;

   typedef int32_t _CurrentRoad_type;
  _CurrentRoad_type CurrentRoad;

   typedef int32_t _LaneNum_type;
  _LaneNum_type LaneNum;

   typedef boost::array< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> , 10>  _LaneObj_type;
  _LaneObj_type LaneObj;

   typedef boost::array<int32_t, 10>  _LaneGenerateType_type;
  _LaneGenerateType_type LaneGenerateType;

   typedef int32_t _CurrentLane_type;
  _CurrentLane_type CurrentLane;

   typedef int32_t _NegObNum_type;
  _NegObNum_type NegObNum;

   typedef boost::array< ::vehicle_msgs::NEGATIVE_OBSTACLE_OBJ_<ContainerAllocator> , 20>  _NegObj_type;
  _NegObj_type NegObj;

   typedef int32_t _VehicleNum_type;
  _VehicleNum_type VehicleNum;

   typedef boost::array< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> , 30>  _VehicleObj_type;
  _VehicleObj_type VehicleObj;

   typedef boost::array<int32_t, 30>  _VehicleLane_type;
  _VehicleLane_type VehicleLane;

   typedef int32_t _FarObjectNum_type;
  _FarObjectNum_type FarObjectNum;

   typedef boost::array< ::vehicle_msgs::FARSTATICOBJECT_<ContainerAllocator> , 50>  _FarStaticObject_type;
  _FarStaticObject_type FarStaticObject;

   typedef int32_t _RoadMarkingNum_type;
  _RoadMarkingNum_type RoadMarkingNum;

   typedef boost::array< ::vehicle_msgs::ROAD_MARKING_<ContainerAllocator> , 10>  _RoadMarking_type;
  _RoadMarking_type RoadMarking;

   typedef int32_t _TrafficSignNum_type;
  _TrafficSignNum_type TrafficSignNum;

   typedef boost::array< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> , 5>  _TrafficSign_type;
  _TrafficSign_type TrafficSign;

   typedef int32_t _TrafficLightNum_type;
  _TrafficLightNum_type TrafficLightNum;

   typedef  ::vehicle_msgs::TRAFFIC_LIGHT_<ContainerAllocator>  _TrafficLight_type;
  _TrafficLight_type TrafficLight;

   typedef uint32_t _index_lanemarkinginfo_type;
  _index_lanemarkinginfo_type index_lanemarkinginfo;

   typedef uint32_t _index_pedestrianinfo_type;
  _index_pedestrianinfo_type index_pedestrianinfo;

   typedef uint32_t _index_vehicleinfo_type;
  _index_vehicleinfo_type index_vehicleinfo;





  typedef boost::shared_ptr< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> const> ConstPtr;

}; // struct ENTITYMAP_MSG_

typedef ::vehicle_msgs::ENTITYMAP_MSG_<std::allocator<void> > ENTITYMAP_MSG;

typedef boost::shared_ptr< ::vehicle_msgs::ENTITYMAP_MSG > ENTITYMAP_MSGPtr;
typedef boost::shared_ptr< ::vehicle_msgs::ENTITYMAP_MSG const> ENTITYMAP_MSGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bba80900635dcab163ebf9620a9b8dd";
  }

  static const char* value(const ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bba80900635dcabULL;
  static const uint64_t static_value2 = 0x163ebf9620a9b8ddULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/ENTITYMAP_MSG";
  }

  static const char* value(const ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 MessageID\n\
int32 MessageSeqNum\n\
\n\
float64 LocalPoseTime       # LocalPose的时间of message\n\
float64 GlobalPosTime       # LocalPose的时间of message\n\
\n\
LOCAL_POS_DATA  LocalPose          #局部定位\n\
PositionData    Position		#全局定位\n\
\n\
int32 PdNum\n\
PEDESTRIAN_OBJ[30] PdObj\n\
int32[30] PdLane                 # 行人所在车道线\n\
 \n\
int32 RoadNum                                    # 道路数量\n\
ROAD_OBJ[5] RoadObj                   # 道路信息\n\
int32 CurrentRoad                                # 本车辆所在道路\n\
\n\
int32 LaneNum                                    #车道线数\n\
LANE_OBJ[10] LaneObj                   #车道线信息\n\
int32[10] LaneGenerateType             #车道线生成方法\n\
int32 CurrentLane                                #本车辆所在车道线\n\
# -100: on the left of all lanes, 100: on the right of all lanes\n\
                                             # -100<CurrentLane<100, vehicle is between lane CurrentLane and CurrentLane+1\n\
int32 NegObNum                                     #负障碍数\n\
NEGATIVE_OBSTACLE_OBJ[20] NegObj\n\
\n\
int32 VehicleNum                                   #环境中车辆数量\n\
VEHICLE_OBJ[30] VehicleObj            #环境中车辆信息\n\
int32[30] VehicleLane                 #环境中车辆所在车道线\n\
\n\
# static object, farther than 50m\n\
int32 FarObjectNum                                 # 50m以外静态障碍数量\n\
FARSTATICOBJECT[50] FarStaticObject # 50m以外静态障碍\n\
\n\
int32 RoadMarkingNum\n\
ROAD_MARKING[10] RoadMarking\n\
\n\
int32 TrafficSignNum      #最多给出5个路标\n\
TRAFFIC_SIGN[5] TrafficSign\n\
\n\
int32 TrafficLightNum      #给最近的1个交通灯\n\
TRAFFIC_LIGHT TrafficLight\n\
\n\
uint32 index_lanemarkinginfo\n\
uint32 index_pedestrianinfo\n\
uint32 index_vehicleinfo\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/LOCAL_POS_DATA\n\
\n\
uint32    header  #数据头\n\
float64   time	#millisecond\n\
int32 dr_x    #centimeter\n\
int32 dr_y    #centimeter\n\
int32 dr_z    #centimeter\n\
int32 dr_heading #0.01degree\n\
int32 dr_roll   #0.01degree\n\
int32 dr_pitch  #0.01degree\n\
int32 lf_speed #left_front wheel speed,cm/s\n\
int32 rf_speed #right_front wheel speed,cm/s\n\
int32 lr_speed #left_rear wheel speed,cm/s\n\
int32 rr_speed #right_rear wheel speed,cm/s\n\
int32 rot_x #imu三轴陀螺速度 0.01degree/s\n\
int32 rot_y #imu三轴陀螺速度 0.01degree/s\n\
int32 rot_z  #imu三轴陀螺速度 0.01degree/s\n\
int32 acc_x  #imu三轴加速度  0.01m/s^2\n\
int32 acc_y #imu三轴加速度  0.01m/s^2\n\
int32 acc_z  #imu三轴加速度  0.01m/s^2\n\
int32  steer  	#-3000(right)~3000(left) degree  0.01degree/s\n\
int32  brake       #0(zero)~100(full)\n\
int32  fuel          #0(zero)~100(full)\n\
int32 trans  #PARK=0,BACKWARD=1,NEURAL=2,FORWARD=3\n\
int8 VehicleState#车辆状态\n\
int32 mode      #行驶模式 #DIRECT_ACTUATOR=0,REMOTE_PILOT=1,AUTO_PILOT=2\n\
\n\
int32 drStatus		#dr运行状态\n\
int32 errorStatus	#错误状态\n\
int32 emergency_flag   #故障标志位\n\
int32 hardswitch_on\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/PositionData\n\
int16 gps_flag       #gps info is updated\n\
int16 gps_week\n\
float64 gps_millisecond        #millisecond in a week\n\
int32[2] llhPos	#经纬度，llpos[i]/SC_POS 单位为度\n\
int32[2] gaussPos  #高斯投影位置,cm，\n\
int32 height         #cm\n\
int32 pitch  #欧拉角，单位为0.01度\n\
int32 roll   #欧拉角，单位为0.01度\n\
int32 azimuth        #欧拉角，单位为0.01度,向东为零度，逆时针0-360\n\
int32 northVelocity  #north速度，单位为cm/s\n\
int32 eastVelocity\n\
int32 upVelocity\n\
int32 positionStatus	  	#系统运行状态\n\
int16 motion_flag    # motion info is updated\n\
int16 motion_week\n\
int32 motion_millisecond\n\
int32[2] drPos\n\
int32 drHeight\n\
int32 drAzimuth\n\
int32 drNorthVelocity\n\
int32 drEastVelocity\n\
int32 drUpVelocity\n\
int32[2] reserved\n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/PEDESTRIAN_OBJ\n\
int32 PedestrianID\n\
int32 CenterX    	#cm为单位，惯导坐标系\n\
int32 CenterY\n\
int32 Radius    	#cm为单位\n\
int32 Speed      	# cm/s\n\
int32 Direction  	# 0.01度，惯导坐标系\n\
int32 Height     	# height of the pedestrian \n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/ROAD_OBJ\n\
int32 RoadID   #1 yellow\n\
int32 LeftPtNum\n\
int32 RightPtNum\n\
int32[50] LeftEdgePtX   #cm\n\
int32[50] LeftEdgePtY   #cm\n\
int32[50] RightEdgePtX  #cm\n\
int32[50] RightEdgePtY  #cm\n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/LANE_OBJ\n\
int32 LaneID\n\
int32 LaneRefer 	# 0,1,-1,2,-2,-3,3, from left to right\n\
int32 LaneAttr  	# 0: 白实, 1:黄实, 2: 白虚, 3: 黄虚线, 4: 预测\n\
int32 LanePtNum	#车道线数量\n\
int32[200] LanePtX #\n\
int32[200] LanePtY #\n\
int32 LaneProb 	# 0-100, 概率\n\
# line\n\
float64 a\n\
float64 b\n\
float64 c \n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/NEGATIVE_OBSTACLE_OBJ\n\
int32 NegObID\n\
int32 CenterX    #cm为单位，惯导坐标系\n\
int32 CenterY\n\
int32 AxisX      #长轴，cm为单位\n\
int32 AxisY      #短轴，cm为单位\n\
int32 Slope      # 斜率，0.01度，逆时针为正\n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/VEHICLE_OBJ\n\
int32 VehicleID\n\
int32 CenterX         # cm\n\
int32 CenterY\n\
int32 Speed           # cm/s\n\
int32 SpeedDirection  # 0.01degree\n\
int32 Height          # cm\n\
\n\
int32 Convexhull_VertexNumber 	#边界顶点数量\n\
int32[50] ConvexhullX		#边界顶点坐标X\n\
int32[50] ConvexhullY \n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/FARSTATICOBJECT\n\
int32 VertexNumber 	#多边形边界顶点数量\n\
int32[50] ConvexX	#边界顶点坐标X\n\
int32[50] ConvexY	#边界顶点坐标Y\n\
int32 CenterX	#中心点x\n\
int32 CenterY	#中心点y \n\
\n\
================================================================================\n\
MSG: vehicle_msgs/ROAD_MARKING\n\
int32                     bottomleftx\n\
int32                     bottomlefty\n\
int32                     bottomrightx\n\
int32                     bottomrighty\n\
int32                     topleftx\n\
int32                     toplefty\n\
int32                     toprightx\n\
int32                     toprighty\n\
int32                     direction\n\
int32                     width\n\
uint8           sign_type\n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/TRAFFIC_SIGN\n\
uint8             pos_flag       #/*  交通标志位置信息 */\n\
int32                       x              # x坐标，厘米为单位,全局坐标系\n\
int32                       y              # y坐标，厘米为单位,全局坐标系\n\
#int32                       z              # z坐标，厘米为单位,全局坐标系\n\
uint8             sign_type      #/*  交通标志类型信息 */\n\
\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/TRAFFIC_LIGHT\n\
uint8           pos_flag		#是否有效\n\
int32                      x			#坐标\n\
int32                     y\n\
uint8           forward_light_type  #/*直行灯信息*/\n\
uint8           left_light_type     #/*左转灯信息*/\n\
uint8           right_light_type    #/*右转灯信息*/\n\
uint8           uturn_light_type   #/*U Turn灯信息*/\n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MessageID);
      stream.next(m.MessageSeqNum);
      stream.next(m.LocalPoseTime);
      stream.next(m.GlobalPosTime);
      stream.next(m.LocalPose);
      stream.next(m.Position);
      stream.next(m.PdNum);
      stream.next(m.PdObj);
      stream.next(m.PdLane);
      stream.next(m.RoadNum);
      stream.next(m.RoadObj);
      stream.next(m.CurrentRoad);
      stream.next(m.LaneNum);
      stream.next(m.LaneObj);
      stream.next(m.LaneGenerateType);
      stream.next(m.CurrentLane);
      stream.next(m.NegObNum);
      stream.next(m.NegObj);
      stream.next(m.VehicleNum);
      stream.next(m.VehicleObj);
      stream.next(m.VehicleLane);
      stream.next(m.FarObjectNum);
      stream.next(m.FarStaticObject);
      stream.next(m.RoadMarkingNum);
      stream.next(m.RoadMarking);
      stream.next(m.TrafficSignNum);
      stream.next(m.TrafficSign);
      stream.next(m.TrafficLightNum);
      stream.next(m.TrafficLight);
      stream.next(m.index_lanemarkinginfo);
      stream.next(m.index_pedestrianinfo);
      stream.next(m.index_vehicleinfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ENTITYMAP_MSG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::ENTITYMAP_MSG_<ContainerAllocator>& v)
  {
    s << indent << "MessageID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.MessageID);
    s << indent << "MessageSeqNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.MessageSeqNum);
    s << indent << "LocalPoseTime: ";
    Printer<double>::stream(s, indent + "  ", v.LocalPoseTime);
    s << indent << "GlobalPosTime: ";
    Printer<double>::stream(s, indent + "  ", v.GlobalPosTime);
    s << indent << "LocalPose: ";
    s << std::endl;
    Printer< ::vehicle_msgs::LOCAL_POS_DATA_<ContainerAllocator> >::stream(s, indent + "  ", v.LocalPose);
    s << indent << "Position: ";
    s << std::endl;
    Printer< ::vehicle_msgs::PositionData_<ContainerAllocator> >::stream(s, indent + "  ", v.Position);
    s << indent << "PdNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PdNum);
    s << indent << "PdObj[]" << std::endl;
    for (size_t i = 0; i < v.PdObj.size(); ++i)
    {
      s << indent << "  PdObj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::PEDESTRIAN_OBJ_<ContainerAllocator> >::stream(s, indent + "    ", v.PdObj[i]);
    }
    s << indent << "PdLane[]" << std::endl;
    for (size_t i = 0; i < v.PdLane.size(); ++i)
    {
      s << indent << "  PdLane[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.PdLane[i]);
    }
    s << indent << "RoadNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RoadNum);
    s << indent << "RoadObj[]" << std::endl;
    for (size_t i = 0; i < v.RoadObj.size(); ++i)
    {
      s << indent << "  RoadObj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::ROAD_OBJ_<ContainerAllocator> >::stream(s, indent + "    ", v.RoadObj[i]);
    }
    s << indent << "CurrentRoad: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CurrentRoad);
    s << indent << "LaneNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaneNum);
    s << indent << "LaneObj[]" << std::endl;
    for (size_t i = 0; i < v.LaneObj.size(); ++i)
    {
      s << indent << "  LaneObj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >::stream(s, indent + "    ", v.LaneObj[i]);
    }
    s << indent << "LaneGenerateType[]" << std::endl;
    for (size_t i = 0; i < v.LaneGenerateType.size(); ++i)
    {
      s << indent << "  LaneGenerateType[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.LaneGenerateType[i]);
    }
    s << indent << "CurrentLane: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CurrentLane);
    s << indent << "NegObNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.NegObNum);
    s << indent << "NegObj[]" << std::endl;
    for (size_t i = 0; i < v.NegObj.size(); ++i)
    {
      s << indent << "  NegObj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::NEGATIVE_OBSTACLE_OBJ_<ContainerAllocator> >::stream(s, indent + "    ", v.NegObj[i]);
    }
    s << indent << "VehicleNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.VehicleNum);
    s << indent << "VehicleObj[]" << std::endl;
    for (size_t i = 0; i < v.VehicleObj.size(); ++i)
    {
      s << indent << "  VehicleObj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::VEHICLE_OBJ_<ContainerAllocator> >::stream(s, indent + "    ", v.VehicleObj[i]);
    }
    s << indent << "VehicleLane[]" << std::endl;
    for (size_t i = 0; i < v.VehicleLane.size(); ++i)
    {
      s << indent << "  VehicleLane[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.VehicleLane[i]);
    }
    s << indent << "FarObjectNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.FarObjectNum);
    s << indent << "FarStaticObject[]" << std::endl;
    for (size_t i = 0; i < v.FarStaticObject.size(); ++i)
    {
      s << indent << "  FarStaticObject[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::FARSTATICOBJECT_<ContainerAllocator> >::stream(s, indent + "    ", v.FarStaticObject[i]);
    }
    s << indent << "RoadMarkingNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RoadMarkingNum);
    s << indent << "RoadMarking[]" << std::endl;
    for (size_t i = 0; i < v.RoadMarking.size(); ++i)
    {
      s << indent << "  RoadMarking[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::ROAD_MARKING_<ContainerAllocator> >::stream(s, indent + "    ", v.RoadMarking[i]);
    }
    s << indent << "TrafficSignNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TrafficSignNum);
    s << indent << "TrafficSign[]" << std::endl;
    for (size_t i = 0; i < v.TrafficSign.size(); ++i)
    {
      s << indent << "  TrafficSign[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vehicle_msgs::TRAFFIC_SIGN_<ContainerAllocator> >::stream(s, indent + "    ", v.TrafficSign[i]);
    }
    s << indent << "TrafficLightNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TrafficLightNum);
    s << indent << "TrafficLight: ";
    s << std::endl;
    Printer< ::vehicle_msgs::TRAFFIC_LIGHT_<ContainerAllocator> >::stream(s, indent + "  ", v.TrafficLight);
    s << indent << "index_lanemarkinginfo: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.index_lanemarkinginfo);
    s << indent << "index_pedestrianinfo: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.index_pedestrianinfo);
    s << indent << "index_vehicleinfo: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.index_vehicleinfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_ENTITYMAP_MSG_H
