// Generated by gencpp from file vehicle_msgs/LANE_OBJ.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_LANE_OBJ_H
#define VEHICLE_MSGS_MESSAGE_LANE_OBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct LANE_OBJ_
{
  typedef LANE_OBJ_<ContainerAllocator> Type;

  LANE_OBJ_()
    : LaneID(0)
    , LaneRefer(0)
    , LaneAttr(0)
    , LanePtNum(0)
    , LanePtX()
    , LanePtY()
    , LaneProb(0)
    , a(0.0)
    , b(0.0)
    , c(0.0)  {
      LanePtX.assign(0);

      LanePtY.assign(0);
  }
  LANE_OBJ_(const ContainerAllocator& _alloc)
    : LaneID(0)
    , LaneRefer(0)
    , LaneAttr(0)
    , LanePtNum(0)
    , LanePtX()
    , LanePtY()
    , LaneProb(0)
    , a(0.0)
    , b(0.0)
    , c(0.0)  {
  (void)_alloc;
      LanePtX.assign(0);

      LanePtY.assign(0);
  }



   typedef int32_t _LaneID_type;
  _LaneID_type LaneID;

   typedef int32_t _LaneRefer_type;
  _LaneRefer_type LaneRefer;

   typedef int32_t _LaneAttr_type;
  _LaneAttr_type LaneAttr;

   typedef int32_t _LanePtNum_type;
  _LanePtNum_type LanePtNum;

   typedef boost::array<int32_t, 200>  _LanePtX_type;
  _LanePtX_type LanePtX;

   typedef boost::array<int32_t, 200>  _LanePtY_type;
  _LanePtY_type LanePtY;

   typedef int32_t _LaneProb_type;
  _LaneProb_type LaneProb;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;





  typedef boost::shared_ptr< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> const> ConstPtr;

}; // struct LANE_OBJ_

typedef ::vehicle_msgs::LANE_OBJ_<std::allocator<void> > LANE_OBJ;

typedef boost::shared_ptr< ::vehicle_msgs::LANE_OBJ > LANE_OBJPtr;
typedef boost::shared_ptr< ::vehicle_msgs::LANE_OBJ const> LANE_OBJConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e9c9ea532d33c58c9a38a72dbe8facd";
  }

  static const char* value(const ::vehicle_msgs::LANE_OBJ_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e9c9ea532d33c58ULL;
  static const uint64_t static_value2 = 0xc9a38a72dbe8facdULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/LANE_OBJ";
  }

  static const char* value(const ::vehicle_msgs::LANE_OBJ_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 LaneID\n\
int32 LaneRefer 	# 0,1,-1,2,-2,-3,3, from left to right\n\
int32 LaneAttr  	# 0: 白实, 1:黄实, 2: 白虚, 3: 黄虚线, 4: 预测\n\
int32 LanePtNum	#车道线数量\n\
int32[200] LanePtX #\n\
int32[200] LanePtY #\n\
int32 LaneProb 	# 0-100, 概率\n\
# line\n\
float64 a\n\
float64 b\n\
float64 c \n\
\n\
";
  }

  static const char* value(const ::vehicle_msgs::LANE_OBJ_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LaneID);
      stream.next(m.LaneRefer);
      stream.next(m.LaneAttr);
      stream.next(m.LanePtNum);
      stream.next(m.LanePtX);
      stream.next(m.LanePtY);
      stream.next(m.LaneProb);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LANE_OBJ_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::LANE_OBJ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::LANE_OBJ_<ContainerAllocator>& v)
  {
    s << indent << "LaneID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaneID);
    s << indent << "LaneRefer: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaneRefer);
    s << indent << "LaneAttr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaneAttr);
    s << indent << "LanePtNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LanePtNum);
    s << indent << "LanePtX[]" << std::endl;
    for (size_t i = 0; i < v.LanePtX.size(); ++i)
    {
      s << indent << "  LanePtX[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.LanePtX[i]);
    }
    s << indent << "LanePtY[]" << std::endl;
    for (size_t i = 0; i < v.LanePtY.size(); ++i)
    {
      s << indent << "  LanePtY[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.LanePtY[i]);
    }
    s << indent << "LaneProb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaneProb);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_LANE_OBJ_H
