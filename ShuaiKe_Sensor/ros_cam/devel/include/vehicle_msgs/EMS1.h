// Generated by gencpp from file vehicle_msgs/EMS1.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_EMS1_H
#define VEHICLE_MSGS_MESSAGE_EMS1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct EMS1_
{
  typedef EMS1_<ContainerAllocator> Type;

  EMS1_()
    : ThrottlePosFeedback(0.0)
    , EngSpd(0.0)
    , ActualAccPedal(0.0)
    , AutoDriveStatus(0)
    , EngSpdSignalErrFlag(0)
    , AccPedalInterventEnable(0)
    , RollingCountEMS1(0)
    , CheckSumEMS1(0)  {
    }
  EMS1_(const ContainerAllocator& _alloc)
    : ThrottlePosFeedback(0.0)
    , EngSpd(0.0)
    , ActualAccPedal(0.0)
    , AutoDriveStatus(0)
    , EngSpdSignalErrFlag(0)
    , AccPedalInterventEnable(0)
    , RollingCountEMS1(0)
    , CheckSumEMS1(0)  {
  (void)_alloc;
    }



   typedef float _ThrottlePosFeedback_type;
  _ThrottlePosFeedback_type ThrottlePosFeedback;

   typedef float _EngSpd_type;
  _EngSpd_type EngSpd;

   typedef float _ActualAccPedal_type;
  _ActualAccPedal_type ActualAccPedal;

   typedef uint8_t _AutoDriveStatus_type;
  _AutoDriveStatus_type AutoDriveStatus;

   typedef uint8_t _EngSpdSignalErrFlag_type;
  _EngSpdSignalErrFlag_type EngSpdSignalErrFlag;

   typedef uint8_t _AccPedalInterventEnable_type;
  _AccPedalInterventEnable_type AccPedalInterventEnable;

   typedef uint8_t _RollingCountEMS1_type;
  _RollingCountEMS1_type RollingCountEMS1;

   typedef uint8_t _CheckSumEMS1_type;
  _CheckSumEMS1_type CheckSumEMS1;





  typedef boost::shared_ptr< ::vehicle_msgs::EMS1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::EMS1_<ContainerAllocator> const> ConstPtr;

}; // struct EMS1_

typedef ::vehicle_msgs::EMS1_<std::allocator<void> > EMS1;

typedef boost::shared_ptr< ::vehicle_msgs::EMS1 > EMS1Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::EMS1 const> EMS1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::EMS1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::EMS1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/AutoAx7/ShuaiKe_Sensor/ros_cam/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::EMS1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::EMS1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::EMS1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::EMS1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::EMS1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::EMS1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::EMS1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "616efb498ace6d9e7e9bb3f7ddd2f36e";
  }

  static const char* value(const ::vehicle_msgs::EMS1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x616efb498ace6d9eULL;
  static const uint64_t static_value2 = 0x7e9bb3f7ddd2f36eULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::EMS1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/EMS1";
  }

  static const char* value(const ::vehicle_msgs::EMS1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::EMS1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x083, Len=8, 10ms\n\
float32 ThrottlePosFeedback          # 发送机节气门开度反馈\n\
float32 EngSpd                       # 发送机转速\n\
float32 ActualAccPedal               # 物理油门踏板开度\n\
uint8   AutoDriveStatus              # 自动驾驶功能状态\n\
uint8   EngSpdSignalErrFlag          # 发动机转速信号错误标志\n\
uint8   AccPedalInterventEnable      # 油门踏板干预使能\n\
uint8   RollingCountEMS1             # EMS1滚动计数值\n\
uint8   CheckSumEMS1                 # EMS1校验值 \n\
";
  }

  static const char* value(const ::vehicle_msgs::EMS1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::EMS1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ThrottlePosFeedback);
      stream.next(m.EngSpd);
      stream.next(m.ActualAccPedal);
      stream.next(m.AutoDriveStatus);
      stream.next(m.EngSpdSignalErrFlag);
      stream.next(m.AccPedalInterventEnable);
      stream.next(m.RollingCountEMS1);
      stream.next(m.CheckSumEMS1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EMS1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::EMS1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::EMS1_<ContainerAllocator>& v)
  {
    s << indent << "ThrottlePosFeedback: ";
    Printer<float>::stream(s, indent + "  ", v.ThrottlePosFeedback);
    s << indent << "EngSpd: ";
    Printer<float>::stream(s, indent + "  ", v.EngSpd);
    s << indent << "ActualAccPedal: ";
    Printer<float>::stream(s, indent + "  ", v.ActualAccPedal);
    s << indent << "AutoDriveStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AutoDriveStatus);
    s << indent << "EngSpdSignalErrFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EngSpdSignalErrFlag);
    s << indent << "AccPedalInterventEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccPedalInterventEnable);
    s << indent << "RollingCountEMS1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RollingCountEMS1);
    s << indent << "CheckSumEMS1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CheckSumEMS1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_EMS1_H
