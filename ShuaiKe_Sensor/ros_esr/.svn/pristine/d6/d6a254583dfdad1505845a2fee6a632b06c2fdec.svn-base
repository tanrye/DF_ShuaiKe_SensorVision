// Generated by gencpp from file msg_camera/Camera_Obj.msg
// DO NOT EDIT!


#ifndef MSG_CAMERA_MESSAGE_CAMERA_OBJ_H
#define MSG_CAMERA_MESSAGE_CAMERA_OBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <msg_camera/FrameStamp.h>
#include <msg_camera/FrameStamp.h>

namespace msg_camera
{
template <class ContainerAllocator>
struct Camera_Obj_
{
  typedef Camera_Obj_<ContainerAllocator> Type;

  Camera_Obj_()
    : header()
    , messageID(0)
    , localStamp()
    , globalStamp()
    , camera_obstacle_id(0)
    , camera_obstacleposx(0.0)
    , camera_obstacleposy(0.0)
    , blinkerInfo(0)
    , cut_in_and_out(0)
    , obstacle_type(0)
    , obstacle_status(0)
    , obstacle_valid(0)
    , obstacles_brake_lights(0)
    , obstacle_length(0.0)
    , obstacle_width(0.0)
    , obstacles_velx(0.0)
    , obstacleAge(0)
    , obstacleLane(0)
    , CIPVFlag(0)
    , RadarPosX(0.0)
    , RadarVelX(0.0)
    , RadarMatchConfidence(0)
    , MatcheRadarID(0)
    , obstacleAngleRate(0.0)
    , obstacles_velY(0)
    , object_Accel_X(0.0)
    , obstacleReplaced(0)
    , obstacleAngle(0.0)  {
    }
  Camera_Obj_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , messageID(0)
    , localStamp(_alloc)
    , globalStamp(_alloc)
    , camera_obstacle_id(0)
    , camera_obstacleposx(0.0)
    , camera_obstacleposy(0.0)
    , blinkerInfo(0)
    , cut_in_and_out(0)
    , obstacle_type(0)
    , obstacle_status(0)
    , obstacle_valid(0)
    , obstacles_brake_lights(0)
    , obstacle_length(0.0)
    , obstacle_width(0.0)
    , obstacles_velx(0.0)
    , obstacleAge(0)
    , obstacleLane(0)
    , CIPVFlag(0)
    , RadarPosX(0.0)
    , RadarVelX(0.0)
    , RadarMatchConfidence(0)
    , MatcheRadarID(0)
    , obstacleAngleRate(0.0)
    , obstacles_velY(0)
    , object_Accel_X(0.0)
    , obstacleReplaced(0)
    , obstacleAngle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _messageID_type;
  _messageID_type messageID;

   typedef  ::msg_camera::FrameStamp_<ContainerAllocator>  _localStamp_type;
  _localStamp_type localStamp;

   typedef  ::msg_camera::FrameStamp_<ContainerAllocator>  _globalStamp_type;
  _globalStamp_type globalStamp;

   typedef int32_t _camera_obstacle_id_type;
  _camera_obstacle_id_type camera_obstacle_id;

   typedef double _camera_obstacleposx_type;
  _camera_obstacleposx_type camera_obstacleposx;

   typedef double _camera_obstacleposy_type;
  _camera_obstacleposy_type camera_obstacleposy;

   typedef int32_t _blinkerInfo_type;
  _blinkerInfo_type blinkerInfo;

   typedef int32_t _cut_in_and_out_type;
  _cut_in_and_out_type cut_in_and_out;

   typedef int32_t _obstacle_type_type;
  _obstacle_type_type obstacle_type;

   typedef int32_t _obstacle_status_type;
  _obstacle_status_type obstacle_status;

   typedef int32_t _obstacle_valid_type;
  _obstacle_valid_type obstacle_valid;

   typedef int32_t _obstacles_brake_lights_type;
  _obstacles_brake_lights_type obstacles_brake_lights;

   typedef double _obstacle_length_type;
  _obstacle_length_type obstacle_length;

   typedef double _obstacle_width_type;
  _obstacle_width_type obstacle_width;

   typedef double _obstacles_velx_type;
  _obstacles_velx_type obstacles_velx;

   typedef int32_t _obstacleAge_type;
  _obstacleAge_type obstacleAge;

   typedef int32_t _obstacleLane_type;
  _obstacleLane_type obstacleLane;

   typedef int32_t _CIPVFlag_type;
  _CIPVFlag_type CIPVFlag;

   typedef double _RadarPosX_type;
  _RadarPosX_type RadarPosX;

   typedef double _RadarVelX_type;
  _RadarVelX_type RadarVelX;

   typedef int32_t _RadarMatchConfidence_type;
  _RadarMatchConfidence_type RadarMatchConfidence;

   typedef int32_t _MatcheRadarID_type;
  _MatcheRadarID_type MatcheRadarID;

   typedef double _obstacleAngleRate_type;
  _obstacleAngleRate_type obstacleAngleRate;

   typedef int32_t _obstacles_velY_type;
  _obstacles_velY_type obstacles_velY;

   typedef double _object_Accel_X_type;
  _object_Accel_X_type object_Accel_X;

   typedef int32_t _obstacleReplaced_type;
  _obstacleReplaced_type obstacleReplaced;

   typedef double _obstacleAngle_type;
  _obstacleAngle_type obstacleAngle;




  typedef boost::shared_ptr< ::msg_camera::Camera_Obj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_camera::Camera_Obj_<ContainerAllocator> const> ConstPtr;

}; // struct Camera_Obj_

typedef ::msg_camera::Camera_Obj_<std::allocator<void> > Camera_Obj;

typedef boost::shared_ptr< ::msg_camera::Camera_Obj > Camera_ObjPtr;
typedef boost::shared_ptr< ::msg_camera::Camera_Obj const> Camera_ObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_camera::Camera_Obj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_camera::Camera_Obj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg_camera

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'msg_camera': ['/mnt/hgfs/Share/DFAx7i/ros_messages/src/msg_camera/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg_camera::Camera_Obj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_camera::Camera_Obj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_camera::Camera_Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_camera::Camera_Obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_camera::Camera_Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_camera::Camera_Obj_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_camera::Camera_Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a330d0448787266098e8365de315bedb";
  }

  static const char* value(const ::msg_camera::Camera_Obj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa330d04487872660ULL;
  static const uint64_t static_value2 = 0x98e8365de315bedbULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_camera::Camera_Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_camera/Camera_Obj";
  }

  static const char* value(const ::msg_camera::Camera_Obj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_camera::Camera_Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
\n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
\n\
int32 camera_obstacle_id\n\
float64 camera_obstacleposx\n\
float64 camera_obstacleposy\n\
int32 blinkerInfo\n\
int32 cut_in_and_out\n\
int32 obstacle_type\n\
int32 obstacle_status\n\
int32 obstacle_valid\n\
int32 obstacles_brake_lights\n\
float64 obstacle_length\n\
float64 obstacle_width\n\
float64 obstacles_velx\n\
\n\
int32 obstacleAge\n\
int32 obstacleLane\n\
int32 CIPVFlag\n\
float64 RadarPosX\n\
float64 RadarVelX\n\
int32 RadarMatchConfidence\n\
int32 MatcheRadarID\n\
\n\
float64 obstacleAngleRate\n\
int32 obstacles_velY\n\
float64 object_Accel_X\n\
int32 obstacleReplaced\n\
float64 obstacleAngle\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: msg_camera/FrameStamp\n\
#MSG FrameStamp\n\
Header header\n\
float64 time\n\
float64  lat\n\
float64  lng\n\
float64  height\n\
float64[3] position\n\
float64[3] orientation\n\
float64[3] linearSpeed\n\
float64[3] angularSpeed\n\
";
  }

  static const char* value(const ::msg_camera::Camera_Obj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_camera::Camera_Obj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.messageID);
      stream.next(m.localStamp);
      stream.next(m.globalStamp);
      stream.next(m.camera_obstacle_id);
      stream.next(m.camera_obstacleposx);
      stream.next(m.camera_obstacleposy);
      stream.next(m.blinkerInfo);
      stream.next(m.cut_in_and_out);
      stream.next(m.obstacle_type);
      stream.next(m.obstacle_status);
      stream.next(m.obstacle_valid);
      stream.next(m.obstacles_brake_lights);
      stream.next(m.obstacle_length);
      stream.next(m.obstacle_width);
      stream.next(m.obstacles_velx);
      stream.next(m.obstacleAge);
      stream.next(m.obstacleLane);
      stream.next(m.CIPVFlag);
      stream.next(m.RadarPosX);
      stream.next(m.RadarVelX);
      stream.next(m.RadarMatchConfidence);
      stream.next(m.MatcheRadarID);
      stream.next(m.obstacleAngleRate);
      stream.next(m.obstacles_velY);
      stream.next(m.object_Accel_X);
      stream.next(m.obstacleReplaced);
      stream.next(m.obstacleAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Camera_Obj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_camera::Camera_Obj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_camera::Camera_Obj_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "messageID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.messageID);
    s << indent << "localStamp: ";
    s << std::endl;
    Printer< ::msg_camera::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.localStamp);
    s << indent << "globalStamp: ";
    s << std::endl;
    Printer< ::msg_camera::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.globalStamp);
    s << indent << "camera_obstacle_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_obstacle_id);
    s << indent << "camera_obstacleposx: ";
    Printer<double>::stream(s, indent + "  ", v.camera_obstacleposx);
    s << indent << "camera_obstacleposy: ";
    Printer<double>::stream(s, indent + "  ", v.camera_obstacleposy);
    s << indent << "blinkerInfo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blinkerInfo);
    s << indent << "cut_in_and_out: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cut_in_and_out);
    s << indent << "obstacle_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacle_type);
    s << indent << "obstacle_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacle_status);
    s << indent << "obstacle_valid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacle_valid);
    s << indent << "obstacles_brake_lights: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacles_brake_lights);
    s << indent << "obstacle_length: ";
    Printer<double>::stream(s, indent + "  ", v.obstacle_length);
    s << indent << "obstacle_width: ";
    Printer<double>::stream(s, indent + "  ", v.obstacle_width);
    s << indent << "obstacles_velx: ";
    Printer<double>::stream(s, indent + "  ", v.obstacles_velx);
    s << indent << "obstacleAge: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacleAge);
    s << indent << "obstacleLane: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacleLane);
    s << indent << "CIPVFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CIPVFlag);
    s << indent << "RadarPosX: ";
    Printer<double>::stream(s, indent + "  ", v.RadarPosX);
    s << indent << "RadarVelX: ";
    Printer<double>::stream(s, indent + "  ", v.RadarVelX);
    s << indent << "RadarMatchConfidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RadarMatchConfidence);
    s << indent << "MatcheRadarID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.MatcheRadarID);
    s << indent << "obstacleAngleRate: ";
    Printer<double>::stream(s, indent + "  ", v.obstacleAngleRate);
    s << indent << "obstacles_velY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacles_velY);
    s << indent << "object_Accel_X: ";
    Printer<double>::stream(s, indent + "  ", v.object_Accel_X);
    s << indent << "obstacleReplaced: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacleReplaced);
    s << indent << "obstacleAngle: ";
    Printer<double>::stream(s, indent + "  ", v.obstacleAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_CAMERA_MESSAGE_CAMERA_OBJ_H
