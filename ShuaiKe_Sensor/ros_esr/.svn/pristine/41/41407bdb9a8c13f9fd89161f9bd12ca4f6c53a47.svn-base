// Generated by gencpp from file vehicle_msgs/SASInfo.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_SASINFO_H
#define VEHICLE_MSGS_MESSAGE_SASINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct SASInfo_
{
  typedef SASInfo_<ContainerAllocator> Type;

  SASInfo_()
    : SteeringAngle(0.0)
    , SteeringRotSpd(0)
    , CheckSumSAS1(0)
    , RollingCountSAS1(0)  {
    }
  SASInfo_(const ContainerAllocator& _alloc)
    : SteeringAngle(0.0)
    , SteeringRotSpd(0)
    , CheckSumSAS1(0)
    , RollingCountSAS1(0)  {
  (void)_alloc;
    }



   typedef float _SteeringAngle_type;
  _SteeringAngle_type SteeringAngle;

   typedef uint16_t _SteeringRotSpd_type;
  _SteeringRotSpd_type SteeringRotSpd;

   typedef uint8_t _CheckSumSAS1_type;
  _CheckSumSAS1_type CheckSumSAS1;

   typedef uint8_t _RollingCountSAS1_type;
  _RollingCountSAS1_type RollingCountSAS1;




  typedef boost::shared_ptr< ::vehicle_msgs::SASInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::SASInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SASInfo_

typedef ::vehicle_msgs::SASInfo_<std::allocator<void> > SASInfo;

typedef boost::shared_ptr< ::vehicle_msgs::SASInfo > SASInfoPtr;
typedef boost::shared_ptr< ::vehicle_msgs::SASInfo const> SASInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::SASInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::SASInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/mnt/hgfs/Share/DFAx7i/ros_messages/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::SASInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::SASInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::SASInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f498c59239ab9f5ebaa888411522b5e1";
  }

  static const char* value(const ::vehicle_msgs::SASInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf498c59239ab9f5eULL;
  static const uint64_t static_value2 = 0xbaa888411522b5e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/SASInfo";
  }

  static const char* value(const ::vehicle_msgs::SASInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x0A5, Len=8, 10ms                         \n\
float32 SteeringAngle                # 转向角信号\n\
uint16  SteeringRotSpd               # 转向角速度\n\
uint8   CheckSumSAS1                 # SAS1校验值\n\
uint8   RollingCountSAS1             # SAS1滚动计数值\n\
";
  }

  static const char* value(const ::vehicle_msgs::SASInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SteeringAngle);
      stream.next(m.SteeringRotSpd);
      stream.next(m.CheckSumSAS1);
      stream.next(m.RollingCountSAS1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SASInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::SASInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::SASInfo_<ContainerAllocator>& v)
  {
    s << indent << "SteeringAngle: ";
    Printer<float>::stream(s, indent + "  ", v.SteeringAngle);
    s << indent << "SteeringRotSpd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.SteeringRotSpd);
    s << indent << "CheckSumSAS1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CheckSumSAS1);
    s << indent << "RollingCountSAS1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RollingCountSAS1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_SASINFO_H
