//
// Created by wss on 7/1/17.
//

#include "EsrApp.h"

EsrApplication::EsrApplication(int argc, char **argv)
        : esrUserNode(argc, argv)
{
    memset((void*)&front_radar_data,0, sizeof(front_radar_data));

    start();

    esrThread = new boost::thread(boost::bind(&EsrApplication::processPendingDatagrams, this));
    /**
     * The udp callback must bind before ros initialization.
     * */
    esrUserNode.init();
}

EsrApplication::~EsrApplication()
{
    esrThread->join();
}

void EsrApplication::start(void) {
    esrPort = 1026;

    esrUdpSocket = new UDPSocket(esrPort);
}

void EsrApplication::processPendingDatagrams( void){
    uint32_t iLen;
    uint8_t package_num;

    ROS_INFO_STREAM("UDP Thread");

    while (true) {

        iLen = esrUdpSocket->recv(pBufferESR, LONG_RANGE_RADAR_MAX_SIZE);

        package_num = iLen / CAN_MSG_LENGTH;

        memcpy((void *) &front_radar_data, pBufferESR, package_num * CAN_MSG_LENGTH);

        if (package_num >= 50) {

            for (int i = 0; i < package_num; i++) {
                ptr_can_msg[i].id = front_radar_data.id[i];

                memcpy(ptr_can_msg[i].data, front_radar_data.message[i].data, 8);
            }
        }

        esrUserNode.publishData( package_num, ptr_can_msg );
    }
}

