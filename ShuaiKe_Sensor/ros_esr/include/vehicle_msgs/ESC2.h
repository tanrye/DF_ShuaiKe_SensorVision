// Generated by gencpp from file vehicle_msgs/ESC2.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_ESC2_H
#define VEHICLE_MSGS_MESSAGE_ESC2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct ESC2_
{
  typedef ESC2_<ContainerAllocator> Type;

  ESC2_()
    : VehSpdValidFlag(0)
    , VacuumOriginalValueValidity(0)
    , BrakeOilPress(0.0)
    , VehicleSpeed(0.0)
    , VacuumOriginalValue(0)  {
    }
  ESC2_(const ContainerAllocator& _alloc)
    : VehSpdValidFlag(0)
    , VacuumOriginalValueValidity(0)
    , BrakeOilPress(0.0)
    , VehicleSpeed(0.0)
    , VacuumOriginalValue(0)  {
  (void)_alloc;
    }



   typedef uint8_t _VehSpdValidFlag_type;
  _VehSpdValidFlag_type VehSpdValidFlag;

   typedef uint8_t _VacuumOriginalValueValidity_type;
  _VacuumOriginalValueValidity_type VacuumOriginalValueValidity;

   typedef float _BrakeOilPress_type;
  _BrakeOilPress_type BrakeOilPress;

   typedef float _VehicleSpeed_type;
  _VehicleSpeed_type VehicleSpeed;

   typedef int16_t _VacuumOriginalValue_type;
  _VacuumOriginalValue_type VacuumOriginalValue;




  typedef boost::shared_ptr< ::vehicle_msgs::ESC2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::ESC2_<ContainerAllocator> const> ConstPtr;

}; // struct ESC2_

typedef ::vehicle_msgs::ESC2_<std::allocator<void> > ESC2;

typedef boost::shared_ptr< ::vehicle_msgs::ESC2 > ESC2Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::ESC2 const> ESC2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::ESC2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::ESC2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/mnt/hgfs/Share/DFAx7i/ros_messages/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ESC2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ESC2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ESC2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ESC2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ESC2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ESC2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::ESC2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5699aa57edafd231b29be027693467f8";
  }

  static const char* value(const ::vehicle_msgs::ESC2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5699aa57edafd231ULL;
  static const uint64_t static_value2 = 0xb29be027693467f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::ESC2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/ESC2";
  }

  static const char* value(const ::vehicle_msgs::ESC2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::ESC2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x0A0, Len=8, 10ms\n\
uint8   VehSpdValidFlag              # 车速有效信号\n\
uint8   VacuumOriginalValueValidity  # 真空压力原始值有效信号\n\
float32 BrakeOilPress                # 制动主缸油压信号\n\
float32 VehicleSpeed                 # 车速\n\
int16   VacuumOriginalValue          # 真空压力原始值\n\
";
  }

  static const char* value(const ::vehicle_msgs::ESC2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::ESC2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VehSpdValidFlag);
      stream.next(m.VacuumOriginalValueValidity);
      stream.next(m.BrakeOilPress);
      stream.next(m.VehicleSpeed);
      stream.next(m.VacuumOriginalValue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ESC2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::ESC2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::ESC2_<ContainerAllocator>& v)
  {
    s << indent << "VehSpdValidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehSpdValidFlag);
    s << indent << "VacuumOriginalValueValidity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VacuumOriginalValueValidity);
    s << indent << "BrakeOilPress: ";
    Printer<float>::stream(s, indent + "  ", v.BrakeOilPress);
    s << indent << "VehicleSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.VehicleSpeed);
    s << indent << "VacuumOriginalValue: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VacuumOriginalValue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_ESC2_H
