// Generated by gencpp from file vehicle_msgs/TCU1.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_TCU1_H
#define VEHICLE_MSGS_MESSAGE_TCU1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct TCU1_
{
  typedef TCU1_<ContainerAllocator> Type;

  TCU1_()
    : ShiftLeverPosValidFlag(0)
    , ActualGear(0)
    , PRNDLStatus(0)
    , RollingCountTCU1(0)
    , CheckSum1(0)  {
    }
  TCU1_(const ContainerAllocator& _alloc)
    : ShiftLeverPosValidFlag(0)
    , ActualGear(0)
    , PRNDLStatus(0)
    , RollingCountTCU1(0)
    , CheckSum1(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ShiftLeverPosValidFlag_type;
  _ShiftLeverPosValidFlag_type ShiftLeverPosValidFlag;

   typedef uint8_t _ActualGear_type;
  _ActualGear_type ActualGear;

   typedef uint8_t _PRNDLStatus_type;
  _PRNDLStatus_type PRNDLStatus;

   typedef uint8_t _RollingCountTCU1_type;
  _RollingCountTCU1_type RollingCountTCU1;

   typedef uint8_t _CheckSum1_type;
  _CheckSum1_type CheckSum1;




  typedef boost::shared_ptr< ::vehicle_msgs::TCU1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::TCU1_<ContainerAllocator> const> ConstPtr;

}; // struct TCU1_

typedef ::vehicle_msgs::TCU1_<std::allocator<void> > TCU1;

typedef boost::shared_ptr< ::vehicle_msgs::TCU1 > TCU1Ptr;
typedef boost::shared_ptr< ::vehicle_msgs::TCU1 const> TCU1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::TCU1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::TCU1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/mnt/hgfs/Share/DFAx7i/ros_messages/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::TCU1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::TCU1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::TCU1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::TCU1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::TCU1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::TCU1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::TCU1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "136a8f8eb69f70a58b97be7897c69204";
  }

  static const char* value(const ::vehicle_msgs::TCU1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x136a8f8eb69f70a5ULL;
  static const uint64_t static_value2 = 0x8b97be7897c69204ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::TCU1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/TCU1";
  }

  static const char* value(const ::vehicle_msgs::TCU1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::TCU1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID=0x165, Len=8, 20ms\n\
uint8 ShiftLeverPosValidFlag # 换挡杆位置是否有效信号\n\
uint8 ActualGear             # 实际档位\n\
uint8 PRNDLStatus            # 档杆信息\n\
uint8 RollingCountTCU1       # TCU1滚动计数器\n\
uint8 CheckSum1              # TCU1校验值\n\
";
  }

  static const char* value(const ::vehicle_msgs::TCU1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::TCU1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ShiftLeverPosValidFlag);
      stream.next(m.ActualGear);
      stream.next(m.PRNDLStatus);
      stream.next(m.RollingCountTCU1);
      stream.next(m.CheckSum1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TCU1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::TCU1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::TCU1_<ContainerAllocator>& v)
  {
    s << indent << "ShiftLeverPosValidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ShiftLeverPosValidFlag);
    s << indent << "ActualGear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ActualGear);
    s << indent << "PRNDLStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PRNDLStatus);
    s << indent << "RollingCountTCU1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RollingCountTCU1);
    s << indent << "CheckSum1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CheckSum1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_TCU1_H
