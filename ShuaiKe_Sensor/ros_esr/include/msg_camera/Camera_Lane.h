// Generated by gencpp from file msg_camera/Camera_Lane.msg
// DO NOT EDIT!


#ifndef MSG_CAMERA_MESSAGE_CAMERA_LANE_H
#define MSG_CAMERA_MESSAGE_CAMERA_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <msg_camera/FrameStamp.h>
#include <msg_camera/FrameStamp.h>

namespace msg_camera
{
template <class ContainerAllocator>
struct Camera_Lane_
{
  typedef Camera_Lane_<ContainerAllocator> Type;

  Camera_Lane_()
    : header()
    , messageID(0)
    , localStamp()
    , globalStamp()
    , l_numoflaneline(0)
    , l_lanelineid(0)
    , l_lanepositon(0.0)
    , l_lanecurvature(0.0)
    , l_lanecurvaturederivative(0.0)
    , l_lane_type(0)
    , l_heading_angle(0.0)
    , l_lane_mark_color(0)
    , l_laneQuality(0)
    , l_laneWidthMarking(0)
    , l_laneViewRangStart(0)
    , l_laneViewRangEnd(0)
    , l_laneCrossing(0)
    , l_lanePRED_DIST_BASED_EXTRAPOLATION(0)
    , l_lanePRED_OTHER_SIDE(0)
    , l_lanePRED_OVERRIDE(0)
    , l_lanePRED_OCCLUDED_LM_EXTRAPOLATION(0)
    , l_lanePRED_HEADWAY_ORIENTED(0)
    , l_lanePRED_SOURCE_DIVERGING_LANES(0)
    , l_lanePRED_SOURCE_GUARDRAIL_SHADOW(0)
    , l_lanePRED_SOURCE_HWE_SPAIN(0)
    , l_lanePRED_SOURCE_STD(0)
    , l_lanePRED_SOURCE_VRTL_MERGE(0)
    , l_laneTCL(0)
    , r_numoflaneline(0)
    , r_lanelineid(0)
    , r_lanepositon(0.0)
    , r_lanecurvature(0.0)
    , r_lanecurvaturederivative(0.0)
    , r_lane_type(0)
    , r_heading_angle(0.0)
    , r_lane_mark_color(0)
    , r_laneQuality(0)
    , r_laneWidthMarking(0)
    , r_laneViewRangStart(0)
    , r_laneViewRangEnd(0)
    , r_laneCrossing(0)
    , r_lanePRED_DIST_BASED_EXTRAPOLATION(0)
    , r_lanePRED_OTHER_SIDE(0)
    , r_lanePRED_OVERRIDE(0)
    , r_lanePRED_OCCLUDED_LM_EXTRAPOLATION(0)
    , r_lanePRED_HEADWAY_ORIENTED(0)
    , r_lanePRED_SOURCE_DIVERGING_LANES(0)
    , r_lanePRED_SOURCE_GUARDRAIL_SHADOW(0)
    , r_lanePRED_SOURCE_HWE_SPAIN(0)
    , r_lanePRED_SOURCE_STD(0)
    , r_lanePRED_SOURCE_VRTL_MERGE(0)
    , r_laneTCL(0)
    , next_l_laneViewRangStart(0)
    , next_l_laneViewRangEnd(0)
    , next_l_numoflaneline(0)
    , next_l_lanelineid(0)
    , next_l_lanepositon(0.0)
    , next_l_lanecurvature(0.0)
    , next_l_lanecurvaturederivative(0.0)
    , next_l_lane_type(0)
    , next_l_heading_angle(0.0)
    , next_l_lane_mark_color(0)
    , next_l_laneQuality(0)
    , next_l_laneWidthMarking(0)
    , next_r_laneViewRangStart(0)
    , next_r_laneViewRangEnd(0)
    , next_r_numoflaneline(0)
    , next_r_lanelineid(0)
    , next_r_lanepositon(0.0)
    , next_r_lanecurvature(0.0)
    , next_r_lanecurvaturederivative(0.0)
    , next_r_lane_type(0)
    , next_r_heading_angle(0.0)
    , next_r_lane_mark_color(0)
    , next_r_laneQuality(0)
    , next_r_laneWidthMarking(0)
    , highwayConstructionArea(0)
    , highwayRoadType(0)
    , highwayHighwayExitRight(0)
    , highwayHighwayExitLeft(0)
    , highwayProbabilityLeftLane(0.0)
    , highwayProbabilityRightLane(0.0)
    , highwayDriving_peed_left_lane(0.0)
    , highwayDriving_peed_right_lane(0.0)
    , highwayprotocol_version(0)  {
    }
  Camera_Lane_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , messageID(0)
    , localStamp(_alloc)
    , globalStamp(_alloc)
    , l_numoflaneline(0)
    , l_lanelineid(0)
    , l_lanepositon(0.0)
    , l_lanecurvature(0.0)
    , l_lanecurvaturederivative(0.0)
    , l_lane_type(0)
    , l_heading_angle(0.0)
    , l_lane_mark_color(0)
    , l_laneQuality(0)
    , l_laneWidthMarking(0)
    , l_laneViewRangStart(0)
    , l_laneViewRangEnd(0)
    , l_laneCrossing(0)
    , l_lanePRED_DIST_BASED_EXTRAPOLATION(0)
    , l_lanePRED_OTHER_SIDE(0)
    , l_lanePRED_OVERRIDE(0)
    , l_lanePRED_OCCLUDED_LM_EXTRAPOLATION(0)
    , l_lanePRED_HEADWAY_ORIENTED(0)
    , l_lanePRED_SOURCE_DIVERGING_LANES(0)
    , l_lanePRED_SOURCE_GUARDRAIL_SHADOW(0)
    , l_lanePRED_SOURCE_HWE_SPAIN(0)
    , l_lanePRED_SOURCE_STD(0)
    , l_lanePRED_SOURCE_VRTL_MERGE(0)
    , l_laneTCL(0)
    , r_numoflaneline(0)
    , r_lanelineid(0)
    , r_lanepositon(0.0)
    , r_lanecurvature(0.0)
    , r_lanecurvaturederivative(0.0)
    , r_lane_type(0)
    , r_heading_angle(0.0)
    , r_lane_mark_color(0)
    , r_laneQuality(0)
    , r_laneWidthMarking(0)
    , r_laneViewRangStart(0)
    , r_laneViewRangEnd(0)
    , r_laneCrossing(0)
    , r_lanePRED_DIST_BASED_EXTRAPOLATION(0)
    , r_lanePRED_OTHER_SIDE(0)
    , r_lanePRED_OVERRIDE(0)
    , r_lanePRED_OCCLUDED_LM_EXTRAPOLATION(0)
    , r_lanePRED_HEADWAY_ORIENTED(0)
    , r_lanePRED_SOURCE_DIVERGING_LANES(0)
    , r_lanePRED_SOURCE_GUARDRAIL_SHADOW(0)
    , r_lanePRED_SOURCE_HWE_SPAIN(0)
    , r_lanePRED_SOURCE_STD(0)
    , r_lanePRED_SOURCE_VRTL_MERGE(0)
    , r_laneTCL(0)
    , next_l_laneViewRangStart(0)
    , next_l_laneViewRangEnd(0)
    , next_l_numoflaneline(0)
    , next_l_lanelineid(0)
    , next_l_lanepositon(0.0)
    , next_l_lanecurvature(0.0)
    , next_l_lanecurvaturederivative(0.0)
    , next_l_lane_type(0)
    , next_l_heading_angle(0.0)
    , next_l_lane_mark_color(0)
    , next_l_laneQuality(0)
    , next_l_laneWidthMarking(0)
    , next_r_laneViewRangStart(0)
    , next_r_laneViewRangEnd(0)
    , next_r_numoflaneline(0)
    , next_r_lanelineid(0)
    , next_r_lanepositon(0.0)
    , next_r_lanecurvature(0.0)
    , next_r_lanecurvaturederivative(0.0)
    , next_r_lane_type(0)
    , next_r_heading_angle(0.0)
    , next_r_lane_mark_color(0)
    , next_r_laneQuality(0)
    , next_r_laneWidthMarking(0)
    , highwayConstructionArea(0)
    , highwayRoadType(0)
    , highwayHighwayExitRight(0)
    , highwayHighwayExitLeft(0)
    , highwayProbabilityLeftLane(0.0)
    , highwayProbabilityRightLane(0.0)
    , highwayDriving_peed_left_lane(0.0)
    , highwayDriving_peed_right_lane(0.0)
    , highwayprotocol_version(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _messageID_type;
  _messageID_type messageID;

   typedef  ::msg_camera::FrameStamp_<ContainerAllocator>  _localStamp_type;
  _localStamp_type localStamp;

   typedef  ::msg_camera::FrameStamp_<ContainerAllocator>  _globalStamp_type;
  _globalStamp_type globalStamp;

   typedef int32_t _l_numoflaneline_type;
  _l_numoflaneline_type l_numoflaneline;

   typedef int32_t _l_lanelineid_type;
  _l_lanelineid_type l_lanelineid;

   typedef double _l_lanepositon_type;
  _l_lanepositon_type l_lanepositon;

   typedef double _l_lanecurvature_type;
  _l_lanecurvature_type l_lanecurvature;

   typedef double _l_lanecurvaturederivative_type;
  _l_lanecurvaturederivative_type l_lanecurvaturederivative;

   typedef int32_t _l_lane_type_type;
  _l_lane_type_type l_lane_type;

   typedef double _l_heading_angle_type;
  _l_heading_angle_type l_heading_angle;

   typedef int32_t _l_lane_mark_color_type;
  _l_lane_mark_color_type l_lane_mark_color;

   typedef int32_t _l_laneQuality_type;
  _l_laneQuality_type l_laneQuality;

   typedef int32_t _l_laneWidthMarking_type;
  _l_laneWidthMarking_type l_laneWidthMarking;

   typedef int32_t _l_laneViewRangStart_type;
  _l_laneViewRangStart_type l_laneViewRangStart;

   typedef int32_t _l_laneViewRangEnd_type;
  _l_laneViewRangEnd_type l_laneViewRangEnd;

   typedef int32_t _l_laneCrossing_type;
  _l_laneCrossing_type l_laneCrossing;

   typedef int32_t _l_lanePRED_DIST_BASED_EXTRAPOLATION_type;
  _l_lanePRED_DIST_BASED_EXTRAPOLATION_type l_lanePRED_DIST_BASED_EXTRAPOLATION;

   typedef int32_t _l_lanePRED_OTHER_SIDE_type;
  _l_lanePRED_OTHER_SIDE_type l_lanePRED_OTHER_SIDE;

   typedef int32_t _l_lanePRED_OVERRIDE_type;
  _l_lanePRED_OVERRIDE_type l_lanePRED_OVERRIDE;

   typedef int32_t _l_lanePRED_OCCLUDED_LM_EXTRAPOLATION_type;
  _l_lanePRED_OCCLUDED_LM_EXTRAPOLATION_type l_lanePRED_OCCLUDED_LM_EXTRAPOLATION;

   typedef int32_t _l_lanePRED_HEADWAY_ORIENTED_type;
  _l_lanePRED_HEADWAY_ORIENTED_type l_lanePRED_HEADWAY_ORIENTED;

   typedef int32_t _l_lanePRED_SOURCE_DIVERGING_LANES_type;
  _l_lanePRED_SOURCE_DIVERGING_LANES_type l_lanePRED_SOURCE_DIVERGING_LANES;

   typedef int32_t _l_lanePRED_SOURCE_GUARDRAIL_SHADOW_type;
  _l_lanePRED_SOURCE_GUARDRAIL_SHADOW_type l_lanePRED_SOURCE_GUARDRAIL_SHADOW;

   typedef int32_t _l_lanePRED_SOURCE_HWE_SPAIN_type;
  _l_lanePRED_SOURCE_HWE_SPAIN_type l_lanePRED_SOURCE_HWE_SPAIN;

   typedef int32_t _l_lanePRED_SOURCE_STD_type;
  _l_lanePRED_SOURCE_STD_type l_lanePRED_SOURCE_STD;

   typedef int32_t _l_lanePRED_SOURCE_VRTL_MERGE_type;
  _l_lanePRED_SOURCE_VRTL_MERGE_type l_lanePRED_SOURCE_VRTL_MERGE;

   typedef int32_t _l_laneTCL_type;
  _l_laneTCL_type l_laneTCL;

   typedef int32_t _r_numoflaneline_type;
  _r_numoflaneline_type r_numoflaneline;

   typedef int32_t _r_lanelineid_type;
  _r_lanelineid_type r_lanelineid;

   typedef double _r_lanepositon_type;
  _r_lanepositon_type r_lanepositon;

   typedef double _r_lanecurvature_type;
  _r_lanecurvature_type r_lanecurvature;

   typedef double _r_lanecurvaturederivative_type;
  _r_lanecurvaturederivative_type r_lanecurvaturederivative;

   typedef int32_t _r_lane_type_type;
  _r_lane_type_type r_lane_type;

   typedef double _r_heading_angle_type;
  _r_heading_angle_type r_heading_angle;

   typedef int32_t _r_lane_mark_color_type;
  _r_lane_mark_color_type r_lane_mark_color;

   typedef int32_t _r_laneQuality_type;
  _r_laneQuality_type r_laneQuality;

   typedef int32_t _r_laneWidthMarking_type;
  _r_laneWidthMarking_type r_laneWidthMarking;

   typedef int32_t _r_laneViewRangStart_type;
  _r_laneViewRangStart_type r_laneViewRangStart;

   typedef int32_t _r_laneViewRangEnd_type;
  _r_laneViewRangEnd_type r_laneViewRangEnd;

   typedef int32_t _r_laneCrossing_type;
  _r_laneCrossing_type r_laneCrossing;

   typedef int32_t _r_lanePRED_DIST_BASED_EXTRAPOLATION_type;
  _r_lanePRED_DIST_BASED_EXTRAPOLATION_type r_lanePRED_DIST_BASED_EXTRAPOLATION;

   typedef int32_t _r_lanePRED_OTHER_SIDE_type;
  _r_lanePRED_OTHER_SIDE_type r_lanePRED_OTHER_SIDE;

   typedef int32_t _r_lanePRED_OVERRIDE_type;
  _r_lanePRED_OVERRIDE_type r_lanePRED_OVERRIDE;

   typedef int32_t _r_lanePRED_OCCLUDED_LM_EXTRAPOLATION_type;
  _r_lanePRED_OCCLUDED_LM_EXTRAPOLATION_type r_lanePRED_OCCLUDED_LM_EXTRAPOLATION;

   typedef int32_t _r_lanePRED_HEADWAY_ORIENTED_type;
  _r_lanePRED_HEADWAY_ORIENTED_type r_lanePRED_HEADWAY_ORIENTED;

   typedef int32_t _r_lanePRED_SOURCE_DIVERGING_LANES_type;
  _r_lanePRED_SOURCE_DIVERGING_LANES_type r_lanePRED_SOURCE_DIVERGING_LANES;

   typedef int32_t _r_lanePRED_SOURCE_GUARDRAIL_SHADOW_type;
  _r_lanePRED_SOURCE_GUARDRAIL_SHADOW_type r_lanePRED_SOURCE_GUARDRAIL_SHADOW;

   typedef int32_t _r_lanePRED_SOURCE_HWE_SPAIN_type;
  _r_lanePRED_SOURCE_HWE_SPAIN_type r_lanePRED_SOURCE_HWE_SPAIN;

   typedef int32_t _r_lanePRED_SOURCE_STD_type;
  _r_lanePRED_SOURCE_STD_type r_lanePRED_SOURCE_STD;

   typedef int32_t _r_lanePRED_SOURCE_VRTL_MERGE_type;
  _r_lanePRED_SOURCE_VRTL_MERGE_type r_lanePRED_SOURCE_VRTL_MERGE;

   typedef int32_t _r_laneTCL_type;
  _r_laneTCL_type r_laneTCL;

   typedef int32_t _next_l_laneViewRangStart_type;
  _next_l_laneViewRangStart_type next_l_laneViewRangStart;

   typedef int32_t _next_l_laneViewRangEnd_type;
  _next_l_laneViewRangEnd_type next_l_laneViewRangEnd;

   typedef int32_t _next_l_numoflaneline_type;
  _next_l_numoflaneline_type next_l_numoflaneline;

   typedef int32_t _next_l_lanelineid_type;
  _next_l_lanelineid_type next_l_lanelineid;

   typedef double _next_l_lanepositon_type;
  _next_l_lanepositon_type next_l_lanepositon;

   typedef double _next_l_lanecurvature_type;
  _next_l_lanecurvature_type next_l_lanecurvature;

   typedef double _next_l_lanecurvaturederivative_type;
  _next_l_lanecurvaturederivative_type next_l_lanecurvaturederivative;

   typedef int32_t _next_l_lane_type_type;
  _next_l_lane_type_type next_l_lane_type;

   typedef double _next_l_heading_angle_type;
  _next_l_heading_angle_type next_l_heading_angle;

   typedef int32_t _next_l_lane_mark_color_type;
  _next_l_lane_mark_color_type next_l_lane_mark_color;

   typedef int32_t _next_l_laneQuality_type;
  _next_l_laneQuality_type next_l_laneQuality;

   typedef int32_t _next_l_laneWidthMarking_type;
  _next_l_laneWidthMarking_type next_l_laneWidthMarking;

   typedef int32_t _next_r_laneViewRangStart_type;
  _next_r_laneViewRangStart_type next_r_laneViewRangStart;

   typedef int32_t _next_r_laneViewRangEnd_type;
  _next_r_laneViewRangEnd_type next_r_laneViewRangEnd;

   typedef int32_t _next_r_numoflaneline_type;
  _next_r_numoflaneline_type next_r_numoflaneline;

   typedef int32_t _next_r_lanelineid_type;
  _next_r_lanelineid_type next_r_lanelineid;

   typedef double _next_r_lanepositon_type;
  _next_r_lanepositon_type next_r_lanepositon;

   typedef double _next_r_lanecurvature_type;
  _next_r_lanecurvature_type next_r_lanecurvature;

   typedef double _next_r_lanecurvaturederivative_type;
  _next_r_lanecurvaturederivative_type next_r_lanecurvaturederivative;

   typedef int32_t _next_r_lane_type_type;
  _next_r_lane_type_type next_r_lane_type;

   typedef double _next_r_heading_angle_type;
  _next_r_heading_angle_type next_r_heading_angle;

   typedef int32_t _next_r_lane_mark_color_type;
  _next_r_lane_mark_color_type next_r_lane_mark_color;

   typedef int32_t _next_r_laneQuality_type;
  _next_r_laneQuality_type next_r_laneQuality;

   typedef int32_t _next_r_laneWidthMarking_type;
  _next_r_laneWidthMarking_type next_r_laneWidthMarking;

   typedef int32_t _highwayConstructionArea_type;
  _highwayConstructionArea_type highwayConstructionArea;

   typedef int32_t _highwayRoadType_type;
  _highwayRoadType_type highwayRoadType;

   typedef int32_t _highwayHighwayExitRight_type;
  _highwayHighwayExitRight_type highwayHighwayExitRight;

   typedef int32_t _highwayHighwayExitLeft_type;
  _highwayHighwayExitLeft_type highwayHighwayExitLeft;

   typedef double _highwayProbabilityLeftLane_type;
  _highwayProbabilityLeftLane_type highwayProbabilityLeftLane;

   typedef double _highwayProbabilityRightLane_type;
  _highwayProbabilityRightLane_type highwayProbabilityRightLane;

   typedef double _highwayDriving_peed_left_lane_type;
  _highwayDriving_peed_left_lane_type highwayDriving_peed_left_lane;

   typedef double _highwayDriving_peed_right_lane_type;
  _highwayDriving_peed_right_lane_type highwayDriving_peed_right_lane;

   typedef int32_t _highwayprotocol_version_type;
  _highwayprotocol_version_type highwayprotocol_version;




  typedef boost::shared_ptr< ::msg_camera::Camera_Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_camera::Camera_Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Camera_Lane_

typedef ::msg_camera::Camera_Lane_<std::allocator<void> > Camera_Lane;

typedef boost::shared_ptr< ::msg_camera::Camera_Lane > Camera_LanePtr;
typedef boost::shared_ptr< ::msg_camera::Camera_Lane const> Camera_LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_camera::Camera_Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_camera::Camera_Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg_camera

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'msg_camera': ['/mnt/hgfs/Share/DFAx7i/ros_messages/src/msg_camera/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg_camera::Camera_Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_camera::Camera_Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_camera::Camera_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_camera::Camera_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_camera::Camera_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_camera::Camera_Lane_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_camera::Camera_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5897b7b9f9cb0b914b0d2214c60af5a";
  }

  static const char* value(const ::msg_camera::Camera_Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5897b7b9f9cb0b9ULL;
  static const uint64_t static_value2 = 0x14b0d2214c60af5aULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_camera::Camera_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_camera/Camera_Lane";
  }

  static const char* value(const ::msg_camera::Camera_Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_camera::Camera_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n\
int32 	messageID              #为每一个MSG设定唯一的标识码\n\
\n\
FrameStamp localStamp\n\
FrameStamp globalStamp\n\
\n\
int32 l_numoflaneline\n\
int32 l_lanelineid\n\
float64 l_lanepositon\n\
float64 l_lanecurvature\n\
float64 l_lanecurvaturederivative\n\
int32 l_lane_type\n\
float64 l_heading_angle\n\
int32  l_lane_mark_color\n\
int32 l_laneQuality\n\
int32 l_laneWidthMarking\n\
int32 l_laneViewRangStart\n\
int32 l_laneViewRangEnd\n\
int32 l_laneCrossing\n\
int32 l_lanePRED_DIST_BASED_EXTRAPOLATION\n\
int32 l_lanePRED_OTHER_SIDE\n\
int32 l_lanePRED_OVERRIDE\n\
int32 l_lanePRED_OCCLUDED_LM_EXTRAPOLATION\n\
int32 l_lanePRED_HEADWAY_ORIENTED\n\
int32 l_lanePRED_SOURCE_DIVERGING_LANES\n\
int32 l_lanePRED_SOURCE_GUARDRAIL_SHADOW\n\
int32 l_lanePRED_SOURCE_HWE_SPAIN\n\
int32 l_lanePRED_SOURCE_STD\n\
int32 l_lanePRED_SOURCE_VRTL_MERGE\n\
int32 l_laneTCL\n\
\n\
\n\
int32 r_numoflaneline\n\
int32 r_lanelineid\n\
float64 r_lanepositon  \n\
float64 r_lanecurvature  \n\
float64 r_lanecurvaturederivative \n\
int32 r_lane_type\n\
float64 r_heading_angle  \n\
int32  r_lane_mark_color\n\
int32 r_laneQuality\n\
int32 r_laneWidthMarking\n\
int32 r_laneViewRangStart\n\
int32 r_laneViewRangEnd\n\
int32 r_laneCrossing\n\
int32 r_lanePRED_DIST_BASED_EXTRAPOLATION\n\
int32 r_lanePRED_OTHER_SIDE\n\
int32 r_lanePRED_OVERRIDE\n\
int32 r_lanePRED_OCCLUDED_LM_EXTRAPOLATION\n\
int32 r_lanePRED_HEADWAY_ORIENTED\n\
int32 r_lanePRED_SOURCE_DIVERGING_LANES\n\
int32 r_lanePRED_SOURCE_GUARDRAIL_SHADOW\n\
int32 r_lanePRED_SOURCE_HWE_SPAIN\n\
int32 r_lanePRED_SOURCE_STD\n\
int32 r_lanePRED_SOURCE_VRTL_MERGE\n\
int32 r_laneTCL\n\
\n\
\n\
int32 next_l_laneViewRangStart\n\
int32 next_l_laneViewRangEnd\n\
int32 next_l_numoflaneline\n\
int32 next_l_lanelineid\n\
float64 next_l_lanepositon\n\
float64  next_l_lanecurvature\n\
float64 next_l_lanecurvaturederivative\n\
int32 next_l_lane_type\n\
float64 next_l_heading_angle\n\
int32  next_l_lane_mark_color\n\
int32 next_l_laneQuality\n\
int32 next_l_laneWidthMarking\n\
\n\
int32 next_r_laneViewRangStart\n\
int32 next_r_laneViewRangEnd\n\
int32 next_r_numoflaneline\n\
int32 next_r_lanelineid\n\
float64 next_r_lanepositon\n\
float64 next_r_lanecurvature\n\
float64 next_r_lanecurvaturederivative\n\
int32 next_r_lane_type\n\
float64 next_r_heading_angle\n\
int32  next_r_lane_mark_color\n\
int32 next_r_laneQuality\n\
int32 next_r_laneWidthMarking\n\
\n\
#0x76B highway road info\n\
int32 highwayConstructionArea\n\
int32 highwayRoadType\n\
int32 highwayHighwayExitRight\n\
int32 highwayHighwayExitLeft\n\
float64   highwayProbabilityLeftLane\n\
float64   highwayProbabilityRightLane\n\
float64   highwayDriving_peed_left_lane\n\
float64   highwayDriving_peed_right_lane\n\
int32 highwayprotocol_version\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: msg_camera/FrameStamp\n\
#MSG FrameStamp\n\
Header header\n\
float64 time\n\
float64  lat\n\
float64  lng\n\
float64  height\n\
float64[3] position\n\
float64[3] orientation\n\
float64[3] linearSpeed\n\
float64[3] angularSpeed\n\
";
  }

  static const char* value(const ::msg_camera::Camera_Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_camera::Camera_Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.messageID);
      stream.next(m.localStamp);
      stream.next(m.globalStamp);
      stream.next(m.l_numoflaneline);
      stream.next(m.l_lanelineid);
      stream.next(m.l_lanepositon);
      stream.next(m.l_lanecurvature);
      stream.next(m.l_lanecurvaturederivative);
      stream.next(m.l_lane_type);
      stream.next(m.l_heading_angle);
      stream.next(m.l_lane_mark_color);
      stream.next(m.l_laneQuality);
      stream.next(m.l_laneWidthMarking);
      stream.next(m.l_laneViewRangStart);
      stream.next(m.l_laneViewRangEnd);
      stream.next(m.l_laneCrossing);
      stream.next(m.l_lanePRED_DIST_BASED_EXTRAPOLATION);
      stream.next(m.l_lanePRED_OTHER_SIDE);
      stream.next(m.l_lanePRED_OVERRIDE);
      stream.next(m.l_lanePRED_OCCLUDED_LM_EXTRAPOLATION);
      stream.next(m.l_lanePRED_HEADWAY_ORIENTED);
      stream.next(m.l_lanePRED_SOURCE_DIVERGING_LANES);
      stream.next(m.l_lanePRED_SOURCE_GUARDRAIL_SHADOW);
      stream.next(m.l_lanePRED_SOURCE_HWE_SPAIN);
      stream.next(m.l_lanePRED_SOURCE_STD);
      stream.next(m.l_lanePRED_SOURCE_VRTL_MERGE);
      stream.next(m.l_laneTCL);
      stream.next(m.r_numoflaneline);
      stream.next(m.r_lanelineid);
      stream.next(m.r_lanepositon);
      stream.next(m.r_lanecurvature);
      stream.next(m.r_lanecurvaturederivative);
      stream.next(m.r_lane_type);
      stream.next(m.r_heading_angle);
      stream.next(m.r_lane_mark_color);
      stream.next(m.r_laneQuality);
      stream.next(m.r_laneWidthMarking);
      stream.next(m.r_laneViewRangStart);
      stream.next(m.r_laneViewRangEnd);
      stream.next(m.r_laneCrossing);
      stream.next(m.r_lanePRED_DIST_BASED_EXTRAPOLATION);
      stream.next(m.r_lanePRED_OTHER_SIDE);
      stream.next(m.r_lanePRED_OVERRIDE);
      stream.next(m.r_lanePRED_OCCLUDED_LM_EXTRAPOLATION);
      stream.next(m.r_lanePRED_HEADWAY_ORIENTED);
      stream.next(m.r_lanePRED_SOURCE_DIVERGING_LANES);
      stream.next(m.r_lanePRED_SOURCE_GUARDRAIL_SHADOW);
      stream.next(m.r_lanePRED_SOURCE_HWE_SPAIN);
      stream.next(m.r_lanePRED_SOURCE_STD);
      stream.next(m.r_lanePRED_SOURCE_VRTL_MERGE);
      stream.next(m.r_laneTCL);
      stream.next(m.next_l_laneViewRangStart);
      stream.next(m.next_l_laneViewRangEnd);
      stream.next(m.next_l_numoflaneline);
      stream.next(m.next_l_lanelineid);
      stream.next(m.next_l_lanepositon);
      stream.next(m.next_l_lanecurvature);
      stream.next(m.next_l_lanecurvaturederivative);
      stream.next(m.next_l_lane_type);
      stream.next(m.next_l_heading_angle);
      stream.next(m.next_l_lane_mark_color);
      stream.next(m.next_l_laneQuality);
      stream.next(m.next_l_laneWidthMarking);
      stream.next(m.next_r_laneViewRangStart);
      stream.next(m.next_r_laneViewRangEnd);
      stream.next(m.next_r_numoflaneline);
      stream.next(m.next_r_lanelineid);
      stream.next(m.next_r_lanepositon);
      stream.next(m.next_r_lanecurvature);
      stream.next(m.next_r_lanecurvaturederivative);
      stream.next(m.next_r_lane_type);
      stream.next(m.next_r_heading_angle);
      stream.next(m.next_r_lane_mark_color);
      stream.next(m.next_r_laneQuality);
      stream.next(m.next_r_laneWidthMarking);
      stream.next(m.highwayConstructionArea);
      stream.next(m.highwayRoadType);
      stream.next(m.highwayHighwayExitRight);
      stream.next(m.highwayHighwayExitLeft);
      stream.next(m.highwayProbabilityLeftLane);
      stream.next(m.highwayProbabilityRightLane);
      stream.next(m.highwayDriving_peed_left_lane);
      stream.next(m.highwayDriving_peed_right_lane);
      stream.next(m.highwayprotocol_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Camera_Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_camera::Camera_Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_camera::Camera_Lane_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "messageID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.messageID);
    s << indent << "localStamp: ";
    s << std::endl;
    Printer< ::msg_camera::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.localStamp);
    s << indent << "globalStamp: ";
    s << std::endl;
    Printer< ::msg_camera::FrameStamp_<ContainerAllocator> >::stream(s, indent + "  ", v.globalStamp);
    s << indent << "l_numoflaneline: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_numoflaneline);
    s << indent << "l_lanelineid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanelineid);
    s << indent << "l_lanepositon: ";
    Printer<double>::stream(s, indent + "  ", v.l_lanepositon);
    s << indent << "l_lanecurvature: ";
    Printer<double>::stream(s, indent + "  ", v.l_lanecurvature);
    s << indent << "l_lanecurvaturederivative: ";
    Printer<double>::stream(s, indent + "  ", v.l_lanecurvaturederivative);
    s << indent << "l_lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lane_type);
    s << indent << "l_heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.l_heading_angle);
    s << indent << "l_lane_mark_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lane_mark_color);
    s << indent << "l_laneQuality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_laneQuality);
    s << indent << "l_laneWidthMarking: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_laneWidthMarking);
    s << indent << "l_laneViewRangStart: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_laneViewRangStart);
    s << indent << "l_laneViewRangEnd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_laneViewRangEnd);
    s << indent << "l_laneCrossing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_laneCrossing);
    s << indent << "l_lanePRED_DIST_BASED_EXTRAPOLATION: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_DIST_BASED_EXTRAPOLATION);
    s << indent << "l_lanePRED_OTHER_SIDE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_OTHER_SIDE);
    s << indent << "l_lanePRED_OVERRIDE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_OVERRIDE);
    s << indent << "l_lanePRED_OCCLUDED_LM_EXTRAPOLATION: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_OCCLUDED_LM_EXTRAPOLATION);
    s << indent << "l_lanePRED_HEADWAY_ORIENTED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_HEADWAY_ORIENTED);
    s << indent << "l_lanePRED_SOURCE_DIVERGING_LANES: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_SOURCE_DIVERGING_LANES);
    s << indent << "l_lanePRED_SOURCE_GUARDRAIL_SHADOW: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_SOURCE_GUARDRAIL_SHADOW);
    s << indent << "l_lanePRED_SOURCE_HWE_SPAIN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_SOURCE_HWE_SPAIN);
    s << indent << "l_lanePRED_SOURCE_STD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_SOURCE_STD);
    s << indent << "l_lanePRED_SOURCE_VRTL_MERGE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_lanePRED_SOURCE_VRTL_MERGE);
    s << indent << "l_laneTCL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_laneTCL);
    s << indent << "r_numoflaneline: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_numoflaneline);
    s << indent << "r_lanelineid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanelineid);
    s << indent << "r_lanepositon: ";
    Printer<double>::stream(s, indent + "  ", v.r_lanepositon);
    s << indent << "r_lanecurvature: ";
    Printer<double>::stream(s, indent + "  ", v.r_lanecurvature);
    s << indent << "r_lanecurvaturederivative: ";
    Printer<double>::stream(s, indent + "  ", v.r_lanecurvaturederivative);
    s << indent << "r_lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lane_type);
    s << indent << "r_heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.r_heading_angle);
    s << indent << "r_lane_mark_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lane_mark_color);
    s << indent << "r_laneQuality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_laneQuality);
    s << indent << "r_laneWidthMarking: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_laneWidthMarking);
    s << indent << "r_laneViewRangStart: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_laneViewRangStart);
    s << indent << "r_laneViewRangEnd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_laneViewRangEnd);
    s << indent << "r_laneCrossing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_laneCrossing);
    s << indent << "r_lanePRED_DIST_BASED_EXTRAPOLATION: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_DIST_BASED_EXTRAPOLATION);
    s << indent << "r_lanePRED_OTHER_SIDE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_OTHER_SIDE);
    s << indent << "r_lanePRED_OVERRIDE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_OVERRIDE);
    s << indent << "r_lanePRED_OCCLUDED_LM_EXTRAPOLATION: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_OCCLUDED_LM_EXTRAPOLATION);
    s << indent << "r_lanePRED_HEADWAY_ORIENTED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_HEADWAY_ORIENTED);
    s << indent << "r_lanePRED_SOURCE_DIVERGING_LANES: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_SOURCE_DIVERGING_LANES);
    s << indent << "r_lanePRED_SOURCE_GUARDRAIL_SHADOW: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_SOURCE_GUARDRAIL_SHADOW);
    s << indent << "r_lanePRED_SOURCE_HWE_SPAIN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_SOURCE_HWE_SPAIN);
    s << indent << "r_lanePRED_SOURCE_STD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_SOURCE_STD);
    s << indent << "r_lanePRED_SOURCE_VRTL_MERGE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_lanePRED_SOURCE_VRTL_MERGE);
    s << indent << "r_laneTCL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_laneTCL);
    s << indent << "next_l_laneViewRangStart: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_laneViewRangStart);
    s << indent << "next_l_laneViewRangEnd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_laneViewRangEnd);
    s << indent << "next_l_numoflaneline: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_numoflaneline);
    s << indent << "next_l_lanelineid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_lanelineid);
    s << indent << "next_l_lanepositon: ";
    Printer<double>::stream(s, indent + "  ", v.next_l_lanepositon);
    s << indent << "next_l_lanecurvature: ";
    Printer<double>::stream(s, indent + "  ", v.next_l_lanecurvature);
    s << indent << "next_l_lanecurvaturederivative: ";
    Printer<double>::stream(s, indent + "  ", v.next_l_lanecurvaturederivative);
    s << indent << "next_l_lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_lane_type);
    s << indent << "next_l_heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.next_l_heading_angle);
    s << indent << "next_l_lane_mark_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_lane_mark_color);
    s << indent << "next_l_laneQuality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_laneQuality);
    s << indent << "next_l_laneWidthMarking: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_l_laneWidthMarking);
    s << indent << "next_r_laneViewRangStart: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_laneViewRangStart);
    s << indent << "next_r_laneViewRangEnd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_laneViewRangEnd);
    s << indent << "next_r_numoflaneline: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_numoflaneline);
    s << indent << "next_r_lanelineid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_lanelineid);
    s << indent << "next_r_lanepositon: ";
    Printer<double>::stream(s, indent + "  ", v.next_r_lanepositon);
    s << indent << "next_r_lanecurvature: ";
    Printer<double>::stream(s, indent + "  ", v.next_r_lanecurvature);
    s << indent << "next_r_lanecurvaturederivative: ";
    Printer<double>::stream(s, indent + "  ", v.next_r_lanecurvaturederivative);
    s << indent << "next_r_lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_lane_type);
    s << indent << "next_r_heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.next_r_heading_angle);
    s << indent << "next_r_lane_mark_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_lane_mark_color);
    s << indent << "next_r_laneQuality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_laneQuality);
    s << indent << "next_r_laneWidthMarking: ";
    Printer<int32_t>::stream(s, indent + "  ", v.next_r_laneWidthMarking);
    s << indent << "highwayConstructionArea: ";
    Printer<int32_t>::stream(s, indent + "  ", v.highwayConstructionArea);
    s << indent << "highwayRoadType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.highwayRoadType);
    s << indent << "highwayHighwayExitRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.highwayHighwayExitRight);
    s << indent << "highwayHighwayExitLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.highwayHighwayExitLeft);
    s << indent << "highwayProbabilityLeftLane: ";
    Printer<double>::stream(s, indent + "  ", v.highwayProbabilityLeftLane);
    s << indent << "highwayProbabilityRightLane: ";
    Printer<double>::stream(s, indent + "  ", v.highwayProbabilityRightLane);
    s << indent << "highwayDriving_peed_left_lane: ";
    Printer<double>::stream(s, indent + "  ", v.highwayDriving_peed_left_lane);
    s << indent << "highwayDriving_peed_right_lane: ";
    Printer<double>::stream(s, indent + "  ", v.highwayDriving_peed_right_lane);
    s << indent << "highwayprotocol_version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.highwayprotocol_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_CAMERA_MESSAGE_CAMERA_LANE_H
